<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Windows常用快捷键</title>
    <url>/e79721a0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Ctrl+C：复制<br />
Ctrl+V：粘贴<br />
Ctrl+A：全选<br />
Ctrl+X：剪切<br />
Ctrl+Z：撤销<br />
Ctrl+S：保存<br />
Alt+F4：关闭</p>
]]></content>
      <tags>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/bce68613.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mysql常见命令"><a class="markdownIt-Anchor" href="#mysql常见命令"></a> MySQL常见命令</h1>
<h2 id="mysql服务的启动和停止"><a class="markdownIt-Anchor" href="#mysql服务的启动和停止"></a> MySQL服务的启动和停止</h2>
<ul>
<li>方式一：计算机——右击计算级管理——服务</li>
<li>方式二：通过管理员的身份运行命令提示符
<ul>
<li>启动：net start 服务名</li>
<li>停止：net stop 服务名</li>
</ul>
</li>
</ul>
<h2 id="mysql服务端的登录和退出"><a class="markdownIt-Anchor" href="#mysql服务端的登录和退出"></a> MySQL服务端的登录和退出</h2>
<ul>
<li>方式一：通过mysql自带客户端，只限于root用户</li>
<li>方式二：通过windows自带的客户端
<ul>
<li>登录：远程服务器：mysql -h 主机名 -P 端口号 -u 用户名 -p密码<br />
本机：mysql -u 用户名 -p密码</li>
<li>退出：exit或Ctrl+C</li>
</ul>
</li>
</ul>
<h2 id="mysql常见命令-2"><a class="markdownIt-Anchor" href="#mysql常见命令-2"></a> MySQL常见命令</h2>
<ol>
<li>查看当前所有的数据库
<ul>
<li><code>show databases;</code></li>
</ul>
</li>
<li>打开指定的库
<ul>
<li><code>use 库名</code></li>
</ul>
</li>
<li>查看当前库的所有表
<ul>
<li><code>show tables;</code></li>
</ul>
</li>
<li>查看其它库的所有表
<ul>
<li><code>show tables from 库名;</code></li>
</ul>
</li>
<li>创建表
<ul>
<li><code>create table 表名( 列名 列类型, 列名 列类型, ... )</code></li>
</ul>
</li>
<li>查看表结构
<ul>
<li><code>desc 表名;</code></li>
</ul>
</li>
<li>查看服务器版本
<ul>
<li>方式一：登录到mysql服务端<br />
<code>select version();</code></li>
<li>方式二：没有登录到mysql服务端<br />
<code>mysql --version</code><br />
或<br />
<code>mysql --V</code></li>
</ul>
</li>
</ol>
<h2 id="mysql的语法规范"><a class="markdownIt-Anchor" href="#mysql的语法规范"></a> MySQL的语法规范</h2>
<ol>
<li>不区分大小写，但建议关键字大写，表名、列名小写</li>
<li>每条命令最好用分号结尾</li>
<li>每条命令根据需要，可以进行缩进或换行</li>
<li>注释
<ul>
<li>单行注释：#注释文字</li>
<li>单行注释：-- 注释文字</li>
<li>多行注释：/<em>注释文字</em>/</li>
</ul>
</li>
</ol>
<h1 id="dql语言"><a class="markdownIt-Anchor" href="#dql语言"></a> DQL语言</h1>
<h2 id="基础查询"><a class="markdownIt-Anchor" href="#基础查询"></a> 基础查询</h2>
<h3 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h3>
<p><code>select 查询列表 from 表名;</code><br />
类似于：<code>System.out.println(打印东西);</code></p>
<h3 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h3>
<ol>
<li>查询列表可以是：表中的字段、常量值、表达式、函数</li>
<li>查询的结果是一个虚拟的表格</li>
</ol>
<h3 id="代码示例"><a class="markdownIt-Anchor" href="#代码示例"></a> 代码示例</h3>
<p><code>USE myemployees;</code></p>
<ol>
<li>查询表中的单个字段<br />
<code>SELECT last_name FROM employees;</code></li>
<li>查询表中的多个字段<br />
<code>SELECT last_name,salary,email FROM employees;</code></li>
<li>查询表中的所有字段<br />
<code>SELECT * FROM employees;</code></li>
</ol>
<ul>
<li>注：
<ul>
<li>1.表中字段与关键字重名需加着重号</li>
<li>2.选中命令执行F9，格式化F12</li>
</ul>
</li>
</ul>
<ol start="4">
<li>查询常量值<br />
<code>SELECT 100; //整形常量</code><br />
<code>SELECT 'john';//字符型常量，mysql不区分字符和字符串</code></li>
<li>查询表达式<br />
<code>SELECT 100*98;</code><br />
<code>SELECT 100%98;</code></li>
<li>查询函数<br />
<code>SELECT VERSION();</code></li>
<li>起别名
<ul>
<li>好处：
<ul>
<li>1、便于理解</li>
<li>2、如果要查询的字段有重名的情况，使用别名可以区分开来
<ul>
<li>方式一：使用as<br />
<code>SELECT 100%98 AS 结果;</code></li>
<li>方式二：使用空格<br />
<code>SELECT last_name 姓,first_name 名 FROM employees;</code></li>
<li>如果别名中有特殊符号，如空格与井号，建议别名加上双引号（单引号也可以）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>去重
<ul>
<li>案例：查询员工表中涉及到的所有的部门编号<br />
<code>SELECT department_id FROM employees;</code><br />
<code>SELECT DISTINCT department_id FROM employees;</code></li>
</ul>
</li>
<li>+号的作用
<ul>
<li>java中的+号：
<ul>
<li>1、运算符，两个操作数都为数值型</li>
<li>2、连接符，只要有一个操作数为字符串</li>
</ul>
</li>
<li>mysql中的+号：<br />
仅仅只有一个功能：运算符
<ul>
<li><code>select 100+90;</code> 两个操作数都为数值型，则作加法运算</li>
<li><code>select '123'+90;</code> 其中一方为字符型，试图将字符型数值转换成数值型，如果转换成功，则继续做加法运算</li>
<li><code>select 'john'+90;</code> 如果转换失败，则将字符型数值转换成0</li>
<li><code>select null+10;</code> 只要其中一方为null，则结果肯定为null</li>
</ul>
</li>
<li>案例：员工名和姓连接成一个字段，并显示为 姓名<br />
<code>SELECT last_name+first_name AS 姓名 FROM employees;</code><br />
拼接：<br />
<code>SELECT CONCAT('a','b','c') AS 结果;</code><br />
案例实现：<br />
<code>SELECT CONCAT(last_name,first_name) AS 姓名 FROM employees;</code></li>
</ul>
</li>
</ol>
<h2 id="条件查询"><a class="markdownIt-Anchor" href="#条件查询"></a> 条件查询</h2>
<h3 id="语法-2"><a class="markdownIt-Anchor" href="#语法-2"></a> 语法</h3>
<p><code>select 查询列表 from 表名 where 筛选条件</code></p>
<h3 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h3>
<ul>
<li>按条件表达式筛选<br />
条件运算符：&gt; &lt; = !=or&lt;&gt; &gt;= &lt;=</li>
<li>按逻辑表达式筛选<br />
逻辑运算符： &amp;&amp; || ! or and or not
<ul>
<li>&amp;&amp;和and：两个条件都为true，结果为true，反之为false</li>
<li>||或or：只要有一个条件为true，结果为true，反之为false</li>
<li>!或not：如果连接的条件本身为false，结果为true，反之为false</li>
</ul>
</li>
<li>模糊查询
<ul>
<li><code>like</code>
<ul>
<li>特点：
<ul>
<li>一般和通配符搭配使用<br />
通配符：
<ul>
<li>% 任意多个字符</li>
<li>_ 任意单个字符</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><code>between and</code>
<ul>
<li>使用between and 可以提高语句的简洁度</li>
<li>包含临界值</li>
<li>两个临界值不要调换位置</li>
</ul>
</li>
<li><code>in</code>
<ul>
<li>含义：判断某字段的值是否属于in列表中的某一项</li>
<li>特点：
<ul>
<li>使用in提高语句简洁度</li>
<li>in列表的值类型必须一致或兼容；</li>
</ul>
</li>
</ul>
</li>
<li><code>is null</code>
<ul>
<li>=或&lt;&gt;不能用于判断null值</li>
<li>is null或is not null 可以判断null值</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="按条件表达式筛选"><a class="markdownIt-Anchor" href="#按条件表达式筛选"></a> 按条件表达式筛选</h4>
<p>案例1：查询工资&gt;12000的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary<span class="operator">&gt;</span><span class="number">12000</span></span><br></pre></td></tr></table></figure>
<p>案例2：查询部门编号不等于90号的员工名和部门编号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_id <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id<span class="operator">&lt;&gt;</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure>
<h4 id="按逻辑表达式筛选"><a class="markdownIt-Anchor" href="#按逻辑表达式筛选"></a> 按逻辑表达式筛选</h4>
<p>案例1：查询工资z在10000到20000之间的员工名、工资以及奖金</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> lase_name,salary,commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary<span class="operator">&gt;=</span><span class="number">10000</span> <span class="keyword">AND</span> salary<span class="operator">&lt;=</span><span class="number">20000</span>;</span><br></pre></td></tr></table></figure>
<p>案例2：查询部门编号不是在90在110之间，或者工资高于15000的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> <span class="keyword">NOT</span>(department_id<span class="operator">&gt;=</span><span class="number">90</span> <span class="keyword">AND</span> department_id<span class="operator">&lt;=</span><span class="number">110</span>) <span class="keyword">OR</span> salary<span class="operator">&gt;</span><span class="number">15000</span>;</span><br></pre></td></tr></table></figure>
<h4 id="模糊查询"><a class="markdownIt-Anchor" href="#模糊查询"></a> 模糊查询</h4>
<h5 id="like"><a class="markdownIt-Anchor" href="#like"></a> like</h5>
<p>案例1：查询员工名中包含字符a的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>案例2：查询到员工名中第三个字符为n，第五个字符为l的员工名和工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,salary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;__n_l%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>案例3：查询员工名中第二个字符为_的员工名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_\_%&#x27;</span>;</span><br><span class="line">#<span class="keyword">or</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_$_%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;$&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h5 id="between-and"><a class="markdownIt-Anchor" href="#between-and"></a> between and</h5>
<p>案例1：查询员工编号在100到120之间的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="keyword">between</span> <span class="number">100</span> <span class="keyword">AND</span> <span class="number">120</span>;</span><br></pre></td></tr></table></figure>
<h5 id="in"><a class="markdownIt-Anchor" href="#in"></a> in</h5>
<p>案例1：查询员工的工种编号是 IT_PROG、AD_VP、AD_PRES中的一个员工名和工种编号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,job_id <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> job_id <span class="keyword">IN</span>( <span class="string">&#x27;IT_PROG&#x27;</span>,<span class="string">&#x27;AD_VP&#x27;</span>,<span class="string">&#x27;AD_PRES&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h5 id="is-null"><a class="markdownIt-Anchor" href="#is-null"></a> is null</h5>
<p>案例1：查询没有奖金的员工名和奖金率</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<p>案例2：查询有奖金的员工名和奖金率</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>
<h5 id="安全等于"><a class="markdownIt-Anchor" href="#安全等于"></a> 安全等于 &lt;=&gt;</h5>
<p>案例1：查询没有奖金的员工名和奖金率</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="operator">&lt;=&gt;</span><span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<p>案例2：查询工资为12000的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary <span class="operator">&lt;=&gt;</span><span class="number">12000</span></span><br></pre></td></tr></table></figure>
<h5 id="is-null-pk"><a class="markdownIt-Anchor" href="#is-null-pk"></a> is null pk &lt;=&gt;</h5>
<ul>
<li>is null:仅仅可以判断NULL值，可读性高，建议使用！</li>
<li>&lt;=&gt;    :既可以判断NULL值，又可以判断普通数值，可读性较低</li>
</ul>
<h2 id="排序查询"><a class="markdownIt-Anchor" href="#排序查询"></a> 排序查询</h2>
<h3 id="语法-3"><a class="markdownIt-Anchor" href="#语法-3"></a> 语法</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询列表</span><br><span class="line"><span class="keyword">FROM</span> 表</span><br><span class="line">【<span class="keyword">WHERE</span> 筛选条件】</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序列表 【<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>】</span><br></pre></td></tr></table></figure>
<h3 id="特点-2"><a class="markdownIt-Anchor" href="#特点-2"></a> 特点</h3>
<ol>
<li>asc代表的是升序，desc代表的是降序，如果不写，默认是升序</li>
<li>order by字句中可以支持单个字段、多个字段、表达式、函数、别名</li>
<li>order by字句一般是放在查询语句的最后面，limit字句除外</li>
</ol>
<h3 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h3>
<p>案例1：查询员工信息，要求工资从高到低排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<p>案例2：查询部门编号&gt;=90的员工信息，按入职时间的先后进行排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id<span class="operator">&gt;=</span><span class="number">90</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> hiredate <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>
<p>案例3：按年薪的高低显示员工的信息和年薪【按表达式排序】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>,salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) 年薪 <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<p>案例4：按年薪的高低显示员工的信息和年薪【按别名排序】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>,salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) 年薪 <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> 年薪 <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<p>案例5：查询姓名长度显示员工的姓名和工资【按函数排序】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LENGTH(last_name) 字节长度,last_name,salary <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> LENGTH(last_name) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<p>案例6：查询员工信息，要求先按工资升序排序，再按员工编号降序排序【按多个字段排序】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span>,employee_id <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<h2 id="常见函数介绍"><a class="markdownIt-Anchor" href="#常见函数介绍"></a> 常见函数介绍</h2>
<ul>
<li>概念：类似于java的方法，将一组逻辑语句封装在方法体中，对外暴露方法名</li>
<li>好处：1、隐藏了实现细节 2、提高代码的重用性</li>
<li>调用：SELECT 函数名(实参列表) 【FROM 表】;</li>
<li>特点：
<ul>
<li>叫什么（函数名）</li>
<li>干什么（函数功能）</li>
</ul>
</li>
<li>分类：
<ul>
<li>单行函数<br />
如 concat、length、ifnull等</li>
<li>分组函数
<ul>
<li>功能：做统计使用，又称为统计函数、聚合函数、组函数</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="单行函数"><a class="markdownIt-Anchor" href="#单行函数"></a> 单行函数</h3>
<h4 id="字符函数"><a class="markdownIt-Anchor" href="#字符函数"></a> 字符函数</h4>
<ol>
<li>length 获取参数值的字节个数<br />
<code>SELECT LENGTH('john');</code><br />
<code>SELECT LENGTH('张三丰hahaha');</code><br />
<code>SHOW VARIABLES LIKE '%char%';</code> 查看数据库编码</li>
<li>concat 拼接字符串<br />
<code>SELECT CONCAT(last_name,'_',first_name) 姓名 FROM employees;</code></li>
<li>upper、lower<br />
<code>SELECT UPPER('john');</code><br />
<code>SELECT LOWER('joHn');</code><br />
示例：将姓变大写，名变小写，然后拼接<br />
<code>SELECT CONCAT(UPPER(last_name),LOWER(first_name)) 姓名 FROM employees;</code></li>
<li>substr、substring<br />
注意：索引从1开始<br />
截取从指定索引处后面所有字符<br />
<code>SELECT SUBSTR('李莫愁爱上了陆展元',7 out_put;</code><br />
截取从指定索引处指定字符长度的字符<br />
<code>SELECT SUBSTR('李莫愁爱上了陆展元',1,3) out_put;</code><br />
案例：姓名中首字符大写，其他字符小写然后用下划线拼接，显示出来<br />
<code>SELECT CONCAT(UPPER(SUBSTR(last_name,1,1)),'_',LOWER(SUBSTR(last_name,2))) out_put FROM employees;</code></li>
<li>instr 返回子串第一次出现的索引，如果找不到返回0<br />
<code>SELECT INSTR('杨不悔爱上了殷六侠','殷六侠') AS out_put;</code></li>
<li>trim<br />
<code>SELECT TRIM(' 张翠山 ') AS out_put;</code><br />
<code>SELECT LENGTH(TRIM(' 张翠山 ')) AS out_put;</code><br />
<code>SELECT TRIM('a' FROM 'aaaaa张翠山aaaaa') AS out_put;</code></li>
<li>lpad 用指定的字符实现左填充指定长度<br />
<code>SELECT LPAD('殷素素',2,'*') AS out_put;</code></li>
<li>rpad<br />
<code>SELECT RPAD('殷素素',12,'ab') AS out_put;</code></li>
<li>replace 替换<br />
<code>SELECT REPLACE('张无忌爱上了周芷若','周芷若','赵敏') AS out_put;</code></li>
</ol>
<h4 id="数学函数"><a class="markdownIt-Anchor" href="#数学函数"></a> 数学函数</h4>
<ul>
<li>round 四舍五入    SELECT ROUND(1.65);<br />
<code>SELECT ROUND(1.567,2); 保留小数点后两位小数</code></li>
<li>cell 向上取整，返回大于等于该参数的最小整数<br />
<code>SELECT CELL(1.52);</code></li>
<li>floor 向下取整，返回小于等于该参数的最大整数<br />
<code>SELECT FLOOR(9.99);</code><br />
<code>truncate 截断</code><br />
<code>SELECT TRUNCATE(1.69999,1);</code></li>
<li>mod 取余<br />
<code>SELECT MOD(10,3);</code><br />
<code>SELECT 10%3;</code></li>
</ul>
<h4 id="日期函数"><a class="markdownIt-Anchor" href="#日期函数"></a> 日期函数</h4>
<ul>
<li>now 返回当前系统日期+时间<br />
<code>SELECT NOW();</code></li>
<li>curdate 返回当前系统日期，不包含时间<br />
<code>SELECT CURDATE();</code></li>
<li>curtime 返回当前时间，不包含日期<br />
<code>SELECT CURTIME();</code><br />
可以获取指定的部分，年、月、日、小时、分钟、秒<br />
<code>SELECT YEAR(NOW()) 年;</code><br />
<code>SELECT YEAR('1998-1-1') 年;</code><br />
<code>SELECT YEAR(hiredate) 年 FROM employees;</code><br />
<code>SELECT MONTH(NOW()) 月;</code><br />
<code>SELECT MONTHNAME(NOW()) 月;</code></li>
<li>str_to_date 将字符通过指定的格式转换成日期<br />
查询入职日期为1992-4-3的员工信息<br />
<code>SELECT * FROM employees WHERE hiredate = '1992-4-3';</code><br />
<code>SELECT * FROM employees WHERE hiredate = STR_TO_DATE('4-3 1992','%c-%d %Y);</code></li>
<li>date_format 将日期转换成字符<br />
<code>SELECT DATE_FORMAT(NOW(),'%Y年%m月%d日') AS out_put;</code><br />
查询有奖金的员工名和入职日期（xx月xx日 xx年）<br />
<code>SELECT last_name,DATE_FORMAT(hiredate,'%m月/%d日 %y年') 入职日期 FROM employees WHERE commission_pct IS NOT NULL;</code></li>
</ul>
<style>
table {
margin: auto;
}
</style>
<table>
<thead>
<tr>
<th style="text-align:center">格式符</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">%Y</td>
<td style="text-align:center">四位的年份</td>
</tr>
<tr>
<td style="text-align:center">%y</td>
<td style="text-align:center">2位的年份</td>
</tr>
<tr>
<td style="text-align:center">%m</td>
<td style="text-align:center">月份(01,02…11,12)</td>
</tr>
<tr>
<td style="text-align:center">%c</td>
<td style="text-align:center">月份(1,2…11,12)</td>
</tr>
<tr>
<td style="text-align:center">%d</td>
<td style="text-align:center">日(01,02…)</td>
</tr>
<tr>
<td style="text-align:center">%H</td>
<td style="text-align:center">小时(24小时制)</td>
</tr>
<tr>
<td style="text-align:center">%h</td>
<td style="text-align:center">小时(12小时制)</td>
</tr>
<tr>
<td style="text-align:center">%i</td>
<td style="text-align:center">分钟(00,01…59)</td>
</tr>
<tr>
<td style="text-align:center">%s</td>
<td style="text-align:center">秒(00,01…59)</td>
</tr>
</tbody>
</table>
<h4 id="其他函数"><a class="markdownIt-Anchor" href="#其他函数"></a> 其他函数</h4>
<p><code>SELECT VERSION();</code><br />
<code>SELECT DATABASE();</code><br />
<code>SELECT USER();</code></p>
<h4 id="流程控制函数"><a class="markdownIt-Anchor" href="#流程控制函数"></a> 流程控制函数</h4>
<ol>
<li>if函数：if else 的效果<br />
<code>SELECT IF(10&gt;5,'大','小');</code><br />
<code>SELECT last_name,commission_pct,IF(commission_pct IS NULL,'没奖金，呵呵','有奖金，嘻嘻') 备注 FROM employees;</code></li>
<li>case函数的使用一：switch case的效果<br />
java中<br />
switch（变量表达式）{<br />
case 常量1:语句1;break;<br />
…<br />
default:语句m;break;<br />
}<br />
mysql中<br />
case 要判断的字段或表达式<br />
when 常量1 then 要显示的值1或语句1;<br />
when 常量2 then 要显示的值2或语句;<br />
…<br />
else 要显示的值n或语句n;<br />
end</li>
</ol>
<p>案例：查询员工的工资，要求</p>
<p>部门号=30，显示的工资为1.1倍<br />
部门号=40，显示的工资为1.2倍<br />
部门号=50，显示的工资为1.3倍<br />
其他部门，显示的工资为原工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary 原始工资,department_id,</span><br><span class="line"><span class="keyword">CASE</span> department_id</span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">30</span> <span class="keyword">THEN</span> salary<span class="operator">*</span><span class="number">1.1</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">40</span> <span class="keyword">THEN</span> salary<span class="operator">*</span><span class="number">1.2</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">50</span> <span class="keyword">THEN</span> salary<span class="operator">*</span><span class="number">1.3</span></span><br><span class="line"><span class="keyword">ELSE</span> salary</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> 新工资</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>case 函数的使用二：类似于 多重if</li>
</ol>
<p>java中：<br />
if(条件1){<br />
语句1；<br />
}else if(条件2){<br />
语句2；<br />
}<br />
…<br />
else{<br />
语句n;<br />
}</p>
<p>mysql中：<br />
case<br />
when 条件1 then 要显示的值1或语句1<br />
when 条件2 then 要显示的值2或语句2<br />
。。。<br />
else 要显示的值n或语句n<br />
end</p>
<p>案例：查询员工的工资的情况<br />
如果工资&gt;20000,显示A级别<br />
如果工资&gt;15000,显示B级别<br />
如果工资&gt;10000，显示C级别<br />
否则，显示D级别</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary,</span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">20000</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> 工资级别</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
<h3 id="分组函数"><a class="markdownIt-Anchor" href="#分组函数"></a> 分组函数</h3>
<ul>
<li>
<p>功能：用作统计使用，又称为聚合函数或统计函数或组函数</p>
</li>
<li>
<p>分类：<br />
sum 求和、avg 平均值、max 最大值 、min 最小值 、count 计算个数</p>
</li>
<li>
<p>特点：</p>
<ol>
<li>
<p>sum、avg一般用于处理数值型<br />
max、min、count可以处理任何类型</p>
</li>
<li>
<p>以上分组函数都忽略null值</p>
</li>
<li>
<p>可以和distinct搭配实现去重的运算</p>
</li>
<li>
<p>count函数的单独介绍<br />
一般使用count(*)用作统计行数</p>
</li>
<li>
<p>和分组函数一同查询的字段要求是group by后的字段</p>
</li>
</ol>
</li>
</ul>
<ol>
<li>简单 的使用</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary) 和,<span class="built_in">AVG</span>(salary) 平均,<span class="built_in">MAX</span>(salary) 最高,<span class="built_in">MIN</span>(salary) 最低,<span class="built_in">COUNT</span>(salary) 个数</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary) 和,ROUND(<span class="built_in">AVG</span>(salary),<span class="number">2</span>) 平均,<span class="built_in">MAX</span>(salary) 最高,<span class="built_in">MIN</span>(salary) 最低,<span class="built_in">COUNT</span>(salary) 个数</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>参数支持哪些类型</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(last_name) ,<span class="built_in">AVG</span>(last_name) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(hiredate) ,<span class="built_in">AVG</span>(hiredate) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(last_name),<span class="built_in">MIN</span>(last_name) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(hiredate),<span class="built_in">MIN</span>(hiredate) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(commission_pct) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(last_name) <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>是否忽略null</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(commission_pct) ,<span class="built_in">AVG</span>(commission_pct),<span class="built_in">SUM</span>(commission_pct)<span class="operator">/</span><span class="number">35</span>,<span class="built_in">SUM</span>(commission_pct)<span class="operator">/</span><span class="number">107</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(commission_pct) ,<span class="built_in">MIN</span>(commission_pct) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(commission_pct) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> commission_pct <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>和distinct搭配</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(<span class="keyword">DISTINCT</span> salary),<span class="built_in">SUM</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> salary),<span class="built_in">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>count函数的详细介绍</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
<ul>
<li>效率：<br />
MYISAM存储引擎下  ，COUNT(<em>)的效率高<br />
INNODB存储引擎下，COUNT(</em>)和COUNT(1)的效率差不多，比COUNT(字段)要高一些</li>
</ul>
<ol start="6">
<li>和分组函数一同查询的字段有限制</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),employee_id  <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="分组查询"><a class="markdownIt-Anchor" href="#分组查询"></a> 分组查询</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">    select 分组函数，列（要求出现在group by的后面）</span></span><br><span class="line"><span class="comment">    from 表</span></span><br><span class="line"><span class="comment">    【where 筛选条件】</span></span><br><span class="line"><span class="comment">    group by 分组的列表</span></span><br><span class="line"><span class="comment">    【order by 子句】;</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">    查询列表必须特殊，要求是分组函数和group by后出现的字段</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">    1、分组查询中的筛选条件分为两类</span></span><br><span class="line"><span class="comment">           数据源          位置                 关键字</span></span><br><span class="line"><span class="comment">分组前筛选  原始表		    group by子句的前面    where</span></span><br><span class="line"><span class="comment">分组后筛选	分组后的结果集   group by子句的后面    having</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">①分组函数做条件肯定是放在having子句中</span></span><br><span class="line"><span class="comment">②能用分组前筛选的，就优先考虑使用分组前筛选</span></span><br><span class="line"><span class="comment">2、group by子句支持单个字段分组，多个字段分组（多个字段之间用逗号隔开没有顺序要求），表达式或函数（用得较少）</span></span><br><span class="line"><span class="comment">3、也可以添加排序（排序放在整个分组查询的最后）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#引入：查询每个部门的平均工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line">#案例<span class="number">1</span>：查询每个工种的最高工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary),job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：查询每个位置上的部门个数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>),location_id</span><br><span class="line"><span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> location_id;</span><br><span class="line"></span><br><span class="line">#添加筛选条件</span><br><span class="line">#案例<span class="number">1</span>：查询邮箱中包含a字符的，每个部门的平均工资</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：查询有奖金的每个领导手下员工的最高工资</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary),manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id;</span><br><span class="line"></span><br><span class="line">#添加复杂的筛选条件</span><br><span class="line"></span><br><span class="line">#案例<span class="number">1</span>：查询哪个部门的员工个数<span class="operator">&gt;</span><span class="number">2</span></span><br><span class="line"></span><br><span class="line">#①查询每个部门的员工个数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line">#②根据①的结果进行筛选，查询哪个部门的员工个数<span class="operator">&gt;</span><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：查询每个工种有奖金的员工的最高工资<span class="operator">&gt;</span><span class="number">12000</span>的工种编号和最高工资</span><br><span class="line"></span><br><span class="line">#①查询每个工种有奖金的员工的最高工资</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary),job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br><span class="line">#②根据①结果继续筛选，最高工资<span class="operator">&gt;</span><span class="number">12000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary),job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary)<span class="operator">&gt;</span><span class="number">12000</span>;</span><br><span class="line"></span><br><span class="line">#案例<span class="number">3</span>：查询领导编号<span class="operator">&gt;</span><span class="number">102</span>的每个领导手下的最低工资大于<span class="number">5000</span>的领导编号是哪个，以及最低工资</span><br><span class="line"></span><br><span class="line">#①查询每个领导手下的员工固定最低工资</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary),manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id;</span><br><span class="line"></span><br><span class="line">#②添加筛选条件，编号<span class="operator">&gt;</span><span class="number">102</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary),manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id<span class="operator">&gt;</span><span class="number">102</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id;</span><br><span class="line"></span><br><span class="line">#③添加筛选条件，最低工资<span class="operator">&gt;</span><span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary),manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id<span class="operator">&gt;</span><span class="number">102</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary)<span class="operator">&gt;</span><span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">#按表达式查询</span><br><span class="line"></span><br><span class="line">#案例：按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数<span class="operator">&gt;</span><span class="number">5</span>的有哪些</span><br><span class="line"></span><br><span class="line">#①查询每个长度的员工个数</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>),LENGTH(last_name) len_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> LENGTH(last_name);</span><br><span class="line">#②添加筛选条件</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>),LENGTH(last_name) len_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> LENGTH(last_name)</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) c,LENGTH(last_name) len_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> len_name</span><br><span class="line"><span class="keyword">HAVING</span> c<span class="operator">&gt;</span><span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">#按多个字段分组</span><br><span class="line"></span><br><span class="line">#案例：查询每个部门每个工作的员工平均工资</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id,department_id;</span><br><span class="line">#<span class="number">4.</span>添加排序</span><br><span class="line"></span><br><span class="line">#案例：查询每个部门每个工种的员工的平均工资，并且按平均工资的高低显示</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id,department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary)<span class="operator">&gt;</span><span class="number">10000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(salary) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<h2 id="连接查询"><a class="markdownIt-Anchor" href="#连接查询"></a> 连接查询</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">笛卡尔乘积现象：表1 有m行，表2有n行，结果=m*n行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">发生原因：没有有效的连接条件</span></span><br><span class="line"><span class="comment">如何避免：添加有效的连接条件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	按年代分类：</span></span><br><span class="line"><span class="comment">	sql92标准:仅仅支持内连接</span></span><br><span class="line"><span class="comment">	sql99标准【推荐】：支持内连接+外连接（左外和右外）+交叉连接</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	按功能分类：</span></span><br><span class="line"><span class="comment">		内连接：</span></span><br><span class="line"><span class="comment">			等值连接</span></span><br><span class="line"><span class="comment">			非等值连接</span></span><br><span class="line"><span class="comment">			自连接</span></span><br><span class="line"><span class="comment">		外连接：</span></span><br><span class="line"><span class="comment">			左外连接</span></span><br><span class="line"><span class="comment">			右外连接</span></span><br><span class="line"><span class="comment">			全外连接</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		交叉连接</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> beauty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> boys;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> NAME,boyName <span class="keyword">FROM</span> beauty,boy</span><br><span class="line"><span class="keyword">WHERE</span> beauty.boyfriend_id<span class="operator">=</span> boys.id;</span><br><span class="line"></span><br><span class="line">#一、sql92标准</span><br><span class="line">#<span class="number">1</span>、等值连接</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">① 多表等值连接的结果为多表的交集部分</span></span><br><span class="line"><span class="comment">②n表连接，至少需要n-1个连接条件</span></span><br><span class="line"><span class="comment">③ 多表的顺序没有要求</span></span><br><span class="line"><span class="comment">④一般需要为表起别名</span></span><br><span class="line"><span class="comment">⑤可以搭配前面介绍的所有子句使用，比如排序、分组、筛选</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">1</span>：查询女神名和对应的男神名</span><br><span class="line"><span class="keyword">SELECT</span> NAME,boyName </span><br><span class="line"><span class="keyword">FROM</span> boys,beauty</span><br><span class="line"><span class="keyword">WHERE</span> beauty.boyfriend_id<span class="operator">=</span> boys.id;</span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：查询员工名和对应的部门名</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees,departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.`department_id`<span class="operator">=</span>departments.`department_id`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2</span>、为表起别名</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">①提高语句的简洁度</span></span><br><span class="line"><span class="comment">②区分多个重名的字段</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">#查询员工名、工种号、工种名</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,e.job_id,j.job_title</span><br><span class="line"><span class="keyword">FROM</span> employees  e,jobs j</span><br><span class="line"><span class="keyword">WHERE</span> e.`job_id`<span class="operator">=</span>j.`job_id`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">3</span>、两个表的顺序是否可以调换</span><br><span class="line"></span><br><span class="line">#查询员工名、工种号、工种名</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,e.job_id,j.job_title</span><br><span class="line"><span class="keyword">FROM</span> jobs j,employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.`job_id`<span class="operator">=</span>j.`job_id`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">4</span>、可以加筛选</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例：查询有奖金的员工名、部门名</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name,commission_pct</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> employees e,departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">AND</span> e.`commission_pct` <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：查询城市名中第二个字符为o的部门名和城市名</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> department_name,city</span><br><span class="line"><span class="keyword">FROM</span> departments d,locations l</span><br><span class="line"><span class="keyword">WHERE</span> d.`location_id` <span class="operator">=</span> l.`location_id`</span><br><span class="line"><span class="keyword">AND</span> city <span class="keyword">LIKE</span> <span class="string">&#x27;_o%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">5</span>、可以加分组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">1</span>：查询每个城市的部门个数</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) 个数,city</span><br><span class="line"><span class="keyword">FROM</span> departments d,locations l</span><br><span class="line"><span class="keyword">WHERE</span> d.`location_id`<span class="operator">=</span>l.`location_id`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资</span><br><span class="line"><span class="keyword">SELECT</span> department_name,d.`manager_id`,<span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> departments d,employees e</span><br><span class="line"><span class="keyword">WHERE</span> d.`department_id`<span class="operator">=</span>e.`department_id`</span><br><span class="line"><span class="keyword">AND</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_name,d.`manager_id`;</span><br><span class="line">#<span class="number">6</span>、可以加排序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例：查询每个工种的工种名和员工的个数，并且按员工个数降序</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> job_title,<span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees e,jobs j</span><br><span class="line"><span class="keyword">WHERE</span> e.`job_id`<span class="operator">=</span>j.`job_id`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_title</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">7</span>、可以实现三表连接</span><br><span class="line"></span><br><span class="line">#案例：查询员工名、部门名和所在的城市</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name,city</span><br><span class="line"><span class="keyword">FROM</span> employees e,departments d,locations l</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">AND</span> d.`location_id`<span class="operator">=</span>l.`location_id`</span><br><span class="line"><span class="keyword">AND</span> city <span class="keyword">LIKE</span> <span class="string">&#x27;s%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_name <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2</span>、非等值连接</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">1</span>：查询员工的工资和工资级别</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary,grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees e,job_grades g</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> g.`lowest_sal` <span class="keyword">AND</span> g.`highest_sal`</span><br><span class="line"><span class="keyword">AND</span> g.`grade_level`<span class="operator">=</span><span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">select salary,employee_id from employees;</span></span><br><span class="line"><span class="comment">select * from job_grades;</span></span><br><span class="line"><span class="comment">CREATE TABLE job_grades</span></span><br><span class="line"><span class="comment">(grade_level VARCHAR(3),</span></span><br><span class="line"><span class="comment"> lowest_sal  int,</span></span><br><span class="line"><span class="comment"> highest_sal int);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">INSERT INTO job_grades</span></span><br><span class="line"><span class="comment">VALUES (&#x27;A&#x27;, 1000, 2999);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">INSERT INTO job_grades</span></span><br><span class="line"><span class="comment">VALUES (&#x27;B&#x27;, 3000, 5999);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">INSERT INTO job_grades</span></span><br><span class="line"><span class="comment">VALUES(&#x27;C&#x27;, 6000, 9999);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">INSERT INTO job_grades</span></span><br><span class="line"><span class="comment">VALUES(&#x27;D&#x27;, 10000, 14999);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">INSERT INTO job_grades</span></span><br><span class="line"><span class="comment">VALUES(&#x27;E&#x27;, 15000, 24999);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">INSERT INTO job_grades</span></span><br><span class="line"><span class="comment">VALUES(&#x27;F&#x27;, 25000, 40000);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#<span class="number">3</span>、自连接</span><br><span class="line"></span><br><span class="line">#案例：查询 员工名和上级的名称</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,e.last_name,m.employee_id,m.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e,employees m</span><br><span class="line"><span class="keyword">WHERE</span> e.`manager_id`<span class="operator">=</span>m.`employee_id`;</span><br><span class="line"></span><br><span class="line">#二、sql99语法</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">	select 查询列表</span></span><br><span class="line"><span class="comment">	from 表1 别名 【连接类型】</span></span><br><span class="line"><span class="comment">	join 表2 别名 </span></span><br><span class="line"><span class="comment">	on 连接条件</span></span><br><span class="line"><span class="comment">	【where 筛选条件】</span></span><br><span class="line"><span class="comment">	【group by 分组】</span></span><br><span class="line"><span class="comment">	【having 筛选条件】</span></span><br><span class="line"><span class="comment">	【order by 排序列表】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">内连接（★）：inner</span></span><br><span class="line"><span class="comment">外连接</span></span><br><span class="line"><span class="comment">	左外(★):left 【outer】</span></span><br><span class="line"><span class="comment">	右外(★)：right 【outer】</span></span><br><span class="line"><span class="comment">	全外：full【outer】</span></span><br><span class="line"><span class="comment">交叉连接：cross</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#一）内连接</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">select 查询列表</span></span><br><span class="line"><span class="comment">from 表1 别名</span></span><br><span class="line"><span class="comment">inner join 表2 别名</span></span><br><span class="line"><span class="comment">on 连接条件;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">等值</span></span><br><span class="line"><span class="comment">非等值</span></span><br><span class="line"><span class="comment">自连接</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">①添加排序、分组、筛选</span></span><br><span class="line"><span class="comment">②inner可以省略</span></span><br><span class="line"><span class="comment">③ 筛选条件放在where后面，连接条件放在on后面，提高分离性，便于阅读</span></span><br><span class="line"><span class="comment">④inner join连接和sql92语法中的等值连接效果是一样的，都是查询多表的交集</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#<span class="number">1</span>、等值连接</span><br><span class="line">#案例<span class="number">1.</span>查询员工名、部门名</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`;</span><br><span class="line"></span><br><span class="line">#案例<span class="number">2.</span>查询名字中包含e的员工名和工种名（添加筛选）</span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_title</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs j</span><br><span class="line"><span class="keyword">ON</span> e.`job_id`<span class="operator">=</span>  j.`job_id`</span><br><span class="line"><span class="keyword">WHERE</span> e.`last_name` <span class="keyword">LIKE</span> <span class="string">&#x27;%e%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span> 查询部门个数<span class="operator">&gt;</span><span class="number">3</span>的城市名和部门个数，（添加分组<span class="operator">+</span>筛选）</span><br><span class="line"></span><br><span class="line">#①查询每个城市的部门个数</span><br><span class="line">#②在①结果上筛选满足条件的</span><br><span class="line"><span class="keyword">SELECT</span> city,<span class="built_in">COUNT</span>(<span class="operator">*</span>) 部门个数</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> locations l</span><br><span class="line"><span class="keyword">ON</span> d.`location_id`<span class="operator">=</span>l.`location_id`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">#案例<span class="number">4.</span>查询哪个部门的员工个数<span class="operator">&gt;</span><span class="number">3</span>的部门名和员工个数，并按个数降序（添加排序）</span><br><span class="line"></span><br><span class="line">#①查询每个部门的员工个数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>),department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_name</span><br><span class="line"></span><br><span class="line">#② 在①结果上筛选员工个数<span class="operator">&gt;</span><span class="number">3</span>的记录，并排序</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) 个数,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_name</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">5.</span>查询员工名、部门名、工种名，并按部门名降序（添加三表连接）</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name,job_title</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs j <span class="keyword">ON</span> e.`job_id` <span class="operator">=</span> j.`job_id`</span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_name <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line">#二）非等值连接</span><br><span class="line"></span><br><span class="line">#查询员工的工资级别</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary,grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"> <span class="keyword">JOIN</span> job_grades g</span><br><span class="line"> <span class="keyword">ON</span> e.`salary` <span class="keyword">BETWEEN</span> g.`lowest_sal` <span class="keyword">AND</span> g.`highest_sal`;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> #查询工资级别的个数<span class="operator">&gt;</span><span class="number">20</span>的个数，并且按工资级别降序</span><br><span class="line"> <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>),grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"> <span class="keyword">JOIN</span> job_grades g</span><br><span class="line"> <span class="keyword">ON</span> e.`salary` <span class="keyword">BETWEEN</span> g.`lowest_sal` <span class="keyword">AND</span> g.`highest_sal`</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> grade_level</span><br><span class="line"> <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">20</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> grade_level <span class="keyword">DESC</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> #三）自连接</span><br><span class="line"> </span><br><span class="line"> #查询员工的名字、上级的名字</span><br><span class="line"> <span class="keyword">SELECT</span> e.last_name,m.last_name</span><br><span class="line"> <span class="keyword">FROM</span> employees e</span><br><span class="line"> <span class="keyword">JOIN</span> employees m</span><br><span class="line"> <span class="keyword">ON</span> e.`manager_id`<span class="operator">=</span> m.`employee_id`;</span><br><span class="line"> </span><br><span class="line">  #查询姓名中包含字符k的员工的名字、上级的名字</span><br><span class="line"> <span class="keyword">SELECT</span> e.last_name,m.last_name</span><br><span class="line"> <span class="keyword">FROM</span> employees e</span><br><span class="line"> <span class="keyword">JOIN</span> employees m</span><br><span class="line"> <span class="keyword">ON</span> e.`manager_id`<span class="operator">=</span> m.`employee_id`</span><br><span class="line"> <span class="keyword">WHERE</span> e.`last_name` <span class="keyword">LIKE</span> <span class="string">&#x27;%k%&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> #二、外连接</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 应用场景：用于查询一个表中有，另一个表没有的记录</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 特点：</span></span><br><span class="line"><span class="comment"> 1、外连接的查询结果为主表中的所有记录</span></span><br><span class="line"><span class="comment">	如果从表中有和它匹配的，则显示匹配的值</span></span><br><span class="line"><span class="comment">	如果从表中没有和它匹配的，则显示null</span></span><br><span class="line"><span class="comment">	外连接查询结果=内连接结果+主表中有而从表没有的记录</span></span><br><span class="line"><span class="comment"> 2、左外连接，left join左边的是主表</span></span><br><span class="line"><span class="comment">    右外连接，right join右边的是主表</span></span><br><span class="line"><span class="comment"> 3、左外和右外交换两个表的顺序，可以实现同样的效果 </span></span><br><span class="line"><span class="comment"> 4、全外连接=内连接的结果+表1中有但表2没有的+表2中有但表1没有的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> #引入：查询男朋友 不在男神表的的女神名</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> beauty;</span><br><span class="line"> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> boys;</span><br><span class="line"> </span><br><span class="line"> #左外连接</span><br><span class="line"> <span class="keyword">SELECT</span> b.<span class="operator">*</span>,bo.<span class="operator">*</span></span><br><span class="line"> <span class="keyword">FROM</span> boys bo</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> beauty b</span><br><span class="line"> <span class="keyword">ON</span> b.`boyfriend_id` <span class="operator">=</span> bo.`id`</span><br><span class="line"> <span class="keyword">WHERE</span> b.`id` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"> #案例<span class="number">1</span>：查询哪个部门没有员工</span><br><span class="line"> #左外</span><br><span class="line"> <span class="keyword">SELECT</span> d.<span class="operator">*</span>,e.employee_id</span><br><span class="line"> <span class="keyword">FROM</span> departments d</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> employees e</span><br><span class="line"> <span class="keyword">ON</span> d.`department_id` <span class="operator">=</span> e.`department_id`</span><br><span class="line"> <span class="keyword">WHERE</span> e.`employee_id` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> #右外</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">SELECT</span> d.<span class="operator">*</span>,e.employee_id</span><br><span class="line"> <span class="keyword">FROM</span> employees e</span><br><span class="line"> <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"> <span class="keyword">ON</span> d.`department_id` <span class="operator">=</span> e.`department_id`</span><br><span class="line"> <span class="keyword">WHERE</span> e.`employee_id` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"> </span><br><span class="line"> #全外</span><br><span class="line"> </span><br><span class="line"> USE girls;</span><br><span class="line"> <span class="keyword">SELECT</span> b.<span class="operator">*</span>,bo.<span class="operator">*</span></span><br><span class="line"> <span class="keyword">FROM</span> beauty b</span><br><span class="line"> <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> boys bo</span><br><span class="line"> <span class="keyword">ON</span> b.`boyfriend_id` <span class="operator">=</span> bo.id;</span><br><span class="line"></span><br><span class="line"> #交叉连接</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">SELECT</span> b.<span class="operator">*</span>,bo.<span class="operator">*</span></span><br><span class="line"> <span class="keyword">FROM</span> beauty b</span><br><span class="line"> <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> boys bo;</span><br><span class="line"> </span><br><span class="line"> #sql92和 sql99pk</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 功能：sql99支持的较多</span></span><br><span class="line"><span class="comment"> 可读性：sql99实现连接条件和筛选条件的分离，可读性较高</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2 id="子查询"><a class="markdownIt-Anchor" href="#子查询"></a> 子查询</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">含义：</span></span><br><span class="line"><span class="comment">出现在其他语句中的select语句，称为子查询或内查询</span></span><br><span class="line"><span class="comment">内部嵌套其他select语句的查询，称为外查询或主查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">按子查询出现的位置：</span></span><br><span class="line"><span class="comment">	select后面：</span></span><br><span class="line"><span class="comment">		仅仅支持标量子查询</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	from后面：</span></span><br><span class="line"><span class="comment">		支持表子查询</span></span><br><span class="line"><span class="comment">	where或having后面：★</span></span><br><span class="line"><span class="comment">		标量子查询（单行） √</span></span><br><span class="line"><span class="comment">		列子查询  （多行） √</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		行子查询</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	exists后面（相关子查询）</span></span><br><span class="line"><span class="comment">		表子查询</span></span><br><span class="line"><span class="comment">按结果集的行列数不同：</span></span><br><span class="line"><span class="comment">	标量子查询（结果集只有一行一列）</span></span><br><span class="line"><span class="comment">	列子查询（结果集只有一列多行）</span></span><br><span class="line"><span class="comment">	行子查询（结果集有一行多列）</span></span><br><span class="line"><span class="comment">	表子查询（结果集一般为多行多列）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#一、<span class="keyword">where</span>或<span class="keyword">having</span>后面</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、标量子查询（单行子查询）</span></span><br><span class="line"><span class="comment">2、列子查询（多行子查询）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3、行子查询（多列多行）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">①子查询放在小括号内</span></span><br><span class="line"><span class="comment">②子查询一般放在条件的右侧</span></span><br><span class="line"><span class="comment">③标量子查询，一般搭配着单行操作符使用</span></span><br><span class="line"><span class="comment">&gt; &lt; &gt;= &lt;= = &lt;&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">列子查询，一般搭配着多行操作符使用</span></span><br><span class="line"><span class="comment">in、any/some、all</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">④子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">#<span class="number">1.</span>标量子查询★</span><br><span class="line"></span><br><span class="line">#案例<span class="number">1</span>：谁的工资比 Abel 高?</span><br><span class="line"></span><br><span class="line">#①查询Abel的工资</span><br><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line"></span><br><span class="line">#②查询员工的信息，满足 salary<span class="operator">&gt;</span>①结果</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&gt;</span>(</span><br><span class="line"></span><br><span class="line">	<span class="keyword">SELECT</span> salary</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：返回job_id与<span class="number">141</span>号员工相同，salary比<span class="number">143</span>号员工多的员工 姓名，job_id 和工资</span><br><span class="line"></span><br><span class="line">#①查询<span class="number">141</span>号员工的job_id</span><br><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">141</span></span><br><span class="line"></span><br><span class="line">#②查询<span class="number">143</span>号员工的salary</span><br><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">143</span></span><br><span class="line"></span><br><span class="line">#③查询员工的姓名，job_id 和工资，要求job_id<span class="operator">=</span>①并且salary<span class="operator">&gt;</span>②</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> job_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">141</span></span><br><span class="line">) <span class="keyword">AND</span> salary<span class="operator">&gt;</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> salary</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">143</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">3</span>：返回公司工资最少的员工的last_name,job_id和salary</span><br><span class="line"></span><br><span class="line">#①查询公司的 最低工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line">#②查询last_name,job_id和salary，要求salary<span class="operator">=</span>①</span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">=</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">4</span>：查询最低工资大于<span class="number">50</span>号部门最低工资的部门id和其最低工资</span><br><span class="line"></span><br><span class="line">#①查询<span class="number">50</span>号部门的最低工资</span><br><span class="line"><span class="keyword">SELECT</span>  <span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line">#②查询每个部门的最低工资</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"></span><br><span class="line">#③ 在②基础上筛选，满足<span class="built_in">min</span>(salary)<span class="operator">&gt;</span>①</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary)<span class="operator">&gt;</span>(</span><br><span class="line">	<span class="keyword">SELECT</span>  <span class="built_in">MIN</span>(salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#非法使用标量子查询</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary)<span class="operator">&gt;</span>(</span><br><span class="line">	<span class="keyword">SELECT</span>  salary</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">250</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>列子查询（多行子查询）★</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">IN/NOT IN</td>
<td style="text-align:center">等于列表中的任意一个</td>
</tr>
<tr>
<td style="text-align:center">ANY|SOME</td>
<td style="text-align:center">和子查询返回的某一个值比较</td>
</tr>
<tr>
<td style="text-align:center">ALL</td>
<td style="text-align:center">和子查询返回的所有值比较</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#案例<span class="number">1</span>：返回location_id是<span class="number">1400</span>或<span class="number">1700</span>的部门中的所有员工姓名</span><br><span class="line"></span><br><span class="line">#①查询location_id是<span class="number">1400</span>或<span class="number">1700</span>的部门编号</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">WHERE</span> location_id <span class="keyword">IN</span>(<span class="number">1400</span>,<span class="number">1700</span>)</span><br><span class="line"></span><br><span class="line">#②查询员工姓名，要求部门号是①列表中的某一个</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id  <span class="operator">&lt;&gt;</span><span class="keyword">ALL</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id</span><br><span class="line">	<span class="keyword">FROM</span> departments</span><br><span class="line">	<span class="keyword">WHERE</span> location_id <span class="keyword">IN</span>(<span class="number">1400</span>,<span class="number">1700</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：返回其它工种中比job_id为‘IT_PROG’工种任一工资低的员工的员工号、姓名、job_id 以及salary</span><br><span class="line"></span><br><span class="line">#①查询job_id为‘IT_PROG’部门任一工资</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"></span><br><span class="line">#②查询员工号、姓名、job_id 以及salary，salary<span class="operator">&lt;</span>(①)的任意一个</span><br><span class="line"><span class="keyword">SELECT</span> last_name,employee_id,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&lt;</span><span class="keyword">ANY</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"></span><br><span class="line">) <span class="keyword">AND</span> job_id<span class="operator">&lt;&gt;</span><span class="string">&#x27;IT_PROG&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#或</span><br><span class="line"><span class="keyword">SELECT</span> last_name,employee_id,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&lt;</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"></span><br><span class="line">) <span class="keyword">AND</span> job_id<span class="operator">&lt;&gt;</span><span class="string">&#x27;IT_PROG&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">3</span>：返回其它部门中比job_id为‘IT_PROG’部门所有工资都低的员工   的员工号、姓名、job_id 以及salary</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,employee_id,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&lt;</span><span class="keyword">ALL</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"></span><br><span class="line">) <span class="keyword">AND</span> job_id<span class="operator">&lt;&gt;</span><span class="string">&#x27;IT_PROG&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#或</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,employee_id,job_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&lt;</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">MIN</span>( salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"></span><br><span class="line">) <span class="keyword">AND</span> job_id<span class="operator">&lt;&gt;</span><span class="string">&#x27;IT_PROG&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">3</span>、行子查询（结果集一行多列或多行多列）</span><br><span class="line"></span><br><span class="line">#案例：查询员工编号最小并且工资最高的员工信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> (employee_id,salary)<span class="operator">=</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(employee_id),<span class="built_in">MAX</span>(salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#①查询最小的员工编号</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(employee_id)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#②查询最高工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#③查询员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id<span class="operator">=</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(employee_id)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">)<span class="keyword">AND</span> salary<span class="operator">=</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#二、<span class="keyword">select</span>后面</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">仅仅支持标量子查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#案例：查询每个部门的员工个数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> d.<span class="operator">*</span>,(</span><br><span class="line"></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">	<span class="keyword">FROM</span> employees e</span><br><span class="line">	<span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.`department_id`</span><br><span class="line"> ) 个数</span><br><span class="line"> <span class="keyword">FROM</span> departments d;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> #案例<span class="number">2</span>：查询员工号<span class="operator">=</span><span class="number">102</span>的部门名</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> department_name,e.department_id</span><br><span class="line">	<span class="keyword">FROM</span> departments d</span><br><span class="line">	<span class="keyword">INNER</span> <span class="keyword">JOIN</span> employees e</span><br><span class="line">	<span class="keyword">ON</span> d.department_id<span class="operator">=</span>e.department_id</span><br><span class="line">	<span class="keyword">WHERE</span> e.employee_id<span class="operator">=</span><span class="number">102</span></span><br><span class="line">	</span><br><span class="line">) 部门名;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#三、<span class="keyword">from</span>后面</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将子查询结果充当一张表，要求必须起别名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#案例：查询每个部门的平均工资的工资等级</span><br><span class="line">#①查询每个部门的平均工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> job_grades;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#②连接①的结果集和job_grades表，筛选条件平均工资 <span class="keyword">between</span> lowest_sal <span class="keyword">and</span> highest_sal</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span>  ag_dep.<span class="operator">*</span>,g.`grade_level`</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) ag,department_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">) ag_dep</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> job_grades g</span><br><span class="line"><span class="keyword">ON</span> ag_dep.ag <span class="keyword">BETWEEN</span> lowest_sal <span class="keyword">AND</span> highest_sal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#四、<span class="keyword">exists</span>后面（相关子查询）</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">exists(完整的查询语句)</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">1或0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> employee_id <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary<span class="operator">=</span><span class="number">300000</span>);</span><br><span class="line"></span><br><span class="line">#案例<span class="number">1</span>：查询有员工的部门名</span><br><span class="line"></span><br><span class="line">#<span class="keyword">in</span></span><br><span class="line"><span class="keyword">SELECT</span> department_name</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">WHERE</span> d.`department_id` <span class="keyword">IN</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> department_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#<span class="keyword">exists</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> department_name</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">	<span class="keyword">FROM</span> employees e</span><br><span class="line">	<span class="keyword">WHERE</span> d.`department_id`<span class="operator">=</span>e.`department_id`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：查询没有女朋友的男神信息</span><br><span class="line"></span><br><span class="line">#<span class="keyword">in</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> boys bo</span><br><span class="line"><span class="keyword">WHERE</span> bo.id <span class="keyword">NOT</span> <span class="keyword">IN</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> boyfriend_id</span><br><span class="line">	<span class="keyword">FROM</span> beauty</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#<span class="keyword">exists</span></span><br><span class="line"><span class="keyword">SELECT</span> bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> boys bo</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> boyfriend_id</span><br><span class="line">	<span class="keyword">FROM</span> beauty b</span><br><span class="line">	<span class="keyword">WHERE</span> bo.`id`<span class="operator">=</span>b.`boyfriend_id`</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 子查询经典案例</span><br><span class="line"></span><br><span class="line"># <span class="number">1.</span> 查询工资最低的员工信息: last_name, salary</span><br><span class="line"></span><br><span class="line">#①查询最低的工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line">#②查询last_name,salary，要求salary<span class="operator">=</span>①</span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">=</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span> 查询平均工资最低的部门信息</span><br><span class="line"></span><br><span class="line">#方式一：</span><br><span class="line">#①各部门的平均工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">#②查询①结果上的最低平均工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(ag)</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) ag,department_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">) ag_dep</span><br><span class="line"></span><br><span class="line">#③查询哪个部门的平均工资<span class="operator">=</span>②</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary)<span class="operator">=</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(ag)</span><br><span class="line">	<span class="keyword">FROM</span> (</span><br><span class="line">		<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) ag,department_id</span><br><span class="line">		<span class="keyword">FROM</span> employees</span><br><span class="line">		<span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">	) ag_dep</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#④查询部门信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> d.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">WHERE</span> d.`department_id`<span class="operator">=</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> department_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">	<span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary)<span class="operator">=</span>(</span><br><span class="line">		<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(ag)</span><br><span class="line">		<span class="keyword">FROM</span> (</span><br><span class="line">			<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) ag,department_id</span><br><span class="line">			<span class="keyword">FROM</span> employees</span><br><span class="line">			<span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">		) ag_dep</span><br><span class="line"></span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#方式二：</span><br><span class="line">#①各部门的平均工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"></span><br><span class="line">#②求出最低平均工资的部门编号</span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(salary) </span><br><span class="line">LIMIT <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#③查询部门信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">WHERE</span> department_id<span class="operator">=</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> department_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(salary) </span><br><span class="line">	LIMIT <span class="number">1</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span> 查询平均工资最低的部门信息和该部门的平均工资</span><br><span class="line">#①各部门的平均工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">#②求出最低平均工资的部门编号</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(salary) </span><br><span class="line">LIMIT <span class="number">1</span>;</span><br><span class="line">#③查询部门信息</span><br><span class="line"><span class="keyword">SELECT</span> d.<span class="operator">*</span>,ag</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">JOIN</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) ag,department_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(salary) </span><br><span class="line">	LIMIT <span class="number">1</span></span><br><span class="line"></span><br><span class="line">) ag_dep</span><br><span class="line"><span class="keyword">ON</span> d.`department_id`<span class="operator">=</span>ag_dep.department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">4.</span> 查询平均工资最高的 job 信息</span><br><span class="line">#①查询最高的job的平均工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(salary) <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">1</span></span><br><span class="line"></span><br><span class="line">#②查询job信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id<span class="operator">=</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> job_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(salary) <span class="keyword">DESC</span></span><br><span class="line">	LIMIT <span class="number">1</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"># <span class="number">5.</span> 查询平均工资高于公司平均工资的部门有哪些?</span><br><span class="line"></span><br><span class="line">#①查询平均工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line">#②查询每个部门的平均工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"></span><br><span class="line">#③筛选②结果集，满足平均工资<span class="operator">&gt;</span>①</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary)<span class="operator">&gt;</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># <span class="number">6.</span> 查询出公司中所有 manager 的详细信息.</span><br><span class="line">#①查询所有manager的员工编号</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line">#②查询详细信息，满足employee_id<span class="operator">=</span>①</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span><span class="keyword">ANY</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> manager_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># <span class="number">7.</span> 各个部门中 最高工资中最低的那个部门的 最低工资是多少</span><br><span class="line"></span><br><span class="line">#①查询各部门的最高工资中最低的部门编号</span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">MAX</span>(salary)</span><br><span class="line">LIMIT <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#②查询①结果的那个部门的最低工资</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) ,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id<span class="operator">=</span>(</span><br><span class="line">	<span class="keyword">SELECT</span> department_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">MAX</span>(salary)</span><br><span class="line">	LIMIT <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"># <span class="number">8.</span> 查询平均工资最高的部门的 manager 的详细信息: last_name, department_id, email, salary</span><br><span class="line">#①查询平均工资最高的部门编号</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    department_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(salary) <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">#②将employees和departments连接查询，筛选条件是①</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        last_name, d.department_id, email, salary </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        employees e </span><br><span class="line">        <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line">            <span class="keyword">ON</span> d.manager_id <span class="operator">=</span> e.employee_id </span><br><span class="line">    <span class="keyword">WHERE</span> d.department_id <span class="operator">=</span> </span><br><span class="line">        (<span class="keyword">SELECT</span> </span><br><span class="line">            department_id </span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            employees </span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id </span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(salary) <span class="keyword">DESC</span> </span><br><span class="line">        LIMIT <span class="number">1</span>) ;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="分页查询"><a class="markdownIt-Anchor" href="#分页查询"></a> 分页查询</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#进阶<span class="number">8</span>：分页查询 ★</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">应用场景：当要显示的数据，一页显示不全，需要分页提交sql请求</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">	select 查询列表</span></span><br><span class="line"><span class="comment">	from 表</span></span><br><span class="line"><span class="comment">	【join type join 表2</span></span><br><span class="line"><span class="comment">	on 连接条件</span></span><br><span class="line"><span class="comment">	where 筛选条件</span></span><br><span class="line"><span class="comment">	group by 分组字段</span></span><br><span class="line"><span class="comment">	having 分组后的筛选</span></span><br><span class="line"><span class="comment">	order by 排序的字段】</span></span><br><span class="line"><span class="comment">	limit 【offset,】size;</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	offset要显示条目的起始索引（起始索引从0开始）</span></span><br><span class="line"><span class="comment">	size 要显示的条目个数</span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">	①limit语句放在查询语句的最后</span></span><br><span class="line"><span class="comment">	②公式</span></span><br><span class="line"><span class="comment">	要显示的页数 page，每页的条目数size</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	select 查询列表</span></span><br><span class="line"><span class="comment">	from 表</span></span><br><span class="line"><span class="comment">	limit (page-1)*size,size;</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	size=10</span></span><br><span class="line"><span class="comment">	page  </span></span><br><span class="line"><span class="comment">	1	0</span></span><br><span class="line"><span class="comment">	2  	10</span></span><br><span class="line"><span class="comment">	3	20</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">#案例<span class="number">1</span>：查询前五条员工信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span>  employees LIMIT <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span>  employees LIMIT <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：查询第<span class="number">11</span>条——第<span class="number">25</span>条</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span>  employees LIMIT <span class="number">10</span>,<span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">3</span>：有奖金的员工信息，并且工资较高的前<span class="number">10</span>名显示出来</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">10</span> ;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="联合查询"><a class="markdownIt-Anchor" href="#联合查询"></a> 联合查询</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#进阶<span class="number">9</span>：联合查询</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">union 联合 合并：将多条查询语句的结果合并成一个结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">查询语句1</span></span><br><span class="line"><span class="comment">union</span></span><br><span class="line"><span class="comment">查询语句2</span></span><br><span class="line"><span class="comment">union</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">应用场景：</span></span><br><span class="line"><span class="comment">要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：★</span></span><br><span class="line"><span class="comment">1、要求多条查询语句的查询列数是一致的！</span></span><br><span class="line"><span class="comment">2、要求多条查询语句的查询的每一列的类型和顺序最好一致</span></span><br><span class="line"><span class="comment">3、union关键字默认去重，如果使用union all 可以包含重复项</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#引入的案例：查询部门编号<span class="operator">&gt;</span><span class="number">90</span>或邮箱包含a的员工信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span> <span class="keyword">OR</span> department_id<span class="operator">&gt;</span><span class="number">90</span>;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees  <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees  <span class="keyword">WHERE</span> department_id<span class="operator">&gt;</span><span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例：查询中国用户中男性的信息以及外国用户中年男性的用户信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> id,cname <span class="keyword">FROM</span> t_ca <span class="keyword">WHERE</span> csex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> t_id,tname <span class="keyword">FROM</span> t_ua <span class="keyword">WHERE</span> tGender<span class="operator">=</span><span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="dml语言"><a class="markdownIt-Anchor" href="#dml语言"></a> DML语言</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#DML语言</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据操作语言：</span></span><br><span class="line"><span class="comment">插入：insert</span></span><br><span class="line"><span class="comment">修改：update</span></span><br><span class="line"><span class="comment">删除：delete</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#一、插入语句</span><br><span class="line">#方式一：经典的插入</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">insert into 表名(列名,...) values(值1,...);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> beauty;</span><br><span class="line">#<span class="number">1.</span>插入的值的类型要与列的类型一致或兼容</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">13</span>,<span class="string">&#x27;唐艺昕&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;1990-4-23&#x27;</span>,<span class="string">&#x27;1898888888&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">由girls<span class="operator">-</span><span class="operator">&gt;</span>表<span class="operator">-</span><span class="operator">&gt;</span>beauty<span class="operator">-</span><span class="operator">&gt;</span>改变表 可知id、name、phone不可为<span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>不可以为<span class="keyword">null</span>的列必须插入值。可以为<span class="keyword">null</span>的列如何插入值？</span><br><span class="line">#方式一：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">13</span>,<span class="string">&#x27;唐艺昕&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;1990-4-23&#x27;</span>,<span class="string">&#x27;1898888888&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">#方式二：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> beauty(id,NAME,sex,borndate,phone,boyfriend_id)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">14</span>,<span class="string">&#x27;金星&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;1990-4-23&#x27;</span>,<span class="string">&#x27;1388888888&#x27;</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> beauty(id,NAME,sex,phone)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">15</span>,<span class="string">&#x27;娜扎&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;1388888888&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>列的顺序是否可以调换</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> beauty(NAME,sex,id,phone)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;蒋欣&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">16</span>,<span class="string">&#x27;110&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>列数和值的个数必须一致</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> beauty(NAME,sex,id,phone)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;关晓彤&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">17</span>,<span class="string">&#x27;110&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#<span class="number">5.</span>可以省略列名，默认所有列，而且列的顺序和表中列的顺序一致</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> beauty</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">18</span>,<span class="string">&#x27;张飞&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;119&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line">#方式二：</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">insert into 表名</span></span><br><span class="line"><span class="comment">set 列名=值,列名=值,...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> beauty</span><br><span class="line"><span class="keyword">SET</span> id<span class="operator">=</span><span class="number">19</span>,NAME<span class="operator">=</span><span class="string">&#x27;刘涛&#x27;</span>,phone<span class="operator">=</span><span class="string">&#x27;999&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#两种方式大pk ★</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">1</span>、方式一支持插入多行,方式二不支持</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> beauty</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">23</span>,<span class="string">&#x27;唐艺昕1&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;1990-4-23&#x27;</span>,<span class="string">&#x27;1898888888&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">2</span>)</span><br><span class="line">,(<span class="number">24</span>,<span class="string">&#x27;唐艺昕2&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;1990-4-23&#x27;</span>,<span class="string">&#x27;1898888888&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">2</span>)</span><br><span class="line">,(<span class="number">25</span>,<span class="string">&#x27;唐艺昕3&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;1990-4-23&#x27;</span>,<span class="string">&#x27;1898888888&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">#<span class="number">2</span>、方式一支持子查询，方式二不支持</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> beauty(id,NAME,phone)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">26</span>,<span class="string">&#x27;宋茜&#x27;</span>,<span class="string">&#x27;11809866&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> beauty(id,NAME,phone)</span><br><span class="line"><span class="keyword">SELECT</span> id,boyname,<span class="string">&#x27;1234567&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> boys <span class="keyword">WHERE</span> id<span class="operator">&lt;</span><span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">#二、修改语句</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.修改单表的记录★</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">update 表名</span></span><br><span class="line"><span class="comment">set 列=新值,列=新值,...</span></span><br><span class="line"><span class="comment">where 筛选条件;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.修改多表的记录【补充】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">sql92语法：</span></span><br><span class="line"><span class="comment">update 表1 别名,表2 别名</span></span><br><span class="line"><span class="comment">set 列=值,...</span></span><br><span class="line"><span class="comment">where 连接条件</span></span><br><span class="line"><span class="comment">and 筛选条件;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sql99语法：</span></span><br><span class="line"><span class="comment">update 表1 别名</span></span><br><span class="line"><span class="comment">inner|left|right join 表2 别名</span></span><br><span class="line"><span class="comment">on 连接条件</span></span><br><span class="line"><span class="comment">set 列=值,...</span></span><br><span class="line"><span class="comment">where 筛选条件;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">1.</span>修改单表的记录</span><br><span class="line">#案例<span class="number">1</span>：修改beauty表中姓唐的女神的电话为<span class="number">13899888899</span></span><br><span class="line"></span><br><span class="line">UPDATE beauty <span class="keyword">SET</span> phone <span class="operator">=</span> <span class="string">&#x27;13899888899&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;唐%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：修改boys表中id好为<span class="number">2</span>的名称为张飞，魅力值 <span class="number">10</span></span><br><span class="line">UPDATE boys <span class="keyword">SET</span> boyname<span class="operator">=</span><span class="string">&#x27;张飞&#x27;</span>,usercp<span class="operator">=</span><span class="number">10</span></span><br><span class="line"><span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>修改多表的记录</span><br><span class="line"></span><br><span class="line">#案例 <span class="number">1</span>：修改张无忌的女朋友的手机号为<span class="number">114</span></span><br><span class="line"></span><br><span class="line">UPDATE boys bo</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> beauty b <span class="keyword">ON</span> bo.`id`<span class="operator">=</span>b.`boyfriend_id`</span><br><span class="line"><span class="keyword">SET</span> b.`phone`<span class="operator">=</span><span class="string">&#x27;119&#x27;</span>,bo.`userCP`<span class="operator">=</span><span class="number">1000</span></span><br><span class="line"><span class="keyword">WHERE</span> bo.`boyName`<span class="operator">=</span><span class="string">&#x27;张无忌&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：修改没有男朋友的女神的男朋友编号都为<span class="number">2</span>号</span><br><span class="line"></span><br><span class="line">UPDATE boys bo</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> beauty b <span class="keyword">ON</span> bo.`id`<span class="operator">=</span>b.`boyfriend_id`</span><br><span class="line"><span class="keyword">SET</span> b.`boyfriend_id`<span class="operator">=</span><span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> bo.`id` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> boys;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#三、删除语句</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">方式一：delete</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1、单表的删除【★】</span></span><br><span class="line"><span class="comment">delete from 表名 where 筛选条件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、多表的删除【补充】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sql92语法：</span></span><br><span class="line"><span class="comment">delete 表1的别名,表2的别名</span></span><br><span class="line"><span class="comment">from 表1 别名,表2 别名</span></span><br><span class="line"><span class="comment">where 连接条件</span></span><br><span class="line"><span class="comment">and 筛选条件;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sql99语法：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">delete 表1的别名,表2的别名</span></span><br><span class="line"><span class="comment">from 表1 别名</span></span><br><span class="line"><span class="comment">inner|left|right join 表2 别名 on 连接条件</span></span><br><span class="line"><span class="comment">where 筛选条件;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">方式二：truncate</span></span><br><span class="line"><span class="comment">语法：truncate table 表名;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#方式一：<span class="keyword">delete</span></span><br><span class="line">#<span class="number">1.</span>单表的删除</span><br><span class="line">#案例：删除手机号以<span class="number">9</span>结尾的女神信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> beauty <span class="keyword">WHERE</span> phone <span class="keyword">LIKE</span> <span class="string">&#x27;%9&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> beauty;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>多表的删除</span><br><span class="line"></span><br><span class="line">#案例：删除张无忌的女朋友的信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> b</span><br><span class="line"><span class="keyword">FROM</span> beauty b</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> boys bo <span class="keyword">ON</span> b.`boyfriend_id` <span class="operator">=</span> bo.`id`</span><br><span class="line"><span class="keyword">WHERE</span> bo.`boyName`<span class="operator">=</span><span class="string">&#x27;张无忌&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例：删除黄晓明的信息以及他女朋友的信息</span><br><span class="line"><span class="keyword">DELETE</span> b,bo</span><br><span class="line"><span class="keyword">FROM</span> beauty b</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> boys bo <span class="keyword">ON</span> b.`boyfriend_id`<span class="operator">=</span>bo.`id`</span><br><span class="line"><span class="keyword">WHERE</span> bo.`boyName`<span class="operator">=</span><span class="string">&#x27;黄晓明&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方式二：<span class="keyword">truncate</span>语句</span><br><span class="line"></span><br><span class="line">#案例：将魅力值<span class="operator">&gt;</span><span class="number">100</span>的男神信息删除</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> boys;(清空)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="keyword">delete</span> pk <span class="keyword">truncate</span>【面试题★】</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.delete 可以加where 条件，truncate不能加</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.truncate删除，效率高一丢丢</span></span><br><span class="line"><span class="comment">3.假如要删除的表中有自增长列，</span></span><br><span class="line"><span class="comment">如果用delete删除后，再插入数据，自增长列的值从断点开始，</span></span><br><span class="line"><span class="comment">而truncate删除后，再插入数据，自增长列的值从1开始。</span></span><br><span class="line"><span class="comment">4.truncate删除没有返回值，delete删除有返回值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5.truncate删除不能回滚，delete删除可以回滚.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> boys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> boys;</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> boys;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> boys (boyname,usercp)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;张飞&#x27;</span>,<span class="number">100</span>),(<span class="string">&#x27;刘备&#x27;</span>,<span class="number">100</span>),(<span class="string">&#x27;关云长&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="ddl语言"><a class="markdownIt-Anchor" href="#ddl语言"></a> DDL语言</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#DDL</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数据定义语言</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">库和表的管理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">一、库的管理</span></span><br><span class="line"><span class="comment">创建、修改、删除</span></span><br><span class="line"><span class="comment">二、表的管理</span></span><br><span class="line"><span class="comment">创建、修改、删除</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">创建： create</span></span><br><span class="line"><span class="comment">修改： alter</span></span><br><span class="line"><span class="comment">删除： drop</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#一、库的管理</span><br><span class="line">#<span class="number">1</span>、库的创建</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">create database  [if not exists]库名;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例：创建库Books</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> books ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2</span>、库的修改</span><br><span class="line"></span><br><span class="line">RENAME DATABASE books <span class="keyword">TO</span> 新库名;</span><br><span class="line"></span><br><span class="line">#更改库的字符集</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE books <span class="type">CHARACTER</span> <span class="keyword">SET</span> gbk;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">3</span>、库的删除</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> books;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#二、表的管理</span><br><span class="line">#<span class="number">1.</span>表的创建 ★</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">create table 表名(</span></span><br><span class="line"><span class="comment">	列名 列的类型【(长度) 约束】,</span></span><br><span class="line"><span class="comment">	列名 列的类型【(长度) 约束】,</span></span><br><span class="line"><span class="comment">	列名 列的类型【(长度) 约束】,</span></span><br><span class="line"><span class="comment">	...</span></span><br><span class="line"><span class="comment">	列名 列的类型【(长度) 约束】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">#案例：创建表Book</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book(</span><br><span class="line">	id <span class="type">INT</span>,#编号</span><br><span class="line">	bName <span class="type">VARCHAR</span>(<span class="number">20</span>),#图书名</span><br><span class="line">	price <span class="keyword">DOUBLE</span>,#价格</span><br><span class="line">	authorId  <span class="type">INT</span>,#作者编号</span><br><span class="line">	publishDate DATETIME#出版日期</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> book;</span><br><span class="line"></span><br><span class="line">#案例：创建表author</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> author(</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	au_name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	nation <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"><span class="keyword">DESC</span> author;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>表的修改</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法</span></span><br><span class="line"><span class="comment">alter table 表名 add|drop|modify|change column 列名 【列类型 约束】;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#①修改列名</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book CHANGE <span class="keyword">COLUMN</span> publishdate pubDate DATETIME;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#②修改列的类型或约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book MODIFY <span class="keyword">COLUMN</span> pubdate <span class="type">TIMESTAMP</span>;</span><br><span class="line"></span><br><span class="line">#③添加新列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> author <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> annual <span class="keyword">DOUBLE</span>; </span><br><span class="line"></span><br><span class="line">#④删除列</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book_author <span class="keyword">DROP</span> <span class="keyword">COLUMN</span>  annual;</span><br><span class="line">#⑤修改表名</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> author RENAME <span class="keyword">TO</span> book_author;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> book;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>表的删除</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> book_author;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#通用的写法：</span><br><span class="line"># 建库</span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> 旧库名;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE 新库名;</span><br><span class="line"></span><br><span class="line"># 建表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> 旧表名;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  表名();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>表的复制</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> author <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;村上春树&#x27;</span>,<span class="string">&#x27;日本&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;莫言&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;冯唐&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;金庸&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Author;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">copy</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> copy2;</span><br><span class="line">#<span class="number">1.</span>仅仅复制表的结构</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">copy</span> <span class="keyword">LIKE</span> author;</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>复制表的结构<span class="operator">+</span>数据</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy2 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> author;</span><br><span class="line"></span><br><span class="line">#只复制部分数据</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy3</span><br><span class="line"><span class="keyword">SELECT</span> id,au_name</span><br><span class="line"><span class="keyword">FROM</span> author </span><br><span class="line"><span class="keyword">WHERE</span> nation<span class="operator">=</span><span class="string">&#x27;中国&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#仅仅复制某些字段</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy4 </span><br><span class="line"><span class="keyword">SELECT</span> id,au_name</span><br><span class="line"><span class="keyword">FROM</span> author</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">0</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#常见的数据类型</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数值型：</span></span><br><span class="line"><span class="comment">	整型</span></span><br><span class="line"><span class="comment">	小数：</span></span><br><span class="line"><span class="comment">		定点数</span></span><br><span class="line"><span class="comment">		浮点数</span></span><br><span class="line"><span class="comment">字符型：</span></span><br><span class="line"><span class="comment">	较短的文本：char、varchar</span></span><br><span class="line"><span class="comment">	较长的文本：text、blob（较长的二进制数据）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">日期型：</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#一、整型</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">tinyint、smallint、mediumint、int/integer、bigint</span></span><br><span class="line"><span class="comment">1	 2		3	4		8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">① 如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，需要添加unsigned关键字</span></span><br><span class="line"><span class="comment">② 如果插入的数值超出了整型的范围,会报out of range异常，并且插入临界值</span></span><br><span class="line"><span class="comment">③ 如果不设置长度，会有默认的长度</span></span><br><span class="line"><span class="comment">长度代表了显示的最大宽度，如果不够会用0在左边填充，但必须搭配zerofill使用！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#<span class="number">1.</span>如何设置无符号和有符号</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tab_int;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_int(</span><br><span class="line">	t1 <span class="type">INT</span>(<span class="number">7</span>) ZEROFILL,</span><br><span class="line">	t2 <span class="type">INT</span>(<span class="number">7</span>) ZEROFILL </span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> tab_int;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_int <span class="keyword">VALUES</span>(<span class="number">-123456</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_int <span class="keyword">VALUES</span>(<span class="number">-123456</span>,<span class="number">-123456</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_int <span class="keyword">VALUES</span>(<span class="number">2147483648</span>,<span class="number">4294967296</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_int <span class="keyword">VALUES</span>(<span class="number">123</span>,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tab_int;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#二、小数</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">1.浮点型</span></span><br><span class="line"><span class="comment">float(M,D)</span></span><br><span class="line"><span class="comment">double(M,D)</span></span><br><span class="line"><span class="comment">2.定点型</span></span><br><span class="line"><span class="comment">dec(M,D)</span></span><br><span class="line"><span class="comment">decimal(M,D)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">①</span></span><br><span class="line"><span class="comment">M：整数部位+小数部位</span></span><br><span class="line"><span class="comment">D：小数部位</span></span><br><span class="line"><span class="comment">如果超过范围，则插入临界值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">②</span></span><br><span class="line"><span class="comment">M和D都可以省略</span></span><br><span class="line"><span class="comment">如果是decimal，则M默认为10，D默认为0</span></span><br><span class="line"><span class="comment">如果是float和double，则会根据插入的数值的精度来决定精度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">③定点型的精确度较高，如果要求插入数值的精度较高如货币运算等则考虑使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">#测试M和D</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> tab_float;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_float(</span><br><span class="line">	f1 <span class="type">FLOAT</span>,</span><br><span class="line">	f2 <span class="keyword">DOUBLE</span>,</span><br><span class="line">	f3 <span class="type">DECIMAL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tab_float;</span><br><span class="line"><span class="keyword">DESC</span> tab_float;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_float <span class="keyword">VALUES</span>(<span class="number">123.4523</span>,<span class="number">123.4523</span>,<span class="number">123.4523</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_float <span class="keyword">VALUES</span>(<span class="number">123.456</span>,<span class="number">123.456</span>,<span class="number">123.456</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_float <span class="keyword">VALUES</span>(<span class="number">123.4</span>,<span class="number">123.4</span>,<span class="number">123.4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_float <span class="keyword">VALUES</span>(<span class="number">1523.4</span>,<span class="number">1523.4</span>,<span class="number">1523.4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#原则：</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">所选择的类型越简单越好，能保存数值的类型越小越好</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#三、字符型;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">较短的文本：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">char</span></span><br><span class="line"><span class="comment">varchar</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">其他：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">binary和varbinary用于保存较短的二进制</span></span><br><span class="line"><span class="comment">enum用于保存枚举</span></span><br><span class="line"><span class="comment">set用于保存集合</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">较长的文本：</span></span><br><span class="line"><span class="comment">text</span></span><br><span class="line"><span class="comment">blob(较大的二进制)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	写法		M的意思					特点			空间的耗费	效率</span></span><br><span class="line"><span class="comment">char	char(M)		最大的字符数，可以省略，默认为1		固定长度的字符		比较耗费	高</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">varchar varchar(M)	最大的字符数，不可以省略		可变长度的字符		比较节省	低</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_char(</span><br><span class="line">	c1 ENUM(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">&#x27;m&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tab_set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_set(</span><br><span class="line"></span><br><span class="line">	s1 <span class="keyword">SET</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_set <span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_set <span class="keyword">VALUES</span>(<span class="string">&#x27;A,B&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_set <span class="keyword">VALUES</span>(<span class="string">&#x27;a,c,d&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#四、日期型</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">date只保存日期</span></span><br><span class="line"><span class="comment">time 只保存时间</span></span><br><span class="line"><span class="comment">year只保存年</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">datetime保存日期+时间</span></span><br><span class="line"><span class="comment">timestamp保存日期+时间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		字节		范围		时区等的影响</span></span><br><span class="line"><span class="comment">datetime	               8		1000——9999	                  不受</span></span><br><span class="line"><span class="comment">timestamp	4	               1970-2038	                    受</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_date(</span><br><span class="line">	t1 DATETIME,</span><br><span class="line">	t2 <span class="type">TIMESTAMP</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_date <span class="keyword">VALUES</span>(NOW(),NOW());</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tab_date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;time_zone&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> time_zone<span class="operator">=</span><span class="string">&#x27;+9:00&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="常见约束"><a class="markdownIt-Anchor" href="#常见约束"></a> 常见约束</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#常见约束</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">含义：一种限制，用于限制表中的数据，为了保证表中的数据的准确和可靠性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：六大约束</span></span><br><span class="line"><span class="comment">	NOT NULL：非空，用于保证该字段的值不能为空</span></span><br><span class="line"><span class="comment">	比如姓名、学号等</span></span><br><span class="line"><span class="comment">	DEFAULT:默认，用于保证该字段有默认值</span></span><br><span class="line"><span class="comment">	比如性别</span></span><br><span class="line"><span class="comment">	PRIMARY KEY:主键，用于保证该字段的值具有唯一性，并且非空</span></span><br><span class="line"><span class="comment">	比如学号、员工编号等</span></span><br><span class="line"><span class="comment">	UNIQUE:唯一，用于保证该字段的值具有唯一性，可以为空</span></span><br><span class="line"><span class="comment">	比如座位号</span></span><br><span class="line"><span class="comment">	CHECK:检查约束【mysql中不支持】</span></span><br><span class="line"><span class="comment">	比如年龄、性别</span></span><br><span class="line"><span class="comment">	FOREIGN KEY:外键，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值</span></span><br><span class="line"><span class="comment">		在从表添加外键约束，用于引用主表中某列的值</span></span><br><span class="line"><span class="comment">	比如学生表的专业编号，员工表的部门编号，员工表的工种编号</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">添加约束的时机：</span></span><br><span class="line"><span class="comment">	1.创建表时</span></span><br><span class="line"><span class="comment">	2.修改表时</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">约束的添加分类：</span></span><br><span class="line"><span class="comment">	列级约束：</span></span><br><span class="line"><span class="comment">		六大约束语法上都支持，但外键约束没有效果</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	表级约束：</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		除了非空、默认，其他的都支持</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">主键和唯一的大对比：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		保证唯一性  是否允许为空    一个表中可以有多少个   是否允许组合</span></span><br><span class="line"><span class="comment">	主键	√		×		至多有1个           √，但不推荐</span></span><br><span class="line"><span class="comment">	唯一	√		√		可以有多个          √，但不推荐</span></span><br><span class="line"><span class="comment">外键：</span></span><br><span class="line"><span class="comment">	1、要求在从表设置外键关系</span></span><br><span class="line"><span class="comment">	2、从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求</span></span><br><span class="line"><span class="comment">	3、主表的关联列必须是一个key（一般是主键或唯一）</span></span><br><span class="line"><span class="comment">	4、插入数据时，先插入主表，再插入从表</span></span><br><span class="line"><span class="comment">	删除数据时，先删除从表，再删除主表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">	字段名 字段类型 列级约束,</span><br><span class="line">	字段名 字段类型,</span><br><span class="line">	表级约束</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE students;</span><br><span class="line">#一、创建表时添加约束</span><br><span class="line"></span><br><span class="line">#<span class="number">1.</span>添加列级约束</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">直接在字段名和类型后面追加 约束类型即可。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">只支持：默认、非空、主键、唯一</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">USE students;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> stuinfo;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stuinfo(</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,#主键</span><br><span class="line">	stuName <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,#非空</span><br><span class="line">	gender <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">CHECK</span>(gender<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="keyword">OR</span> gender <span class="operator">=</span><span class="string">&#x27;女&#x27;</span>),#检查</span><br><span class="line">	seat <span class="type">INT</span> <span class="keyword">UNIQUE</span>,#唯一</span><br><span class="line">	age <span class="type">INT</span> <span class="keyword">DEFAULT</span>  <span class="number">18</span>,#默认约束</span><br><span class="line">	majorId <span class="type">INT</span> <span class="keyword">REFERENCES</span> major(id)#外键</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> major(</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">	majorName <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#查看stuinfo中的所有索引，包括主键、外键、唯一</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> stuinfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>添加表级约束</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">语法：在各个字段的最下面</span></span><br><span class="line"><span class="comment"> 【constraint 约束名】 约束类型(字段名) </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> stuinfo;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stuinfo(</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	stuname <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	gender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">	seat <span class="type">INT</span>,</span><br><span class="line">	age <span class="type">INT</span>,</span><br><span class="line">	majorid <span class="type">INT</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> pk <span class="keyword">PRIMARY</span> KEY(id),#主键</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> uq <span class="keyword">UNIQUE</span>(seat),#唯一键</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> ck <span class="keyword">CHECK</span>(gender <span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="keyword">OR</span> gender  <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>),#检查</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> fk_stuinfo_major <span class="keyword">FOREIGN</span> KEY(majorid) <span class="keyword">REFERENCES</span> major(id)#外键</span><br><span class="line">	</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> stuinfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#通用的写法：★</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> stuinfo(</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">	stuname <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	sex <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">	age <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>,</span><br><span class="line">	seat <span class="type">INT</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">	majorid <span class="type">INT</span>,</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> fk_stuinfo_major <span class="keyword">FOREIGN</span> KEY(majorid) <span class="keyword">REFERENCES</span> major(id)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#二、修改表时添加约束</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、添加列级约束</span></span><br><span class="line"><span class="comment">alter table 表名 modify column 字段名 字段类型 新约束;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、添加表级约束</span></span><br><span class="line"><span class="comment">alter table 表名 add 【constraint 约束名】 约束类型(字段名) 【外键的引用】;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> stuinfo;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stuinfo(</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	stuname <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	gender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">	seat <span class="type">INT</span>,</span><br><span class="line">	age <span class="type">INT</span>,</span><br><span class="line">	majorid <span class="type">INT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">DESC</span> stuinfo;</span><br><span class="line">#<span class="number">1.</span>添加非空约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo MODIFY <span class="keyword">COLUMN</span> stuname <span class="type">VARCHAR</span>(<span class="number">20</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">#<span class="number">2.</span>添加默认约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo MODIFY <span class="keyword">COLUMN</span> age <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>;</span><br><span class="line">#<span class="number">3.</span>添加主键</span><br><span class="line">#①列级约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo MODIFY <span class="keyword">COLUMN</span> id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line">#②表级约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(id);</span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>添加唯一</span><br><span class="line"></span><br><span class="line">#①列级约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo MODIFY <span class="keyword">COLUMN</span> seat <span class="type">INT</span> <span class="keyword">UNIQUE</span>;</span><br><span class="line">#②表级约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(seat);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">5.</span>添加外键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_stuinfo_major <span class="keyword">FOREIGN</span> KEY(majorid) <span class="keyword">REFERENCES</span> major(id); </span><br><span class="line"></span><br><span class="line">#三、修改表时删除约束</span><br><span class="line"></span><br><span class="line">#<span class="number">1.</span>删除非空约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo MODIFY <span class="keyword">COLUMN</span> stuname <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>删除默认约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo MODIFY <span class="keyword">COLUMN</span> age <span class="type">INT</span> ;</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>删除主键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>删除唯一</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">DROP</span> INDEX seat;</span><br><span class="line"></span><br><span class="line">#<span class="number">5.</span>删除外键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_stuinfo_major;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> stuinfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="标识列"><a class="markdownIt-Anchor" href="#标识列"></a> 标识列</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#标识列</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">又称为自增长列</span></span><br><span class="line"><span class="comment">含义：可以不用手动的插入值，系统提供默认的序列值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1、标识列必须和主键搭配吗？不一定，但要求是一个key</span></span><br><span class="line"><span class="comment">2、一个表可以有几个标识列？至多一个！</span></span><br><span class="line"><span class="comment">3、标识列的类型只能是数值型</span></span><br><span class="line"><span class="comment">4、标识列可以通过 SET auto_increment_increment=3;设置步长</span></span><br><span class="line"><span class="comment">可以通过 手动插入值，设置起始值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#一、创建表时设置标识列</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tab_identity;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_identity(</span><br><span class="line">	id <span class="type">INT</span>  ,</span><br><span class="line">	NAME <span class="type">FLOAT</span> <span class="keyword">UNIQUE</span> AUTO_INCREMENT,</span><br><span class="line">	seat <span class="type">INT</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> tab_identity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_identity(id,NAME) <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;john&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_identity(NAME) <span class="keyword">VALUES</span>(<span class="string">&#x27;lucy&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tab_identity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%auto_increment%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> auto_increment_increment<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>##事务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#TCL</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Transaction Control Language 事务控制语言</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">事务：</span></span><br><span class="line"><span class="comment">一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">案例：转账</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">张三丰  1000</span></span><br><span class="line"><span class="comment">郭襄	1000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">update 表 set 张三丰的余额=500 where name=&#x27;张三丰&#x27;</span></span><br><span class="line"><span class="comment">意外</span></span><br><span class="line"><span class="comment">update 表 set 郭襄的余额=1500 where name=&#x27;郭襄&#x27;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">事务的特性：</span></span><br><span class="line"><span class="comment">ACID</span></span><br><span class="line"><span class="comment">原子性：一个事务不可再分割，要么都执行要么都不执行</span></span><br><span class="line"><span class="comment">一致性：一个事务执行会使数据从一个一致状态切换到另外一个一致状态</span></span><br><span class="line"><span class="comment">隔离性：一个事务的执行不受其他事务的干扰</span></span><br><span class="line"><span class="comment">持久性：一个事务一旦提交，则会永久的改变数据库的数据.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">事务的创建</span></span><br><span class="line"><span class="comment">隐式事务：事务没有明显的开启和结束的标记</span></span><br><span class="line"><span class="comment">比如insert、update、delete语句</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">delete from 表 where id =1;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">显式事务：事务具有明显的开启和结束的标记</span></span><br><span class="line"><span class="comment">前提：必须先设置自动提交功能为禁用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">set autocommit=0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">步骤1：开启事务</span></span><br><span class="line"><span class="comment">set autocommit=0;</span></span><br><span class="line"><span class="comment">start transaction;可选的</span></span><br><span class="line"><span class="comment">步骤2：编写事务中的sql语句(select insert update delete)</span></span><br><span class="line"><span class="comment">语句1;</span></span><br><span class="line"><span class="comment">语句2;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">步骤3：结束事务</span></span><br><span class="line"><span class="comment">commit;提交事务</span></span><br><span class="line"><span class="comment">rollback;回滚事务</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">savepoint 节点名;设置保存点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">事务的隔离级别：</span></span><br><span class="line"><span class="comment">		  脏读		不可重复读	幻读</span></span><br><span class="line"><span class="comment">read uncommitted：√		√		√</span></span><br><span class="line"><span class="comment">read committed：  ×		√		√</span></span><br><span class="line"><span class="comment">repeatable read： ×		×		√</span></span><br><span class="line"><span class="comment">serializable	  ×             ×               ×</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">mysql中默认 第三个隔离级别 repeatable read</span></span><br><span class="line"><span class="comment">oracle中默认第二个隔离级别 read committed</span></span><br><span class="line"><span class="comment">查看隔离级别</span></span><br><span class="line"><span class="comment">select @@tx_isolation;</span></span><br><span class="line"><span class="comment">设置隔离级别</span></span><br><span class="line"><span class="comment">set session|global transaction isolation level 隔离级别;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">开启事务的语句;</span></span><br><span class="line"><span class="comment">update 表 set 张三丰的余额=500 where name=&#x27;张三丰&#x27;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">update 表 set 郭襄的余额=1500 where name=&#x27;郭襄&#x27; </span></span><br><span class="line"><span class="comment">结束事务的语句;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> ENGINES;</span><br><span class="line"></span><br><span class="line">#<span class="number">1.</span>演示事务的使用步骤</span><br><span class="line"></span><br><span class="line">#开启事务</span><br><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">#编写一组事务的语句</span><br><span class="line">UPDATE account <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;张无忌&#x27;</span>;</span><br><span class="line">UPDATE account <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;赵敏&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#结束事务</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line">#<span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> account;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>演示事务对于<span class="keyword">delete</span>和<span class="keyword">truncate</span>的处理的区别</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> account;</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>演示<span class="keyword">savepoint</span> 的使用</span><br><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> account <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">25</span>;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> a;#设置保存点</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> account <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">28</span>;</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> a;#回滚到保存点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> account;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="视图"><a class="markdownIt-Anchor" href="#视图"></a> 视图</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#视图</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">含义：虚拟表，和普通表一样使用</span></span><br><span class="line"><span class="comment">mysql5.1版本出现的新特性，是通过表动态生成的数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">比如：舞蹈班和普通班级的对比</span></span><br><span class="line"><span class="comment">	创建语法的关键字	是否实际占用物理空间	使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">视图	create view		只是保存了sql逻辑	增删改查，只是一般不能增删改</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">表	create table		保存了数据		增删改查</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#案例：查询姓张的学生名和专业名</span><br><span class="line"><span class="keyword">SELECT</span> stuname,majorname</span><br><span class="line"><span class="keyword">FROM</span> stuinfo s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> major m <span class="keyword">ON</span> s.`majorid`<span class="operator">=</span> m.`id`</span><br><span class="line"><span class="keyword">WHERE</span> s.`stuname` <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> stuname,majorname</span><br><span class="line"><span class="keyword">FROM</span> stuinfo s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> major m <span class="keyword">ON</span> s.`majorid`<span class="operator">=</span> m.`id`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v1 <span class="keyword">WHERE</span> stuname <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#一、创建视图</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">create view 视图名</span></span><br><span class="line"><span class="comment">as</span></span><br><span class="line"><span class="comment">查询语句;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line">#<span class="number">1.</span>查询姓名中包含a字符的员工名、部门名和工种信息</span><br><span class="line">#①创建</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myv1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name,job_title</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.department_id  <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">JOIN</span> jobs j <span class="keyword">ON</span> j.job_id  <span class="operator">=</span> e.job_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#②使用</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myv1 <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>查询各部门的平均工资级别</span><br><span class="line"></span><br><span class="line">#①创建视图查看每个部门的平均工资</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myv2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) ag,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line">#②使用</span><br><span class="line"><span class="keyword">SELECT</span> myv2.`ag`,g.grade_level</span><br><span class="line"><span class="keyword">FROM</span> myv2</span><br><span class="line"><span class="keyword">JOIN</span> job_grades g</span><br><span class="line"><span class="keyword">ON</span> myv2.`ag` <span class="keyword">BETWEEN</span> g.`lowest_sal` <span class="keyword">AND</span> g.`highest_sal`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>查询平均工资最低的部门信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myv2 <span class="keyword">ORDER</span> <span class="keyword">BY</span> ag LIMIT <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>查询平均工资最低的部门名和工资</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myv3</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myv2 <span class="keyword">ORDER</span> <span class="keyword">BY</span> ag LIMIT <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> d.<span class="operator">*</span>,m.ag</span><br><span class="line"><span class="keyword">FROM</span> myv3 m</span><br><span class="line"><span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> m.`department_id`<span class="operator">=</span>d.`department_id`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#二、视图的修改</span><br><span class="line"></span><br><span class="line">#方式一：</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">create or replace view  视图名</span></span><br><span class="line"><span class="comment">as</span></span><br><span class="line"><span class="comment">查询语句;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myv3 </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myv3</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br><span class="line"></span><br><span class="line">#方式二：</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">alter view 视图名</span></span><br><span class="line"><span class="comment">as </span></span><br><span class="line"><span class="comment">查询语句;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> myv3</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line">#三、删除视图</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">语法：drop view 视图名,视图名,...;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> emp_v1,emp_v2,myv3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#四、查看视图</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> myv3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myv3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#五、视图的更新</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myv1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,email,salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) &quot;annual salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myv1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,email</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myv1;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br><span class="line">#<span class="number">1.</span>插入</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> myv1 <span class="keyword">VALUES</span>(<span class="string">&#x27;张飞&#x27;</span>,<span class="string">&#x27;zf@qq.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>修改</span><br><span class="line">UPDATE myv1 <span class="keyword">SET</span> last_name <span class="operator">=</span> <span class="string">&#x27;张无忌&#x27;</span> <span class="keyword">WHERE</span> last_name<span class="operator">=</span><span class="string">&#x27;张飞&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>删除</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> myv1 <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;张无忌&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#具备以下特点的视图不允许更新</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#①包含以下关键字的<span class="keyword">sql</span>语句：分组函数、<span class="keyword">distinct</span>、<span class="keyword">group</span>  <span class="keyword">by</span>、<span class="keyword">having</span>、<span class="keyword">union</span>或者<span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myv1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) m,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myv1;</span><br><span class="line"></span><br><span class="line">#更新</span><br><span class="line">UPDATE myv1 <span class="keyword">SET</span> m<span class="operator">=</span><span class="number">9000</span> <span class="keyword">WHERE</span> department_id<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">#②常量视图</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myv2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;john&#x27;</span> NAME;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myv2;</span><br><span class="line"></span><br><span class="line">#更新</span><br><span class="line">UPDATE myv2 <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;lucy&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#③<span class="keyword">Select</span>中包含子查询</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myv3</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> department_id,(<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">FROM</span> employees) 最高工资</span><br><span class="line"><span class="keyword">FROM</span> departments;</span><br><span class="line"></span><br><span class="line">#更新</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myv3;</span><br><span class="line">UPDATE myv3 <span class="keyword">SET</span> 最高工资<span class="operator">=</span><span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#④<span class="keyword">join</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myv4</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id  <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line">#更新</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myv4;</span><br><span class="line">UPDATE myv4 <span class="keyword">SET</span> last_name  <span class="operator">=</span> <span class="string">&#x27;张飞&#x27;</span> <span class="keyword">WHERE</span> last_name<span class="operator">=</span><span class="string">&#x27;Whalen&#x27;</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> myv4 <span class="keyword">VALUES</span>(<span class="string">&#x27;陈真&#x27;</span>,<span class="string">&#x27;xxxx&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#⑤<span class="keyword">from</span>一个不能更新的视图</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myv5</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myv3;</span><br><span class="line"></span><br><span class="line">#更新</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myv5;</span><br><span class="line"></span><br><span class="line">UPDATE myv5 <span class="keyword">SET</span> 最高工资<span class="operator">=</span><span class="number">10000</span> <span class="keyword">WHERE</span> department_id<span class="operator">=</span><span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#⑥<span class="keyword">where</span>子句的子查询引用了<span class="keyword">from</span>子句中的表</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myv6</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,email,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span>(</span><br><span class="line">	<span class="keyword">SELECT</span>  manager_id</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">WHERE</span> manager_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#更新</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myv6;</span><br><span class="line">UPDATE myv6 <span class="keyword">SET</span> salary<span class="operator">=</span><span class="number">10000</span> <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;k_ing&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#变量</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">系统变量：</span></span><br><span class="line"><span class="comment">	全局变量</span></span><br><span class="line"><span class="comment">	会话变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">自定义变量：</span></span><br><span class="line"><span class="comment">	用户变量</span></span><br><span class="line"><span class="comment">	局部变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">#一、系统变量</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">说明：变量由系统定义，不是用户定义，属于服务器层面</span></span><br><span class="line"><span class="comment">注意：全局变量需要添加global关键字，会话变量需要添加session关键字，如果不写，默认会话级别</span></span><br><span class="line"><span class="comment">使用步骤：</span></span><br><span class="line"><span class="comment">1、查看所有系统变量</span></span><br><span class="line"><span class="comment">show global|【session】variables;</span></span><br><span class="line"><span class="comment">2、查看满足条件的部分系统变量</span></span><br><span class="line"><span class="comment">show global|【session】 variables like &#x27;%char%&#x27;;</span></span><br><span class="line"><span class="comment">3、查看指定的系统变量的值</span></span><br><span class="line"><span class="comment">select @@global|【session】系统变量名;</span></span><br><span class="line"><span class="comment">4、为某个系统变量赋值</span></span><br><span class="line"><span class="comment">方式一：</span></span><br><span class="line"><span class="comment">set global|【session】系统变量名=值;</span></span><br><span class="line"><span class="comment">方式二：</span></span><br><span class="line"><span class="comment">set @@global|【session】系统变量名=值;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">#<span class="number">1</span>》全局变量</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用域：针对于所有会话（连接）有效，但不能跨重启</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">#①查看所有全局变量</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES;</span><br><span class="line">#②查看满足条件的部分系统变量</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%char%&#x27;</span>;</span><br><span class="line">#③查看指定的系统变量的值</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.autocommit;</span><br><span class="line">#④为某个系统变量赋值</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@global</span>.autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">2</span>》会话变量</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用域：针对于当前会话（连接）有效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">#①查看所有会话变量</span><br><span class="line"><span class="keyword">SHOW</span> SESSION VARIABLES;</span><br><span class="line">#②查看满足条件的部分会话变量</span><br><span class="line"><span class="keyword">SHOW</span> SESSION VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%char%&#x27;</span>;</span><br><span class="line">#③查看指定的会话变量的值</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@autocommit</span>;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@session</span>.tx_isolation;</span><br><span class="line">#④为某个会话变量赋值</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.tx_isolation<span class="operator">=</span><span class="string">&#x27;read-uncommitted&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> SESSION tx_isolation<span class="operator">=</span><span class="string">&#x27;read-committed&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#二、自定义变量</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">说明：变量由用户自定义，而不是系统提供的</span></span><br><span class="line"><span class="comment">使用步骤：</span></span><br><span class="line"><span class="comment">1、声明</span></span><br><span class="line"><span class="comment">2、赋值</span></span><br><span class="line"><span class="comment">3、使用（查看、比较、运算等）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#<span class="number">1</span>》用户变量</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用域：针对于当前会话（连接）有效，作用域同于会话变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#赋值操作符：<span class="operator">=</span>或:<span class="operator">=</span></span><br><span class="line">#①声明并初始化</span><br><span class="line"><span class="keyword">SET</span> @变量名<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SET</span> @变量名:<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SELECT</span> @变量名:<span class="operator">=</span>值;</span><br><span class="line"></span><br><span class="line">#②赋值（更新变量的值）</span><br><span class="line">#方式一：</span><br><span class="line">	<span class="keyword">SET</span> @变量名<span class="operator">=</span>值;</span><br><span class="line">	<span class="keyword">SET</span> @变量名:<span class="operator">=</span>值;</span><br><span class="line">	<span class="keyword">SELECT</span> @变量名:<span class="operator">=</span>值;</span><br><span class="line">#方式二：</span><br><span class="line">	<span class="keyword">SELECT</span> 字段 <span class="keyword">INTO</span> @变量名</span><br><span class="line">	<span class="keyword">FROM</span> 表;</span><br><span class="line">#③使用（查看变量的值）</span><br><span class="line"><span class="keyword">SELECT</span> @变量名;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2</span>》局部变量</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用域：仅仅在定义它的begin end块中有效</span></span><br><span class="line"><span class="comment">应用在 begin end中的第一句话</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#①声明</span><br><span class="line"><span class="keyword">DECLARE</span> 变量名 类型;</span><br><span class="line"><span class="keyword">DECLARE</span> 变量名 类型 【<span class="keyword">DEFAULT</span> 值】;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#②赋值（更新变量的值）</span><br><span class="line"></span><br><span class="line">#方式一：</span><br><span class="line">	<span class="keyword">SET</span> 局部变量名<span class="operator">=</span>值;</span><br><span class="line">	<span class="keyword">SET</span> 局部变量名:<span class="operator">=</span>值;</span><br><span class="line">	<span class="keyword">SELECT</span> 局部变量名:<span class="operator">=</span>值;</span><br><span class="line">#方式二：</span><br><span class="line">	<span class="keyword">SELECT</span> 字段 <span class="keyword">INTO</span> 具备变量名</span><br><span class="line">	<span class="keyword">FROM</span> 表;</span><br><span class="line">#③使用（查看变量的值）</span><br><span class="line"><span class="keyword">SELECT</span> 局部变量名;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例：声明两个变量，求和并打印</span><br><span class="line"></span><br><span class="line">#用户变量</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@m</span><span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@n</span><span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@sum</span><span class="operator">=</span><span class="variable">@m</span><span class="operator">+</span><span class="variable">@n</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@sum</span>;</span><br><span class="line"></span><br><span class="line">#局部变量</span><br><span class="line"><span class="keyword">DECLARE</span> m <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> SUM <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> SUM<span class="operator">=</span>m<span class="operator">+</span>n;</span><br><span class="line"><span class="keyword">SELECT</span> SUM;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#用户变量和局部变量的对比</span><br><span class="line"></span><br><span class="line">		作用域			定义位置		语法</span><br><span class="line">用户变量	当前会话		会话的任何地方		加@符号，不用指定类型</span><br><span class="line">局部变量	定义它的<span class="keyword">BEGIN</span> <span class="keyword">END</span>中 	<span class="keyword">BEGIN</span> <span class="keyword">END</span>的第一句话	一般不用加@,需要指定类型</span><br><span class="line">			</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="存储过程"><a class="markdownIt-Anchor" href="#存储过程"></a> 存储过程</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#存储过程和函数</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">存储过程和函数：类似于java中的方法</span></span><br><span class="line"><span class="comment">好处：</span></span><br><span class="line"><span class="comment">1、提高代码的重用性</span></span><br><span class="line"><span class="comment">2、简化操作</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">#存储过程</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">含义：一组预先编译好的SQL语句的集合，理解成批处理语句</span></span><br><span class="line"><span class="comment">1、提高代码的重用性</span></span><br><span class="line"><span class="comment">2、简化操作</span></span><br><span class="line"><span class="comment">3、减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#一、创建语法</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名(参数列表)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">	存储过程体（一组合法的<span class="keyword">SQL</span>语句）</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line">#注意：</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、参数列表包含三部分</span></span><br><span class="line"><span class="comment">参数模式  参数名  参数类型</span></span><br><span class="line"><span class="comment">举例：</span></span><br><span class="line"><span class="comment">in stuname varchar(20)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">参数模式：</span></span><br><span class="line"><span class="comment">in：该参数可以作为输入，也就是该参数需要调用方传入值</span></span><br><span class="line"><span class="comment">out：该参数可以作为输出，也就是该参数可以作为返回值</span></span><br><span class="line"><span class="comment">inout：该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以返回值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、如果存储过程体仅仅只有一句话，begin end可以省略</span></span><br><span class="line"><span class="comment">存储过程体中的每条sql语句的结尾要求必须加分号。</span></span><br><span class="line"><span class="comment">存储过程的结尾可以使用 delimiter 重新设置</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">delimiter 结束标记</span></span><br><span class="line"><span class="comment">案例：</span></span><br><span class="line"><span class="comment">delimiter $</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#二、调用语法</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> 存储过程名(实参列表);</span><br><span class="line"></span><br><span class="line">#<span class="comment">--------------------------------案例演示-----------------------------------</span></span><br><span class="line">#<span class="number">1.</span>空参列表</span><br><span class="line">#案例：插入到admin表中五条记录</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> admin;</span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp1()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">INSERT</span> <span class="keyword">INTO</span> admin(username,`password`) </span><br><span class="line">	<span class="keyword">VALUES</span>(<span class="string">&#x27;john1&#x27;</span>,<span class="string">&#x27;0000&#x27;</span>),(<span class="string">&#x27;lily&#x27;</span>,<span class="string">&#x27;0000&#x27;</span>),(<span class="string">&#x27;rose&#x27;</span>,<span class="string">&#x27;0000&#x27;</span>),(<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;0000&#x27;</span>),(<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;0000&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line"><span class="keyword">CALL</span> myp1()$</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>创建带<span class="keyword">in</span>模式参数的存储过程</span><br><span class="line"></span><br><span class="line">#案例<span class="number">1</span>：创建存储过程实现 根据女神名，查询对应的男神信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp2(<span class="keyword">IN</span> beautyName <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> bo.<span class="operator">*</span></span><br><span class="line">	<span class="keyword">FROM</span> boys bo</span><br><span class="line">	<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> beauty b <span class="keyword">ON</span> bo.id <span class="operator">=</span> b.boyfriend_id</span><br><span class="line">	<span class="keyword">WHERE</span> b.name<span class="operator">=</span>beautyName;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line"><span class="keyword">CALL</span> myp2(<span class="string">&#x27;柳岩&#x27;</span>)$</span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span> ：创建存储过程实现，用户是否登录成功</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp4(<span class="keyword">IN</span> username <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">IN</span> PASSWORD <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="keyword">result</span> <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;#声明并初始化</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> <span class="keyword">result</span>#赋值</span><br><span class="line">	<span class="keyword">FROM</span> admin</span><br><span class="line">	<span class="keyword">WHERE</span> admin.username <span class="operator">=</span> username</span><br><span class="line">	<span class="keyword">AND</span> admin.password <span class="operator">=</span> PASSWORD;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">SELECT</span> IF(<span class="keyword">result</span><span class="operator">&gt;</span><span class="number">0</span>,<span class="string">&#x27;成功&#x27;</span>,<span class="string">&#x27;失败&#x27;</span>);#使用</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line"><span class="keyword">CALL</span> myp3(<span class="string">&#x27;张飞&#x27;</span>,<span class="string">&#x27;8888&#x27;</span>)$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>创建<span class="keyword">out</span> 模式参数的存储过程</span><br><span class="line">#案例<span class="number">1</span>：根据输入的女神名，返回对应的男神名</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp6(<span class="keyword">IN</span> beautyName <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">OUT</span> boyName <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> bo.boyname <span class="keyword">INTO</span> boyname</span><br><span class="line">	<span class="keyword">FROM</span> boys bo</span><br><span class="line">	<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span></span><br><span class="line">	beauty b <span class="keyword">ON</span> b.boyfriend_id <span class="operator">=</span> bo.id</span><br><span class="line">	<span class="keyword">WHERE</span> b.name<span class="operator">=</span>beautyName ;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：根据输入的女神名，返回对应的男神名和魅力值</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp7(<span class="keyword">IN</span> beautyName <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">OUT</span> boyName <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">OUT</span> usercp <span class="type">INT</span>) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> boys.boyname ,boys.usercp <span class="keyword">INTO</span> boyname,usercp</span><br><span class="line">	<span class="keyword">FROM</span> boys </span><br><span class="line">	<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span></span><br><span class="line">	beauty b <span class="keyword">ON</span> b.boyfriend_id <span class="operator">=</span> boys.id</span><br><span class="line">	<span class="keyword">WHERE</span> b.name<span class="operator">=</span>beautyName ;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line"><span class="keyword">CALL</span> myp7(<span class="string">&#x27;小昭&#x27;</span>,<span class="variable">@name</span>,<span class="variable">@cp</span>)$</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@name</span>,<span class="variable">@cp</span>$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>创建带<span class="keyword">inout</span>模式参数的存储过程</span><br><span class="line">#案例<span class="number">1</span>：传入a和b两个值，最终a和b都翻倍并返回</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp8(<span class="keyword">INOUT</span> a <span class="type">INT</span> ,<span class="keyword">INOUT</span> b <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SET</span> a<span class="operator">=</span>a<span class="operator">*</span><span class="number">2</span>;</span><br><span class="line">	<span class="keyword">SET</span> b<span class="operator">=</span>b<span class="operator">*</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@m</span><span class="operator">=</span><span class="number">10</span>$</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@n</span><span class="operator">=</span><span class="number">20</span>$</span><br><span class="line"><span class="keyword">CALL</span> myp8(<span class="variable">@m</span>,<span class="variable">@n</span>)$</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@m</span>,<span class="variable">@n</span>$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#三、删除存储过程</span><br><span class="line">#语法：<span class="keyword">drop</span> <span class="keyword">procedure</span> 存储过程名</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> p1;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> p2,p3;#×</span><br><span class="line"></span><br><span class="line">#四、查看存储过程的信息</span><br><span class="line"><span class="keyword">DESC</span> myp2;×</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span>  myp2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#存储过程和函数</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">存储过程和函数：类似于java中的方法</span></span><br><span class="line"><span class="comment">好处：</span></span><br><span class="line"><span class="comment">1、提高代码的重用性</span></span><br><span class="line"><span class="comment">2、简化操作</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">#存储过程</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">含义：一组预先编译好的SQL语句的集合，理解成批处理语句</span></span><br><span class="line"><span class="comment">1、提高代码的重用性</span></span><br><span class="line"><span class="comment">2、简化操作</span></span><br><span class="line"><span class="comment">3、减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#一、创建语法</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名(参数列表)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">	存储过程体（一组合法的<span class="keyword">SQL</span>语句）</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line">#注意：</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、参数列表包含三部分</span></span><br><span class="line"><span class="comment">参数模式  参数名  参数类型</span></span><br><span class="line"><span class="comment">举例：</span></span><br><span class="line"><span class="comment">in stuname varchar(20)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">参数模式：</span></span><br><span class="line"><span class="comment">in：该参数可以作为输入，也就是该参数需要调用方传入值</span></span><br><span class="line"><span class="comment">out：该参数可以作为输出，也就是该参数可以作为返回值</span></span><br><span class="line"><span class="comment">inout：该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以返回值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、如果存储过程体仅仅只有一句话，begin end可以省略</span></span><br><span class="line"><span class="comment">存储过程体中的每条sql语句的结尾要求必须加分号。</span></span><br><span class="line"><span class="comment">存储过程的结尾可以使用 delimiter 重新设置</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">delimiter 结束标记</span></span><br><span class="line"><span class="comment">案例：</span></span><br><span class="line"><span class="comment">delimiter $</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#二、调用语法</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> 存储过程名(实参列表);</span><br><span class="line"></span><br><span class="line">#<span class="comment">--------------------------------案例演示-----------------------------------</span></span><br><span class="line">#<span class="number">1.</span>空参列表</span><br><span class="line">#案例：插入到admin表中五条记录</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> admin;</span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp1()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">INSERT</span> <span class="keyword">INTO</span> admin(username,`password`) </span><br><span class="line">	<span class="keyword">VALUES</span>(<span class="string">&#x27;john1&#x27;</span>,<span class="string">&#x27;0000&#x27;</span>),(<span class="string">&#x27;lily&#x27;</span>,<span class="string">&#x27;0000&#x27;</span>),(<span class="string">&#x27;rose&#x27;</span>,<span class="string">&#x27;0000&#x27;</span>),(<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;0000&#x27;</span>),(<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;0000&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line"><span class="keyword">CALL</span> myp1()$</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>创建带<span class="keyword">in</span>模式参数的存储过程</span><br><span class="line"></span><br><span class="line">#案例<span class="number">1</span>：创建存储过程实现 根据女神名，查询对应的男神信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp2(<span class="keyword">IN</span> beautyName <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> bo.<span class="operator">*</span></span><br><span class="line">	<span class="keyword">FROM</span> boys bo</span><br><span class="line">	<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> beauty b <span class="keyword">ON</span> bo.id <span class="operator">=</span> b.boyfriend_id</span><br><span class="line">	<span class="keyword">WHERE</span> b.name<span class="operator">=</span>beautyName;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line"><span class="keyword">CALL</span> myp2(<span class="string">&#x27;柳岩&#x27;</span>)$</span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span> ：创建存储过程实现，用户是否登录成功</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp4(<span class="keyword">IN</span> username <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">IN</span> PASSWORD <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> <span class="keyword">result</span> <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;#声明并初始化</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> <span class="keyword">result</span>#赋值</span><br><span class="line">	<span class="keyword">FROM</span> admin</span><br><span class="line">	<span class="keyword">WHERE</span> admin.username <span class="operator">=</span> username</span><br><span class="line">	<span class="keyword">AND</span> admin.password <span class="operator">=</span> PASSWORD;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">SELECT</span> IF(<span class="keyword">result</span><span class="operator">&gt;</span><span class="number">0</span>,<span class="string">&#x27;成功&#x27;</span>,<span class="string">&#x27;失败&#x27;</span>);#使用</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line"><span class="keyword">CALL</span> myp3(<span class="string">&#x27;张飞&#x27;</span>,<span class="string">&#x27;8888&#x27;</span>)$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>创建<span class="keyword">out</span> 模式参数的存储过程</span><br><span class="line">#案例<span class="number">1</span>：根据输入的女神名，返回对应的男神名</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp6(<span class="keyword">IN</span> beautyName <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">OUT</span> boyName <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> bo.boyname <span class="keyword">INTO</span> boyname</span><br><span class="line">	<span class="keyword">FROM</span> boys bo</span><br><span class="line">	<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span></span><br><span class="line">	beauty b <span class="keyword">ON</span> b.boyfriend_id <span class="operator">=</span> bo.id</span><br><span class="line">	<span class="keyword">WHERE</span> b.name<span class="operator">=</span>beautyName ;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：根据输入的女神名，返回对应的男神名和魅力值</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp7(<span class="keyword">IN</span> beautyName <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">OUT</span> boyName <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">OUT</span> usercp <span class="type">INT</span>) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> boys.boyname ,boys.usercp <span class="keyword">INTO</span> boyname,usercp</span><br><span class="line">	<span class="keyword">FROM</span> boys </span><br><span class="line">	<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span></span><br><span class="line">	beauty b <span class="keyword">ON</span> b.boyfriend_id <span class="operator">=</span> boys.id</span><br><span class="line">	<span class="keyword">WHERE</span> b.name<span class="operator">=</span>beautyName ;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line"><span class="keyword">CALL</span> myp7(<span class="string">&#x27;小昭&#x27;</span>,<span class="variable">@name</span>,<span class="variable">@cp</span>)$</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@name</span>,<span class="variable">@cp</span>$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>创建带<span class="keyword">inout</span>模式参数的存储过程</span><br><span class="line">#案例<span class="number">1</span>：传入a和b两个值，最终a和b都翻倍并返回</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp8(<span class="keyword">INOUT</span> a <span class="type">INT</span> ,<span class="keyword">INOUT</span> b <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SET</span> a<span class="operator">=</span>a<span class="operator">*</span><span class="number">2</span>;</span><br><span class="line">	<span class="keyword">SET</span> b<span class="operator">=</span>b<span class="operator">*</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@m</span><span class="operator">=</span><span class="number">10</span>$</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@n</span><span class="operator">=</span><span class="number">20</span>$</span><br><span class="line"><span class="keyword">CALL</span> myp8(<span class="variable">@m</span>,<span class="variable">@n</span>)$</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@m</span>,<span class="variable">@n</span>$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#三、删除存储过程</span><br><span class="line">#语法：<span class="keyword">drop</span> <span class="keyword">procedure</span> 存储过程名</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> p1;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> p2,p3;#×</span><br><span class="line"></span><br><span class="line">#四、查看存储过程的信息</span><br><span class="line"><span class="keyword">DESC</span> myp2;×</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span>  myp2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="流程控制结构"><a class="markdownIt-Anchor" href="#流程控制结构"></a> 流程控制结构</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#流程控制结构</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">顺序、分支、循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#一、分支结构</span><br><span class="line">#<span class="number">1.</span>if函数</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：if(条件,值1，值2)</span></span><br><span class="line"><span class="comment">功能：实现双分支</span></span><br><span class="line"><span class="comment">应用在begin end中或外面</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span><span class="keyword">case</span>结构</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">情况1：类似于switch</span></span><br><span class="line"><span class="comment">case 变量或表达式</span></span><br><span class="line"><span class="comment">when 值1 then 语句1;</span></span><br><span class="line"><span class="comment">when 值2 then 语句2;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">else 语句n;</span></span><br><span class="line"><span class="comment">end </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">情况2：</span></span><br><span class="line"><span class="comment">case </span></span><br><span class="line"><span class="comment">when 条件1 then 语句1;</span></span><br><span class="line"><span class="comment">when 条件2 then 语句2;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">else 语句n;</span></span><br><span class="line"><span class="comment">end </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">应用在begin end 中或外面</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>if结构</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">if 条件1 then 语句1;</span></span><br><span class="line"><span class="comment">elseif 条件2 then 语句2;</span></span><br><span class="line"><span class="comment">....</span></span><br><span class="line"><span class="comment">else 语句n;</span></span><br><span class="line"><span class="comment">end if;</span></span><br><span class="line"><span class="comment">功能：类似于多重if</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">只能应用在begin end 中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#案例<span class="number">1</span>：创建函数，实现传入成绩，如果成绩<span class="operator">&gt;</span><span class="number">90</span>,返回A，如果成绩<span class="operator">&gt;</span><span class="number">80</span>,返回B，如果成绩<span class="operator">&gt;</span><span class="number">60</span>,返回C，否则返回D</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> test_if(score <span class="type">FLOAT</span>) <span class="keyword">RETURNS</span> <span class="type">CHAR</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> ch <span class="type">CHAR</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	IF score<span class="operator">&gt;</span><span class="number">90</span> <span class="keyword">THEN</span> <span class="keyword">SET</span> ch<span class="operator">=</span><span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	ELSEIF score<span class="operator">&gt;</span><span class="number">80</span> <span class="keyword">THEN</span> <span class="keyword">SET</span> ch<span class="operator">=</span><span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">	ELSEIF score<span class="operator">&gt;</span><span class="number">60</span> <span class="keyword">THEN</span> <span class="keyword">SET</span> ch<span class="operator">=</span><span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">	<span class="keyword">ELSE</span> <span class="keyword">SET</span> ch<span class="operator">=</span><span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">	<span class="keyword">END</span> IF;</span><br><span class="line">	<span class="keyword">RETURN</span> ch;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> test_if(<span class="number">87</span>)$</span><br><span class="line"></span><br><span class="line">#案例<span class="number">2</span>：创建存储过程，如果工资<span class="operator">&lt;</span><span class="number">2000</span>,则删除，如果<span class="number">5000</span><span class="operator">&gt;</span>工资<span class="operator">&gt;</span><span class="number">2000</span>,则涨工资<span class="number">1000</span>，否则涨工资<span class="number">500</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_if_pro(<span class="keyword">IN</span> sal <span class="keyword">DOUBLE</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	IF sal<span class="operator">&lt;</span><span class="number">2000</span> <span class="keyword">THEN</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employees.salary<span class="operator">=</span>sal;</span><br><span class="line">	ELSEIF sal<span class="operator">&gt;=</span><span class="number">2000</span> <span class="keyword">AND</span> sal<span class="operator">&lt;</span><span class="number">5000</span> <span class="keyword">THEN</span> UPDATE employees <span class="keyword">SET</span> salary<span class="operator">=</span>salary<span class="operator">+</span><span class="number">1000</span> <span class="keyword">WHERE</span> employees.`salary`<span class="operator">=</span>sal;</span><br><span class="line">	<span class="keyword">ELSE</span> UPDATE employees <span class="keyword">SET</span> salary<span class="operator">=</span>salary<span class="operator">+</span><span class="number">500</span> <span class="keyword">WHERE</span> employees.`salary`<span class="operator">=</span>sal;</span><br><span class="line">	<span class="keyword">END</span> IF;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> test_if_pro(<span class="number">2100</span>)$</span><br><span class="line"></span><br><span class="line">#案例<span class="number">1</span>：创建函数，实现传入成绩，如果成绩<span class="operator">&gt;</span><span class="number">90</span>,返回A，如果成绩<span class="operator">&gt;</span><span class="number">80</span>,返回B，如果成绩<span class="operator">&gt;</span><span class="number">60</span>,返回C，否则返回D</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> test_case(score <span class="type">FLOAT</span>) <span class="keyword">RETURNS</span> <span class="type">CHAR</span></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">	<span class="keyword">DECLARE</span> ch <span class="type">CHAR</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">CASE</span> </span><br><span class="line">	<span class="keyword">WHEN</span> score<span class="operator">&gt;</span><span class="number">90</span> <span class="keyword">THEN</span> <span class="keyword">SET</span> ch<span class="operator">=</span><span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	<span class="keyword">WHEN</span> score<span class="operator">&gt;</span><span class="number">80</span> <span class="keyword">THEN</span> <span class="keyword">SET</span> ch<span class="operator">=</span><span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">	<span class="keyword">WHEN</span> score<span class="operator">&gt;</span><span class="number">60</span> <span class="keyword">THEN</span> <span class="keyword">SET</span> ch<span class="operator">=</span><span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">	<span class="keyword">ELSE</span> <span class="keyword">SET</span> ch<span class="operator">=</span><span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">RETURN</span> ch;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> test_case(<span class="number">56</span>)$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#二、循环结构</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">while、loop、repeat</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">循环控制：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">iterate类似于 continue，继续，结束本次循环，继续下一次</span></span><br><span class="line"><span class="comment">leave 类似于  break，跳出，结束当前所在的循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#<span class="number">1.</span>while</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">【标签:】while 循环条件 do</span></span><br><span class="line"><span class="comment">	循环体;</span></span><br><span class="line"><span class="comment">end while【 标签】;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">联想：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">while(循环条件)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	循环体;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>loop</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">【标签:】loop</span></span><br><span class="line"><span class="comment">	循环体;</span></span><br><span class="line"><span class="comment">end loop 【标签】;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">可以用来模拟简单的死循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>repeat</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">【标签：】repeat</span></span><br><span class="line"><span class="comment">	循环体;</span></span><br><span class="line"><span class="comment">until 结束循环的条件</span></span><br><span class="line"><span class="comment">end repeat 【标签】;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#<span class="number">1.</span>没有添加循环控制语句</span><br><span class="line">#案例：批量插入，根据次数插入到admin表中多条记录</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> pro_while1$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_while1(<span class="keyword">IN</span> insertCount <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">	WHILE i<span class="operator">&lt;=</span>insertCount DO</span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">INTO</span> admin(username,`password`) <span class="keyword">VALUES</span>(CONCAT(<span class="string">&#x27;Rose&#x27;</span>,i),<span class="string">&#x27;666&#x27;</span>);</span><br><span class="line">		<span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">	<span class="keyword">END</span> WHILE;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> pro_while1(<span class="number">100</span>)$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int i=1;</span></span><br><span class="line"><span class="comment">while(i&lt;=insertcount)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	//插入</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	i++;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>添加leave语句</span><br><span class="line"></span><br><span class="line">#案例：批量插入，根据次数插入到admin表中多条记录，如果次数<span class="operator">&gt;</span><span class="number">20</span>则停止</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> admin$</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> test_while1$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_while1(<span class="keyword">IN</span> insertCount <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">	a:WHILE i<span class="operator">&lt;=</span>insertCount DO</span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">INTO</span> admin(username,`password`) <span class="keyword">VALUES</span>(CONCAT(<span class="string">&#x27;xiaohua&#x27;</span>,i),<span class="string">&#x27;0000&#x27;</span>);</span><br><span class="line">		IF i<span class="operator">&gt;=</span><span class="number">20</span> <span class="keyword">THEN</span> LEAVE a;</span><br><span class="line">		<span class="keyword">END</span> IF;</span><br><span class="line">		<span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">	<span class="keyword">END</span> WHILE a;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> test_while1(<span class="number">100</span>)$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>添加iterate语句</span><br><span class="line"></span><br><span class="line">#案例：批量插入，根据次数插入到admin表中多条记录，只插入偶数次</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> admin$</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> test_while1$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_while1(<span class="keyword">IN</span> insertCount <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	a:WHILE i<span class="operator">&lt;=</span>insertCount DO</span><br><span class="line">		<span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">		IF <span class="built_in">MOD</span>(i,<span class="number">2</span>)<span class="operator">!=</span><span class="number">0</span> <span class="keyword">THEN</span> ITERATE a;</span><br><span class="line">		<span class="keyword">END</span> IF;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">INTO</span> admin(username,`password`) <span class="keyword">VALUES</span>(CONCAT(<span class="string">&#x27;xiaohua&#x27;</span>,i),<span class="string">&#x27;0000&#x27;</span>);</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">END</span> WHILE a;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> test_while1(<span class="number">100</span>)$</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int i=0;</span></span><br><span class="line"><span class="comment">while(i&lt;=insertCount)&#123;</span></span><br><span class="line"><span class="comment">	i++;</span></span><br><span class="line"><span class="comment">	if(i%2==0)&#123;</span></span><br><span class="line"><span class="comment">		continue;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	插入</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>基本DOS命令</title>
    <url>/5d5de5de.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="开始dos控制台的方式"><a class="markdownIt-Anchor" href="#开始dos控制台的方式"></a> 开始DOS控制台的方式</h2>
<ol>
<li>开始-Windows系统-命令提示符</li>
<li>Win+R-输入cmd</li>
<li>任意文件夹下Shift+鼠标右键打开命令行窗口</li>
<li>资源管理器地址栏前面输入cmd 路径<br />
以管理员方式运行，获得最高权限</li>
</ol>
<h2 id="常见dos命令"><a class="markdownIt-Anchor" href="#常见dos命令"></a> 常见DOS命令</h2>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 盘符切换 磁盘名称:</span></span><br><span class="line"><span class="meta"># 查看当前目录下所有文件 dir</span></span><br><span class="line"><span class="meta"># 切换目录 cd /d 地址 #跨磁盘</span></span><br><span class="line">cd .. # 返回上一级目录</span><br><span class="line"><span class="meta"># 清理屏幕 cls</span></span><br><span class="line"><span class="meta"># 退出终端 exit</span></span><br><span class="line"><span class="meta"># 查看ip ipconfig</span></span><br><span class="line"><span class="meta"># 打开应用 </span></span><br><span class="line">calc #计算器</span><br><span class="line">mspaint #画图</span><br><span class="line">notepad #记事本</span><br><span class="line"><span class="meta"># ping 命令</span></span><br><span class="line"><span class="meta"># 创建文件夹 md 文件夹名称</span></span><br><span class="line"><span class="meta"># 创建文件 cd&gt;文件名</span></span><br><span class="line"><span class="meta"># 删除文件 del 文件名</span></span><br><span class="line"><span class="meta"># 删除文件夹 rd 文件夹名</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>快排的实现</title>
    <url>/afe35157.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>概率论公式</title>
    <url>/8a707098.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="常用概率分布及其数学期望和方差"><a class="markdownIt-Anchor" href="#常用概率分布及其数学期望和方差"></a> 常用概率分布及其数学期望和方差</h3>
<h4 id="常用离散分布"><a class="markdownIt-Anchor" href="#常用离散分布"></a> 常用离散分布</h4>
<table>
<thead>
<tr>
<th style="text-align:center">分布</th>
<th style="text-align:center">分布列<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">p_{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>或分布密度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></th>
<th style="text-align:center">期望</th>
<th style="text-align:center">方差</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>分布</td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>k</mi></msub><mo>=</mo><msup><mi>p</mi><mi>k</mi></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mn>1</mn><mo>−</mo><mi>k</mi></mrow></msup><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p_k=p^k(1-p)^{1-k},k=0,1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(1-p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">二项分布<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">b(n,p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>k</mi></msub><mo>=</mo><mrow><mo fence="true">(</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac linethickness="0px"><mi>n</mi><mi>k</mi></mfrac></mstyle><mo fence="true">)</mo></mrow><msup><mi>p</mi><mi>k</mi></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></msup><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">p_k=\dbinom{n}{k}p^k(1-p)^{n-k},k=0,1,\cdots,n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">np</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">p</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>p</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">np(1-p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">泊松分布<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>λ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(\lambda)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>k</mi></msub><mo>=</mo><mfrac><msup><mi>λ</mi><mi>k</mi></msup><mrow><mi>k</mi><mo stretchy="false">!</mo></mrow></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mi>λ</mi></mrow></msup><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">p_k=\frac{\lambda^k}{k!}e^{-\lambda},k=0,1,\cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3879199999999998em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0429199999999998em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">λ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9270285714285713em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">λ</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">超几何分布<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>N</mi><mo separator="true">,</mo><mi>M</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n,N,M)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>k</mi></msub><mo>=</mo><mfrac><mrow><mrow><mo fence="true">(</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac linethickness="0px"><mi>M</mi><mi>k</mi></mfrac></mstyle><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac linethickness="0px"><mrow><mi>N</mi><mo>−</mo><mi>M</mi></mrow><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></mfrac></mstyle><mo fence="true">)</mo></mrow></mrow><mrow><mo fence="true">(</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac linethickness="0px"><mi>N</mi><mi>n</mi></mfrac></mstyle><mo fence="true">)</mo></mrow></mfrac><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>r</mi><mo separator="true">,</mo><mi>r</mi><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">{</mo><mi>M</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">p_k=\frac{\dbinom{M}{k}\dbinom{N-M}{n-k}}{\dbinom{N}{n}},k=0,1,\cdots,r,r=min\{M,n\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.537990000000001em;vertical-align:-1.97733em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5606600000000004em;"><span style="top:-2.19em;"><span class="pstrut" style="height:3.41533em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sizing reset-size3 size6 mtight"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.41533em;"><span style="top:-1.9480000000000002em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.4320000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.752em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span><span style="top:-3.6453300000000004em;"><span class="pstrut" style="height:3.41533em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-4.56066em;"><span class="pstrut" style="height:3.41533em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sizing reset-size3 size6 mtight"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.41533em;"><span style="top:-1.9480000000000002em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.4320000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.752em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mord sizing reset-size3 size6 mtight"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4153300000000002em;"><span style="top:-1.9480000000000002em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.4320000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.83533em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.97733em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">}</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mfrac><mi>M</mi><mi>N</mi></mfrac></mrow><annotation encoding="application/x-tex">n\frac{M}{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord mathdefault">n</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mi>M</mi><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>M</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><mrow><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{nM(N-M)(N-n)}{N^2(N-1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mclose mtight">)</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">几何分布<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>e</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Ge(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>k</mi></msub><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>p</mi><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">p_k=(1-p)^{k-1}p,k=1,2,\cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mi>p</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.326216em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>1</mn><mo>−</mo><mi>p</mi></mrow><msup><mi>p</mi><mn>2</mn></msup></mfrac></mrow><annotation encoding="application/x-tex">\frac{1-p}{p^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.378324em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.897216em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">负二项分布<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>b</mi><mo stretchy="false">(</mo><mi>r</mi><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Nb(r,p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>k</mi></msub><mo>=</mo><mrow><mo fence="true">(</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac linethickness="0px"><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>r</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle><mo fence="true">)</mo></mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mo stretchy="false">(</mo></msup><mi>k</mi><mo>−</mo><mi>r</mi><mo stretchy="false">)</mo><msup><mi>p</mi><mi>r</mi></msup><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mi>r</mi><mo separator="true">,</mo><mi>r</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">p_k=\dbinom{k-1}{r-1}(1-p)^(k-r)p^r,k=r,r+1,\cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714400000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.6770000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mopen mtight">(</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>r</mi><mi>p</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{r}{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1764999999999999em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>r</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><msup><mi>p</mi><mn>2</mn></msup></mfrac></mrow><annotation encoding="application/x-tex">\frac{r(1-p)}{p^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.491108em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">p</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td>
</tr>
</tbody>
</table>
<h4 id="常用连续分布"><a class="markdownIt-Anchor" href="#常用连续分布"></a> 常用连续分布</h4>
<table>
<thead>
<tr>
<th style="text-align:center">分布</th>
<th style="text-align:center">分布列<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">p_{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>或分布密度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></th>
<th style="text-align:center">期望</th>
<th style="text-align:center">方差</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">正态分布<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo stretchy="false">(</mo><mi>μ</mi><mo separator="true">,</mo><msup><mi>σ</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N(\mu,\sigma^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault">μ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><msqrt><mrow><mn>2</mn><mi>π</mi></mrow></msqrt><mi>σ</mi></mrow></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mn>2</mn><msup><mi>σ</mi><mn>2</mn></msup></mrow></mfrac></mrow></msup><mo separator="true">,</mo><mo>−</mo><mi mathvariant="normal">∞</mi><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">p(x)=\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^2}{2\sigma^2}},-\infin&lt;x&lt;\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.8670900000000001em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.5510085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.32909em;"><span style="top:-3.4534200000000004em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.5061857142857145em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9384399999999999em;"><span style="top:-2.93844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">μ</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.49381428571428565em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord">∞</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sigma^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">均匀分布<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">U(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>b</mi><mo>−</mo><mi>a</mi></mrow></mfrac><mo separator="true">,</mo><mi>a</mi><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">p(x)=\frac{1}{b-a},a&lt;x&lt;b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{a+b}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><mi>a</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mn>12</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{(b-a)^2}{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4539199999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10892em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">b</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">a</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">指数分布<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mi>λ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Exp(\lambda)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>λ</mi><msup><mi>e</mi><mrow><mo>−</mo><mi>λ</mi></mrow></msup><mo separator="true">,</mo><mi>x</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p(x)=\lambda e^{-\lambda},x\ge0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.043548em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">λ</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">λ</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mi>λ</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\lambda}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">λ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><msup><mi>λ</mi><mn>2</mn></msup></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\lambda^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">λ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">伽马分布<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>a</mi><mo stretchy="false">(</mo><mi>α</mi><mo separator="true">,</mo><mi>λ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Ga(\alpha,\lambda)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">λ</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><msup><mi>λ</mi><mi>α</mi></msup><mrow><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo></mrow></mfrac><msup><mi>x</mi><mrow><mi>α</mi><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>e</mi><mrow><mo>−</mo><mi>λ</mi><mi>x</mi></mrow></msup><mo separator="true">,</mo><mi>x</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p(x)=\frac{\lambda^{\alpha}}{\Gamma(\alpha)}x^{\alpha-1}e^{-\lambda x},x\ge0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.43098em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.91098em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Γ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">λ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">λ</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>α</mi><mi>λ</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{\alpha}{\lambda}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">λ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>α</mi><msup><mi>λ</mi><mn>2</mn></msup></mfrac></mrow><annotation encoding="application/x-tex">\frac{\alpha}{\lambda^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">λ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>X</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X^2(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>分布</td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup></mrow><mrow><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><msup><mn>2</mn><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{p(x)=x^{n/2-1}e^{-x/2}}{\Gamma(n/2)2^{n/2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.722125em;vertical-align:-0.560425em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1617em;"><span style="top:-2.614575em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Γ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mord mtight">/</span><span class="mord mtight">2</span><span class="mclose mtight">)</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8220357142857143em;"><span style="top:-2.8220357142857138em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5357142857142856em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9667142857142857em;"><span style="top:-2.966714285714285em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5357142857142856em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">/</span><span class="mord mtight">2</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9667142857142857em;"><span style="top:-2.966714285714285em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5357142857142856em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">x</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.560425em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">贝塔分布<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>e</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Be(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo></mrow></mfrac><msup><mi>x</mi><mrow><mi>a</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mrow><mi>b</mi><mo>−</mo><mn>1</mn></mrow></msup><mo separator="true">,</mo><mn>0</mn><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p(x)=\frac{\Gamma(a+b)}{\Gamma(a)\Gamma(b)}x^{a-1}(1-x)^{b-1},0&lt;x&lt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Γ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">a</span><span class="mclose mtight">)</span><span class="mord mtight">Γ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">b</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Γ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">b</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>a</mi><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{a}{a+b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0987230000000001em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>a</mi><mi>b</mi></mrow><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{ab}{(a+b)^2(a+b+1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.400108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">b</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">a</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">b</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">对数正态分布<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mi>N</mi><mo stretchy="false">(</mo><mi>μ</mi><mo separator="true">,</mo><msup><mi>σ</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LN(\mu,\sigma^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault">μ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><msqrt><mrow><mn>2</mn><mi>π</mi></mrow></msqrt><mi>σ</mi><mi>x</mi></mrow></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>l</mi><mi>n</mi><mi>x</mi><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mn>2</mn><msup><mi>σ</mi><mn>2</mn></msup></mrow></mfrac></mrow></msup><mo separator="true">,</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p(x)=\frac1{\sqrt{2\pi}\sigma x}e^{-\frac{(lnx-\mu)^2}{2\sigma^2}},x&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.8670900000000001em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.5510085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.912845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span><span style="top:-2.872845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12715500000000002em;"><span></span></span></span></span></span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.32909em;"><span style="top:-3.4534200000000004em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.5061857142857145em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9384399999999999em;"><span style="top:-2.93844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">μ</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.49381428571428565em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>e</mi><mrow><mi>μ</mi><mo>+</mo><msup><mi>σ</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">e^{\mu+\sigma^2/2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9869199999999998em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999998em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">μ</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>e</mi><mrow><mn>2</mn><mi>μ</mi><mo>+</mo><msup><mi>σ</mi><mn>2</mn></msup></mrow></msup><mo stretchy="false">(</mo><msup><mi>e</mi><msup><mi>σ</mi><mn>2</mn></msup></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e^{2\mu+\sigma^2}(e^{\sigma^2}-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.23692em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">μ</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">柯西分布<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>a</mi><mi>u</mi><mo stretchy="false">(</mo><mi>μ</mi><mo separator="true">,</mo><mi>λ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Cau(\mu,\lambda)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">a</span><span class="mord mathdefault">u</span><span class="mopen">(</span><span class="mord mathdefault">μ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">λ</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>π</mi></mfrac><mfrac><mi>λ</mi><mrow><msup><mi>λ</mi><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac><mo separator="true">,</mo><mo>−</mo><mi mathvariant="normal">∞</mi><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">p(x)=\frac1\pi\frac\lambda{\lambda^2+(x-\mu)^2},-\infin&lt;x&lt;\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.400108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">λ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">μ</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">λ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord">∞</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></td>
<td style="text-align:center">不存在</td>
<td style="text-align:center">不存在</td>
</tr>
<tr>
<td style="text-align:center">韦布尔分布</td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>F</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mo stretchy="false">(</mo><mfrac><mi>x</mi><mi>η</mi></mfrac><msup><mo stretchy="false">)</mo><mi>m</mi></msup></mrow></msup><mo separator="true">,</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p(x)=F^\prime(x),F(x)=1-e^{-(\frac x\eta)^m},x&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1652099999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9707699999999999em;"><span style="top:-3.44577em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">η</span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48288571428571425em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>η</mi><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\eta\Gamma(1+\frac1m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">η</span><span class="mord">Γ</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>η</mi><mn>2</mn></msup><mo stretchy="false">[</mo><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>2</mn><mi>m</mi></mfrac><mo stretchy="false">)</mo><mo>−</mo><msup><mi mathvariant="normal">Γ</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\eta^2[\Gamma(1+\frac2m)-\Gamma^2(1+\frac1m)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">η</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord">Γ</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">Γ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云人工智能从业者认证</title>
    <url>/9eee379c.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="人工智能导论"><a class="markdownIt-Anchor" href="#人工智能导论"></a> 人工智能导论</h2>
<h3 id="人工智能概述"><a class="markdownIt-Anchor" href="#人工智能概述"></a> 人工智能概述</h3>
<h4 id="人工智能的概念"><a class="markdownIt-Anchor" href="#人工智能的概念"></a> 人工智能的概念</h4>
<p>人工智能(ArtificialIntelligence,Al)是研究、开发用于 <strong>模拟、延伸和扩展人的智能</strong> 的理论、方法、技术及应用系统的一门新技术科学。</p>
<ul>
<li>企图了解智能的实质，并生产出一种新的能以人类智能相似的方式做出反应的智能机器。</li>
<li>人工智能是对人的意识、思维的信息过程的模拟。人工智能不是人的智能，但能像人那样思考、也可能超过人的智能。</li>
<li>根据对环境的感知，做出合理的行动，并获得最大收益。</li>
</ul>
<h4 id="人工智能的三个层面"><a class="markdownIt-Anchor" href="#人工智能的三个层面"></a> 人工智能的三个层面</h4>
<ul>
<li><strong>计算智能</strong>
<ul>
<li>能算能存</li>
</ul>
</li>
<li><strong>感知智能</strong>
<ul>
<li>能听会说、能看会认</li>
</ul>
</li>
<li><strong>认知智能</strong>
<ul>
<li>能理解，会思考</li>
</ul>
</li>
</ul>
<h4 id="常见术语解释"><a class="markdownIt-Anchor" href="#常见术语解释"></a> 常见术语解释</h4>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/12/19/cde52878bce4502ef4bf64386bcc690e.png" alt="术语关系" /></p>
<ul>
<li><strong>人工智能(Artificial intelligence)</strong><br />
人工智能亦称智械、机器智能，指由人制造出来的机器所表现出来的智能。通常人工智能是指通过普通计算机程序来呈现人类智能的技术。</li>
<li><strong>算法(Algorithms)</strong><br />
在 <strong>数学</strong>（<strong>算学</strong>）和计算机科学中，一个被定义好的、计算机可执行的有限步骤或次序、常用于 <strong>计算</strong>、<strong>数据处理</strong> 和 <strong>自动推理</strong>，例f(x)=y</li>
<li><strong>机器学习(Machine learning)</strong><br />
设计和分析一些让 <strong>计算机</strong> 可以自动“<strong>学习</strong>”的 <strong>算法</strong>。机器学习是一类从 <strong>数据</strong> 中自动分析获得 <strong>规律</strong> 并利用规律对未知数据进行预测的算法</li>
<li><strong>深度学习(Deep learning)</strong><br />
深度学习是 <strong>机器学习</strong> 中一种基于对数据进行 <strong>表征学习</strong> 的算法。深度学习的好处是用 <strong>非监督式</strong> 或 <strong>半监督式</strong> 的 <strong>特征学习</strong> 和分层 <strong>特征提取</strong> 高效伏安法来替代手工获取 <strong>特征</strong>。</li>
<li><strong>神经网络(NN)</strong><br />
现代神经网络是一种 <strong>非线性统计性数据建模</strong> 工具，神经网络通常是通过一个基于数学统计学类型的学习方法得以优化，所以也是数学统计学方法的一种实际应用。</li>
<li><strong>监督学习(Supervised learning)</strong><br />
<strong>机器学习</strong> 的一种方法，可以由训练资料中学到或简历一个模式（函数/learning model）,并依次模式推测新的实例。</li>
<li><strong>无监督学习(Unsupervised learning)</strong><br />
<strong>机器学习</strong> 的一种方法，没有给定事先标记过的训练示例，自动对输入的资料进行分类或分群。</li>
</ul>
<h3 id="人工智能应用"><a class="markdownIt-Anchor" href="#人工智能应用"></a> 人工智能应用</h3>
<h4 id="生活中的人工智能应用"><a class="markdownIt-Anchor" href="#生活中的人工智能应用"></a> 生活中的人工智能应用</h4>
<p>指纹识别 刷脸解锁屏幕 真人核身验证</p>
<h4 id="人工智能技术渗透各产业"><a class="markdownIt-Anchor" href="#人工智能技术渗透各产业"></a> 人工智能技术渗透各产业</h4>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/12/20/763ebc3acf34f2e142e965828e521363.png" alt="产业中的人工智能应用" /></p>
<h5 id="智慧金融"><a class="markdownIt-Anchor" href="#智慧金融"></a> 智慧金融</h5>
<p>以智能风控为主，同时渗透支付、理赔、投研投顾等场景。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/12/20/3519c662ff2adefac1a06d4f5730e6c5.png" alt="" /></p>
<h5 id="智慧零售"><a class="markdownIt-Anchor" href="#智慧零售"></a> 智慧零售</h5>
<p>人工智能提升零售全流程运行效率，优化消费者体验。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/12/20/a3a02804acd21cbec0a7a4266e3d1e8a.png" alt="" /></p>
<h5 id="智慧交通"><a class="markdownIt-Anchor" href="#智慧交通"></a> 智慧交通</h5>
<p>人工智能应用刀拥堵分析、线路优化、车辆调度、驾驶辅助等场景，有效改善交通问题。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/12/20/8be9a5683e41757dcb6f7997e80a2d1e.png" alt="" /></p>
<h5 id="智慧教育"><a class="markdownIt-Anchor" href="#智慧教育"></a> 智慧教育</h5>
<p>由表及里，人工智能技术已逐渐深入到学习环节。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/12/21/e2db7a5964534e32f257bfb0b225c72a.png" alt="" /></p>
<h5 id="智慧医疗"><a class="markdownIt-Anchor" href="#智慧医疗"></a> 智慧医疗</h5>
<p>从影像分析、辅助诊疗、健康管理等角度做好医患助手。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/12/21/1685e88773c1f350bf9471b32e953e74.png" alt="" /></p>
<h5 id="智能制造"><a class="markdownIt-Anchor" href="#智能制造"></a> 智能制造</h5>
<p>助力生产制造优化，减少重复劳动，实现智能制造。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/12/21/b665242f8840492503c3833393357f96.png" alt="" /></p>
<h5 id="智慧健康"><a class="markdownIt-Anchor" href="#智慧健康"></a> 智慧健康</h5>
<p>降低健康管理成本，实现交互革命，增强人类功能。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/12/21/85701adb872e76dd1cdbc73cedeed2ac.png" alt="" /></p>
<h4 id="健康码案例详解"><a class="markdownIt-Anchor" href="#健康码案例详解"></a> 健康码案例详解</h4>
<p>疫情爆发，暴露了医疗健康信息化建设的痛点。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/12/21/57f7ce27dc7c2e918a51495d00c74555.png" alt="" /></p>
<p>通过健康码解决痛点，并连接三端。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/12/21/ef53aab2e3a5b04a8ee150f11b1b299f.png" alt="" /></p>
<p><strong>健康码产品设计思考：</strong></p>
<ul>
<li>以健康码为凭证，规范化社区围合式管理以及路网卡口通行监管。</li>
<li>以健康码为抓手，深化解决个人/企业员工健康数据采集、管理问题。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/12/23/f2813f16a6cf9fe1ddd095b8765721b6.png" alt="" /></li>
</ul>
<h2 id="人工智能项目开发实战"><a class="markdownIt-Anchor" href="#人工智能项目开发实战"></a> 人工智能项目开发实战</h2>
<h2 id="腾讯云ai能力"><a class="markdownIt-Anchor" href="#腾讯云ai能力"></a> 腾讯云AI能力</h2>
<h2 id="人工智能的发展趋势和行业地位"><a class="markdownIt-Anchor" href="#人工智能的发展趋势和行业地位"></a> 人工智能的发展趋势和行业地位</h2>
]]></content>
  </entry>
  <entry>
    <title>树莓派内网穿透实现远程访问</title>
    <url>/92270b23.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h3>
<p>最近入手了一块raspberry 3b+，想要随时随地访问树莓派需要配置内网穿透。我最初找了一些这方便的文章，根据步骤配置，效果不怎么样。然后用了花生壳，体验也不好。后来发现一款强大的免费内网穿透软件，比起付费软件毫不逊色。</p>
<h3 id="配置方案"><a class="markdownIt-Anchor" href="#配置方案"></a> 配置方案</h3>
<h4 id="注册sakura-frp账号"><a class="markdownIt-Anchor" href="#注册sakura-frp账号"></a> 注册Sakura frp账号</h4>
<p>百度<a href="https://www.natfrp.com/">Sakura</a>，第一个就是官网，长这样<br />
<img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/30/r4tijkQRsA2HC9z.png" alt="image.png" /><br />
点击注册,按照提示填写资料。<br />
<img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/30/ZaTcFfkCz3neRdM.png" alt="image.png" /><br />
注册完成后进入管理面板，记住访问密匙，后面会用到。<br />
<img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/11/30/Mh5quw9TEni4OjR.png" alt="image.png" /></p>
<h4 id="确认系统架构"><a class="markdownIt-Anchor" href="#确认系统架构"></a> 确认系统架构</h4>
<p>树莓派官方系统的系统架构是arm，如果使用的其它系统，执行下面命令，根据输出结果确定系统架构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uname -a</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">架构</th>
<th style="text-align:center">输出结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">i386</td>
<td style="text-align:center">i386, i686</td>
</tr>
<tr>
<td style="text-align:center">amd64</td>
<td style="text-align:center">x86_64</td>
</tr>
<tr>
<td style="text-align:center">arm</td>
<td style="text-align:center">arm, armv7l</td>
</tr>
<tr>
<td style="text-align:center">arm64</td>
<td style="text-align:center">aarch64, armv8l</td>
</tr>
<tr>
<td style="text-align:center">mips</td>
<td style="text-align:center">mips</td>
</tr>
<tr>
<td style="text-align:center">mips64</td>
<td style="text-align:center">mips64</td>
</tr>
<tr>
<td style="text-align:center">不支持</td>
<td style="text-align:center">alpha, arc, blackfin, c6x, cris, frv, h8300, hexagon, ia64, m32r, m68k, metag, microblaze, mn10300, nios2, openrisc, parisc, parisc64, ppc, ppcle, ppc64, ppc64le, s390, s390x, score, sh, sh64, sparc, sparc64, tile, unicore32, xtensa</td>
</tr>
</tbody>
</table>
<p>如果您的输出结果不在上面列表中，可以通过[百度](<a href="https://www.baidu.com/%E8%BF%9B%E8%A1%8C%E6%90%9C%E7%B4%A2">https://www.baidu.com/进行搜索</a></p>
<h4 id="安装frpc"><a class="markdownIt-Anchor" href="#安装frpc"></a> 安装frpc</h4>
<p>登录<a href="https://www.natfrp.com/">管理面板</a>，在侧边栏点击 “软件下载” :<br />
根据系统架构复制相应的下载地址<br />
<img src= "/img/loading.gif" data-lazy-src="https://doc.natfrp.com/frpc/usage/_images/linux-1.png" alt="image.png" /><br />
使用下面的命令进入<code>/usr/local/bin</code>目录并下载文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> curl -Lo frpc 您刚才复制的下载地址</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="https://doc.natfrp.com/frpc/usage/_images/linux-2.png" alt="image.png" /></p>
<p>然后使用下面的命令设置正确的权限并检查输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chmod 755 frpc</span></span><br><span class="line"><span class="comment"># ls -ls frpc</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="https://doc.natfrp.com/frpc/usage/_images/linux-3.png" alt="image.png" /><br />
如果您看到和图里一样的输出，frpc 就安装完成并可以正常使用了。您可以执行下面的命令来再次确认</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ frpc -v</span><br></pre></td></tr></table></figure>
<h4 id="配置开机自启后台运行"><a class="markdownIt-Anchor" href="#配置开机自启后台运行"></a> 配置开机自启/后台运行</h4>
<p>让<code>frpc</code>在开机时自启或在后台运行，可以让你在任何地方连接树莓派，这需要将<code>frpc</code>注册为系统服务</p>
<p>首先，您要搞清楚您的<code>Linux</code>系统使用的 初始化系统 是什么，官方文档提供三种常见初始化系统的配置指南:</p>
<ul>
<li><a href="https://doc.natfrp.com/#/frpc/service/systemd">Systemd</a></li>
<li><a href="https://doc.natfrp.com/#/frpc/service/upstart">Upstart</a></li>
<li><a href="https://doc.natfrp.com/#/frpc/service/sysvinit">SysV-Init</a></li>
</ul>
<p>执行下面的命令然后查看输出，确定您的初始化系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if [[ `/sbin/init --version` =~ upstart ]]; then echo Upstart; elif [[ `systemctl` =~ -\.mount ]]; then echo Systemd; elif [[ -f /etc/init.d/cron &amp;&amp; ! -h /etc/init.d/cron ]]; then echo SysV-Init; else echo Unknown; fi</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="https://doc.natfrp.com/frpc/usage/_images/linux-4.png" alt="image.png" /></p>
<p>目前官方文档上只有<code>Systemd</code>的配置指南，另外两个还没写好，本人目前用的是树莓派官方系统，初始化系统是<code>Systemd</code>，下面是<code>Systemd</code>配置<code>frpc</code>开机自启/后台运行的方法</p>
<h5 id="编写配置文件"><a class="markdownIt-Anchor" href="#编写配置文件"></a> 编写配置文件</h5>
<p><code>Systemd</code>的<code>Unit</code>配置文件 通常位于这些目录中:</p>
<ul>
<li>/lib/systemd/system</li>
<li>/etc/systemd/system<br />
本文选用第一个目录来放置<code>frpc</code>的<code>Unit</code>配置文件，并且<code>frpc</code>启用后报错退出时每分钟会自动重启一次<br />
执行下面命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /lib/systemd/system/frpc@.service</span></span><br></pre></td></tr></table></figure>
<p>其中<code>vi</code>是一个文本编辑器，可以换成其它的<br />
输入下述内容</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=SakuraFrp Service</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=idle</span><br><span class="line"><span class="attr">User</span>=nobody</span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">60</span>s</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/bin/frpc -f %i</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>
<p>执行下面的命令重载<code>Systemd</code>，这样这样服务就配置完成了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br></pre></td></tr></table></figure>
<h5 id="配置开机自启"><a class="markdownIt-Anchor" href="#配置开机自启"></a> 配置开机自启</h5>
<p>使用下面的命令启用/禁用服务，<code>enable</code>是启用，<code>disable</code>是禁用，操作完成后再用<code>status</code>检查一下状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl &lt;enable|disable&gt; &lt;Unit名称&gt;</span></span><br><span class="line"><span class="comment"># systemctl status &lt;Unit名称&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果一切正常，您会看到我图中的两个红色标注的内容</p>
<blockquote>
<p>没看到第一个创建符号链接的提示也是正常的，只要下面的状态显示为<code>enabled</code>就行<br />
<img src= "/img/loading.gif" data-lazy-src="https://doc.natfrp.com/frpc/service/_images/systemd-4.png" alt="image.png" /></p>
</blockquote>
<h4 id="启动器的基本设置"><a class="markdownIt-Anchor" href="#启动器的基本设置"></a> 启动器的基本设置</h4>
<p>登录<a href="https://www.natfrp.com/">管理面板</a>，点击侧边栏的“软件下载”，下载推荐版本，如果打不开再换下面的传统启动器<br />
<img src= "/img/loading.gif" data-lazy-src="https://doc.natfrp.com/launcher/_images/usage-0.png" alt="image.png" /><br />
下载完毕后解压，点击<code>SakuraLauncher.exe</code>运行启动器（如果下载的是传统启动器运行<code>LegacyLauncher.exe</code>）进入用户信息界面，复制访问密钥（也叫token）到启动器点击登录<br />
<img src= "/img/loading.gif" data-lazy-src="https://doc.natfrp.com/launcher/_images/usage-3.png" alt="image.png" /><br />
创建隧道或在官网创建隧道，隧道创建成功后可通过启动器启动隧道<br />
<img src= "/img/loading.gif" data-lazy-src="https://doc.natfrp.com/launcher/_images/usage-7.png" alt="image.png" /><br />
启动成功后右下角会弹出通知，提示隧道连接方式。该通知可以在设置中通过 关闭隧道状态提示 选项禁用<br />
<img src= "/img/loading.gif" data-lazy-src="https://doc.natfrp.com/launcher/_images/usage-8.png" alt="image.png" /><br />
转到日志标签可以复制连接方式<br />
<img src= "/img/loading.gif" data-lazy-src="https://doc.natfrp.com/launcher/_images/usage-9.png" alt="image" /></p>
<h4 id="关于隧道"><a class="markdownIt-Anchor" href="#关于隧道"></a> 关于隧道</h4>
<h5 id="启动停止隧道"><a class="markdownIt-Anchor" href="#启动停止隧道"></a> 启动/停止隧道</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl &lt;start|stop&gt; &lt;Unit名称&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用上面命令启动/停止隧道，<code>start</code>是启动，<code>stop</code>是停止<br />
其中&lt;Unit名称&gt;为&lt;你的Token&gt;:&lt;隧道ID&gt;[隧道ID[隧道ID…]]<br />
如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl start frpc@wdnmdtoken666666:12345</span></span><br></pre></td></tr></table></figure>
<h5 id="查看隧道状态"><a class="markdownIt-Anchor" href="#查看隧道状态"></a> 查看隧道状态</h5>
<p>可以通过下面命令查看特定隧道状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl status &lt;Unit名称&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者通过下面命令查看所有隧道状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl list-units frpc@*</span></span><br></pre></td></tr></table></figure>
<h3 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h3>
<p>参考：<a href="https://doc.natfrp.com/#/"><code>Sakura Frp</code>帮助文档</a></p>
]]></content>
      <tags>
        <tag>raspberry</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云从业者认证课程笔记</title>
    <url>/958ae9f3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="云计算基础"><a class="markdownIt-Anchor" href="#云计算基础"></a> 云计算基础</h2>
<h3 id="数据中心的发展阶段"><a class="markdownIt-Anchor" href="#数据中心的发展阶段"></a> 数据中心的发展阶段</h3>
<h4 id="企业自建edc"><a class="markdownIt-Anchor" href="#企业自建edc"></a> 企业自建EDC</h4>
<ul>
<li>面临的挑战：
<ul>
<li>建设难度高、运维管理复杂</li>
<li>扩展调整不变、上线周期长</li>
</ul>
</li>
<li>TCO总拥有成本较高<br />
TCO = CapEx + OpeRx + OppCost</li>
<li>TVO总拥有价值不明显<br />
TVO = IT带来的业务价值与收益<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/14/image35de9be049c44531.png" alt="数据中心分层L0-L4" /></li>
<li>数据中心等级T1-T4</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">DC等级</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">可用性</th>
<th style="text-align:center">年宕机时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">T4</td>
<td style="text-align:center">双活容错</td>
<td style="text-align:center">99.995%</td>
<td style="text-align:center">0.8小时</td>
</tr>
<tr>
<td style="text-align:center">T3</td>
<td style="text-align:center">并行维护</td>
<td style="text-align:center">99.982%</td>
<td style="text-align:center">1.6小时</td>
</tr>
<tr>
<td style="text-align:center">T2</td>
<td style="text-align:center">冗余组件</td>
<td style="text-align:center">99.741%</td>
<td style="text-align:center">22.0小时</td>
</tr>
<tr>
<td style="text-align:center">T1</td>
<td style="text-align:center">基本容量</td>
<td style="text-align:center">99.671%</td>
<td style="text-align:center">28.8小时</td>
</tr>
</tbody>
</table>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">可</mi><mi mathvariant="normal">用</mi><mi mathvariant="normal">性</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">承</mi><mi mathvariant="normal">诺</mi><mi mathvariant="normal">服</mi><mi mathvariant="normal">务</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi><mo>−</mo><mi mathvariant="normal">宕</mi><mi mathvariant="normal">机</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow><mrow><mi mathvariant="normal">承</mi><mi mathvariant="normal">诺</mi><mi mathvariant="normal">服</mi><mi mathvariant="normal">务</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow></mfrac><mo>×</mo><mn>100</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">可用性=\frac{承诺服务时间-宕机时间}{承诺服务时间}\times 100\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">性</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1473309999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.802331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">承</span><span class="mord cjk_fallback mtight">诺</span><span class="mord cjk_fallback mtight">服</span><span class="mord cjk_fallback mtight">务</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">承</span><span class="mord cjk_fallback mtight">诺</span><span class="mord cjk_fallback mtight">服</span><span class="mord cjk_fallback mtight">务</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span><span class="mbin mtight">−</span><span class="mord cjk_fallback mtight">宕</span><span class="mord cjk_fallback mtight">机</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">%</span></span></span></span></p>
<ul>
<li>腾讯云DC必须在T3级以上</li>
</ul>
<h4 id="idc托管租用"><a class="markdownIt-Anchor" href="#idc托管租用"></a> IDC托管/租用</h4>
<ul>
<li>IDC资源出租（空间、主机、带宽）、分为<strong>托管型、租用型</strong></li>
<li><strong>相比EDC</strong>：成本更低、上线更快、标准化、电信级可靠性、运维管理等</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">类型/职责</th>
<th style="text-align:center">托管型</th>
<th style="text-align:center">租用型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">运行商提供</td>
<td style="text-align:center">机房资源 带宽接入 电力维护</td>
<td style="text-align:center">机房资源 带宽接入 电力公园 硬件投入 管理维护</td>
</tr>
<tr>
<td style="text-align:center">企业提供</td>
<td style="text-align:center">购买硬件 管理维护 业务系统</td>
<td style="text-align:center">业务系统</td>
</tr>
</tbody>
</table>
<h4 id="云计算对比"><a class="markdownIt-Anchor" href="#云计算对比"></a> 云计算对比</h4>
<table>
<thead>
<tr>
<th style="text-align:center">对比项</th>
<th style="text-align:center">自建EDC</th>
<th style="text-align:center">传统IDC</th>
<th style="text-align:center"><strong>云计算</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">租用范围</td>
<td style="text-align:center">0</td>
<td style="text-align:center">L0、L1，部分L2</td>
<td style="text-align:center"><strong>L0-L4</strong></td>
</tr>
<tr>
<td style="text-align:center">总体成本</td>
<td style="text-align:center">高</td>
<td style="text-align:center">中</td>
<td style="text-align:center"><strong>低</strong></td>
</tr>
<tr>
<td style="text-align:center">上线时间</td>
<td style="text-align:center">慢</td>
<td style="text-align:center">一般</td>
<td style="text-align:center"><strong>很快</strong></td>
</tr>
<tr>
<td style="text-align:center">运维管理</td>
<td style="text-align:center">复杂</td>
<td style="text-align:center">一般</td>
<td style="text-align:center"><strong>简单</strong></td>
</tr>
<tr>
<td style="text-align:center">扩展性</td>
<td style="text-align:center">很难</td>
<td style="text-align:center">一般</td>
<td style="text-align:center"><strong>弹性扩展</strong></td>
</tr>
<tr>
<td style="text-align:center">自主可控</td>
<td style="text-align:center">高</td>
<td style="text-align:center">中</td>
<td style="text-align:center"><strong>（公有云/私有云）</strong></td>
</tr>
</tbody>
</table>
<h4 id="云计算定义"><a class="markdownIt-Anchor" href="#云计算定义"></a> 云计算定义</h4>
<p><code>云计算是一种按需使用，按量付费的服务模式，</code>提供可用的、便捷的、按需的网络访问，可配置的计算资源共享池。</p>
<h3 id="云计算核心特征"><a class="markdownIt-Anchor" href="#云计算核心特征"></a> 云计算核心特征</h3>
<h4 id="云计算参考模型"><a class="markdownIt-Anchor" href="#云计算参考模型"></a> 云计算参考模型</h4>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/14/image876bbea127e53813.png" alt="云计算参考模型" /></p>
<h4 id="云计算关键特点"><a class="markdownIt-Anchor" href="#云计算关键特点"></a> 云计算关键特点</h4>
<ul>
<li>按需服务（资源/时间）</li>
<li>资源池化（提高利用率/可用性）</li>
<li>弹性扩展（业务需求/成本均衡）</li>
<li>泛网络访问（随时随地/高质量）</li>
<li>服务可度量（服务计费/精细化运营）</li>
</ul>
<h4 id="云计算服务模式"><a class="markdownIt-Anchor" href="#云计算服务模式"></a> 云计算服务模式</h4>
<ul>
<li>服务模式：
<ul>
<li>SaaS:Software as a Service软件即服务</li>
<li>PaaS:Platform as a Service平台即服务</li>
<li>IaaS:Infrastructure as a Service基础设施即服务</li>
</ul>
</li>
</ul>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⟶</mo></mrow><annotation encoding="application/x-tex">\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟶</span></span></span></span>租用范围变小、成本更低、上线更快、运维管理更简单、自主可控程度变小<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⟶</mo></mrow><annotation encoding="application/x-tex">\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟶</span></span></span></span></p>
<table>
<thead>
<tr>
<th style="text-align:center">自建系统</th>
<th style="text-align:center">IaaS</th>
<th style="text-align:center">PaaS</th>
<th style="text-align:center">SaaS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><font color=Purple>服务使用</font></td>
<td style="text-align:center"><font color=Purple>服务使用</font></td>
<td style="text-align:center"><font color=Purple>服务使用</font></td>
<td style="text-align:center"><font color=Purple>服务使用</font></td>
</tr>
<tr>
<td style="text-align:center"><font color=Purple>应用层</font></td>
<td style="text-align:center"><font color=Purple>应用层</font></td>
<td style="text-align:center"><font color=Purple>应用层</font></td>
<td style="text-align:center">应用层</td>
</tr>
<tr>
<td style="text-align:center"><font color=Purple>中间层</font></td>
<td style="text-align:center"><font color=Purple>中间层</font></td>
<td style="text-align:center">中间层</td>
<td style="text-align:center">中间层</td>
</tr>
<tr>
<td style="text-align:center"><font color=Purple>基础设施</font></td>
<td style="text-align:center">基础设施</td>
<td style="text-align:center">基础设施</td>
<td style="text-align:center">基础设施</td>
</tr>
</tbody>
</table>
<p>注：紫色部分需要云租户部署维护；黑色部分需要云厂商部署维护<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/14/image36f4392936c3804f.png" alt="云计算技术架构" /></p>
<h4 id="云计算部署方式"><a class="markdownIt-Anchor" href="#云计算部署方式"></a> 云计算部署方式</h4>
<ul>
<li>公有云：AWS 腾讯云</li>
<li>私有云：某行私有云 腾讯专有云</li>
<li>混合云：公有云+私有云 多云互通</li>
<li>行业云：金融行业云 教育行业云</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">编号</th>
<th style="text-align:center">对比项</th>
<th style="text-align:center">公有云</th>
<th style="text-align:center">私有云</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">云厂商与云租户</td>
<td style="text-align:center">不同组织，多租户</td>
<td style="text-align:center">相同组织，单租户</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">底层资源</td>
<td style="text-align:center">使用权属于客户 所有权属于服务商</td>
<td style="text-align:center">使用权属于客户 所有权属于客户</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">总体成本</td>
<td style="text-align:center">较低</td>
<td style="text-align:center">较高</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">运维复杂度</td>
<td style="text-align:center">较简单</td>
<td style="text-align:center">较复杂</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">自主可控</td>
<td style="text-align:center">较低</td>
<td style="text-align:center">较高</td>
</tr>
</tbody>
</table>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/15/image.png" alt="两种混合云" /></p>
<blockquote>
<p>行业云</p>
</blockquote>
<ul>
<li>业务痛点：
<ul>
<li>标准通用的公有云难以满足特定行业定制化需求，主要因业务理解不足、技术储备不够或定制成本太高。</li>
</ul>
</li>
<li>解决方案：
<ul>
<li>行业云：是针对特定行业深度优化的公有云，可以理解为产业互联网。</li>
<li>类型一：公有云厂商带领行业伙伴搞行业解决方案，如腾讯云智慧零售。</li>
<li>类型二：行业头部厂商整合IT能力出售给其他企业使用、如招银云创。</li>
</ul>
</li>
</ul>
<h3 id="云计算关键技术"><a class="markdownIt-Anchor" href="#云计算关键技术"></a> 云计算关键技术</h3>
<h4 id="计算虚拟化"><a class="markdownIt-Anchor" href="#计算虚拟化"></a> 计算虚拟化</h4>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/15/image9c68deef90ceb562.png" alt="虚拟化前后对比" /></p>
<h5 id="虚拟化分类"><a class="markdownIt-Anchor" href="#虚拟化分类"></a> 虚拟化分类</h5>
<ul>
<li>全虚拟化：GuestOS直接运行在虚拟化层上，无需进行任何修改，如ESXI</li>
<li>半虚拟化：GuestOS需要修改安装额外驱动，如Xen上Linux VM是半虚拟化需要安装PV Driver，而Windows VM是全虚拟化无需修改。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/15/image9c68deef90ceb562.png" alt="全虚拟化半虚拟化" /></li>
</ul>
<h5 id="计算虚拟化对比"><a class="markdownIt-Anchor" href="#计算虚拟化对比"></a> 计算虚拟化对比</h5>
<table>
<thead>
<tr>
<th style="text-align:center">对比项</th>
<th style="text-align:center">ESXi</th>
<th style="text-align:center">Xen</th>
<th style="text-align:center">KVM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">虚拟化种类</td>
<td style="text-align:center">全虚拟化</td>
<td style="text-align:center">全/半虚拟化</td>
<td style="text-align:center">全虚拟化</td>
</tr>
<tr>
<td style="text-align:center">CPU与内存虚拟化</td>
<td style="text-align:center">由ESXi内核完成</td>
<td style="text-align:center">由Xen内核完成</td>
<td style="text-align:center">由KVM内核完成</td>
</tr>
<tr>
<td style="text-align:center">磁盘/网络IO虚拟化</td>
<td style="text-align:center">由虚拟化内核完成</td>
<td style="text-align:center">由Dom0完成</td>
<td style="text-align:center">由QEMU完成</td>
</tr>
<tr>
<td style="text-align:center">虚拟化调度与管理</td>
<td style="text-align:center">由虚拟化内核完成</td>
<td style="text-align:center">由Dom0完成</td>
<td style="text-align:center">Linux进程管理</td>
</tr>
</tbody>
</table>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/15/imagee8cf4d5b563bae5a.png" alt="计算机虚拟化对比" /></p>
<h5 id="kvm"><a class="markdownIt-Anchor" href="#kvm"></a> KVM</h5>
<ul>
<li>自Linux2.6.20起，作为Linux内核模块发行。VM就是Linux进程，通过Linux进程管理调度。</li>
<li>KVM内核负责CPU与内存虚拟化，QEMU负责I/O虚拟化（设备模拟）；需要硬件虚拟化Intel-VT、AMD-V支持。</li>
<li>因KVM性能优、易扩展、易管理等优势，多厂商已逐渐从其他虚拟化平台迁移到KVM平台。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/15/image2c61a1e743d4edc2.png" alt="KVM" /></p>
<h4 id="分布式存储"><a class="markdownIt-Anchor" href="#分布式存储"></a> 分布式存储</h4>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/15/image81e016027d8aa600.png" alt="ServerSAN" /><br />
<strong>原理</strong>：</p>
<ul>
<li>通过分布存储层将服务器上分散的本地盘整合成统一的存储资源池</li>
<li>读写元承接应用I/O，控制元通过Hash算法确保I/O均匀分布到各节点，存储元负责写数据到对应的存储块。<br />
<strong>优势</strong>：</li>
<li>性价比：普通服务器上本地盘可保障高性能。</li>
<li>易扩展：实时线性的增加或减少节点或存储。</li>
<li>高可靠：数据保存3副本，快速故障迁移/修复。</li>
</ul>
<h4 id="网络虚拟化"><a class="markdownIt-Anchor" href="#网络虚拟化"></a> 网络虚拟化</h4>
<h5 id="sdn"><a class="markdownIt-Anchor" href="#sdn"></a> SDN</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/15/imagec8de2c80ee7d1bf2.png" alt="网络虚拟化SDN" /></p>
<h5 id="sdn与nfv对比"><a class="markdownIt-Anchor" href="#sdn与nfv对比"></a> SDN与NFV对比</h5>
<table>
<thead>
<tr>
<th style="text-align:center">对比项</th>
<th style="text-align:center">软件定义网络SDN</th>
<th style="text-align:center">网络功能虚拟化NFV</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">核心特征</td>
<td style="text-align:center">控制平面和数据平面分离；通用路由器和交换机；控制平面可编程；</td>
<td style="text-align:center">网络功能与硬件解耦；商业化硬件代替专用硬件；数据平main可编程；</td>
</tr>
<tr>
<td style="text-align:center">应用场景</td>
<td style="text-align:center">园区网、数据中心网；</td>
<td style="text-align:center">运营商基础网络</td>
</tr>
<tr>
<td style="text-align:center">优化点</td>
<td style="text-align:center">处理OSI中2-3层，优化交换机、路由器、无线等。</td>
<td style="text-align:center">处理OSI中4-7层，优化网络的功能、负载均衡，防火墙，WAN网优化等。</td>
</tr>
<tr>
<td style="text-align:center">收益</td>
<td style="text-align:center">成本优化、快速上线、简化运维、灵活扩展</td>
<td style="text-align:center">成本优化、快速上线、简化运维、灵活扩展</td>
</tr>
</tbody>
</table>
<h4 id="云管理平台"><a class="markdownIt-Anchor" href="#云管理平台"></a> 云管理平台</h4>
<ul>
<li>OpenStack是一个开源的云计算管理平台，其核心的服务组件如下：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">服务名称</th>
<th style="text-align:center">功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Nova</td>
<td style="text-align:center">计算服务</td>
</tr>
<tr>
<td style="text-align:center">Neutron</td>
<td style="text-align:center">网络服务</td>
</tr>
<tr>
<td style="text-align:center">Keystone</td>
<td style="text-align:center">认证与授权服务</td>
</tr>
<tr>
<td style="text-align:center">Glance</td>
<td style="text-align:center">镜像服务</td>
</tr>
<tr>
<td style="text-align:center">Swift</td>
<td style="text-align:center">对象存储服务</td>
</tr>
<tr>
<td style="text-align:center">Cinder</td>
<td style="text-align:center">块存储服务</td>
</tr>
<tr>
<td style="text-align:center">Horizon</td>
<td style="text-align:center">图形化管理界面</td>
</tr>
<tr>
<td style="text-align:center">Ceilometer</td>
<td style="text-align:center">监控计量服务</td>
</tr>
<tr>
<td style="text-align:center">Heat</td>
<td style="text-align:center">编排服务调度</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>优势：</p>
<ul>
<li>开源项目</li>
<li>兼容各种云平台</li>
<li>标准统一规范</li>
</ul>
</li>
<li>
<p>劣势：</p>
<ul>
<li>部署运维升级复杂</li>
<li>性能与扩展性交叉</li>
<li>容灾能力不足</li>
</ul>
</li>
<li>
<p>VStation是腾讯完全自主研发的云计算管理平台</p>
</li>
<li>
<p>设计原则</p>
<ul>
<li>平行扩展、简洁高效、异步、</li>
<li>fail-fast、无状态、高可用</li>
<li>共享信道（如以太网）</li>
<li>事务处理（如SQL）</li>
<li>逻辑抽离（如CGI）</li>
<li>易于追溯（如git）</li>
</ul>
</li>
<li>
<p>架构<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/15/image881ddcd7f07ecbaf.png" alt="腾讯云VStation架构" /></p>
</li>
<li>
<p>OpenStack对比VStation</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">对比项</th>
<th style="text-align:center">OpenStack</th>
<th style="text-align:center">VStation</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">代码量</td>
<td style="text-align:center">数千万行</td>
<td style="text-align:center">数十万行</td>
</tr>
<tr>
<td style="text-align:center">集群规模</td>
<td style="text-align:center">数千台</td>
<td style="text-align:center">数十万台</td>
</tr>
<tr>
<td style="text-align:center">容灾</td>
<td style="text-align:center">需要其他开源组件支持</td>
<td style="text-align:center">任一模块均可跨机房部署容灾</td>
</tr>
<tr>
<td style="text-align:center">运维</td>
<td style="text-align:center">需自主开发</td>
<td style="text-align:center">监控告警、可视化运维</td>
</tr>
<tr>
<td style="text-align:center">人员投入</td>
<td style="text-align:center">数百人</td>
<td style="text-align:center">数十人</td>
</tr>
<tr>
<td style="text-align:center">性能</td>
<td style="text-align:center">一般只支持不到100台同时创建</td>
<td style="text-align:center">可支持数万台虚拟机分钟级别的创建</td>
</tr>
</tbody>
</table>
<h4 id="应用虚拟化"><a class="markdownIt-Anchor" href="#应用虚拟化"></a> 应用虚拟化</h4>
<h5 id="容器技术"><a class="markdownIt-Anchor" href="#容器技术"></a> 容器技术</h5>
<p>__容器技术__是一种轻量级虚拟化技术，通过进程隔离，将应用软件及其运行所依赖的资源与配置打包封装，提供独立可移植的运行环境。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/15/image4e257d6c3c1d2b71.png" alt="容器技术" /></p>
<ul>
<li>Docker容器：
<ul>
<li>最流行的容器技术，标准化、强移植，目标:Build,Ship and Run Any APP,Anywhere.</li>
</ul>
</li>
<li>容器管理：
<ul>
<li>K8S（Kubernetes）是开源的容器编排管理调度技术。</li>
</ul>
</li>
<li>容器优势：
<ul>
<li>极其轻量：轻量打包，资源少，性能佳。</li>
<li>秒级部署：容器部署在毫秒与秒之间。</li>
<li>易于移植：标准化、一次构建，随处部署</li>
<li>弹性压缩：通过编排工具可快速扩展/收缩。</li>
</ul>
</li>
</ul>
<h4 id="大数据ai"><a class="markdownIt-Anchor" href="#大数据ai"></a> 大数据&amp;AI</h4>
<ul>
<li>未来互联网就是利用人工智能在云端处理大数据。–Pony Ma</li>
<li>应用：大数据（精准营销/决策支持/风控），AI（图像/语音/自动驾驶）。</li>
<li>大数据4V特点
<ul>
<li>Volume 数据量大</li>
<li>Variety 多样化</li>
<li>Velocity 高速产生</li>
<li>Value 价值密度低</li>
</ul>
</li>
<li>人工智能4要素
<ul>
<li>大数据</li>
<li>算法</li>
<li>计算力</li>
<li>边界清晰</li>
</ul>
</li>
</ul>
<h3 id="云计算影响与市场"><a class="markdownIt-Anchor" href="#云计算影响与市场"></a> 云计算影响与市场</h3>
<h4 id="云计算发展阶段"><a class="markdownIt-Anchor" href="#云计算发展阶段"></a> 云计算发展阶段</h4>
<ul>
<li>虚拟化 1960–2005
<ul>
<li>全/半/硬件辅助虚拟化</li>
<li>软硬解耦/资源池化</li>
<li>局部效率/可靠性提升</li>
</ul>
</li>
<li>服务化 2006–2018
<ul>
<li>技术能力-&gt;服务输出</li>
<li>IaaS、PaaS、SaaS</li>
<li>云服务大力扩展应用</li>
</ul>
</li>
<li>产业化 2018–
<ul>
<li>产业互联网</li>
<li>行业化生态与方案</li>
<li>上云迁移/云转型</li>
</ul>
</li>
<li>标准化 未来
<ul>
<li>公有云、私有云、多云互通，无缝迁移。</li>
<li>便利性：如水和电</li>
<li>云原生应用</li>
</ul>
</li>
</ul>
<h4 id="云计算产业影响"><a class="markdownIt-Anchor" href="#云计算产业影响"></a> 云计算产业影响</h4>
<ul>
<li>
<p>产业互联网是什么？</p>
<ul>
<li>互联网完成了人与人的连接，形成了消费者网络</li>
<li>互联网+将连接扩展到企业，形成了人与企业的外部连接，使得企业的商品与服务能够快速传递给用户</li>
<li>产业互联网进一步将连接从广度上扩展到不同产业企业间、从深度上纵深到企业内部，使得可以围绕用户需求重新组织要素和生产运营模式，更有效地实现供需匹配</li>
</ul>
</li>
<li>
<p>互联网</p>
<ul>
<li>连接人
<ul>
<li>以通信和社交为核心，实现人和人之间的信息高效交互</li>
</ul>
</li>
<li>C2C/B2C（用户-&gt;用户/企业-&gt;用户）</li>
</ul>
</li>
<li>
<p>互联网+</p>
<ul>
<li>连接服务
<ul>
<li>连接人和企业服务，实现服务高效便捷传递传递给用户</li>
</ul>
</li>
<li>B2B2C（企业-&gt;平台-&gt;用户）</li>
</ul>
</li>
<li>
<p>产业互联网</p>
<ul>
<li>连接产业
<ul>
<li>连接渗透到各企业和机构内部，实现用户需求和生产运营高效协同</li>
</ul>
</li>
<li>C2B2B2C（用户-&gt;平台-&gt;企业-&gt;用户）</li>
</ul>
</li>
<li>
<p>信息技术助力产业智变</p>
<ul>
<li>产业互联网不是某项单一的技术，而是以数据作为基础资料，综合运用互联网、移动互联网、物联网、大数据、云计算、人工智能等下一代信息技术，来促进传统产业转型升级，同时带动新兴产业发展</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/15/image06071e9e3dd5bc1c.png" alt="信息技术-&gt;产业互联网" /></p>
<ul>
<li>产业互联网框架的5维特点</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">维度</th>
<th style="text-align:center">传统产业</th>
<th style="text-align:center">产业互联网</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">市场</td>
<td style="text-align:center">单一</td>
<td style="text-align:center">融合：供应与需求精准匹配、产业与产业跨界协同</td>
</tr>
<tr>
<td style="text-align:center">产品</td>
<td style="text-align:center">物理</td>
<td style="text-align:center">数字：物理产品嵌套数字功能，产品软件化服务化</td>
</tr>
<tr>
<td style="text-align:center">运营</td>
<td style="text-align:center">人工</td>
<td style="text-align:center">人机：基于数据和算法的人机协同运营</td>
</tr>
<tr>
<td style="text-align:center">组织</td>
<td style="text-align:center">层级</td>
<td style="text-align:center">弹性：网络化、扁平化、自适应</td>
</tr>
<tr>
<td style="text-align:center">系统</td>
<td style="text-align:center">垂直</td>
<td style="text-align:center">互联：基础设施共享+综合技术运用+平台开放</td>
</tr>
</tbody>
</table>
<h4 id="云计算组织影响"><a class="markdownIt-Anchor" href="#云计算组织影响"></a> 云计算组织影响</h4>
<h5 id="客户"><a class="markdownIt-Anchor" href="#客户"></a> 客户</h5>
<ul>
<li>成本优化
<ul>
<li>采购&amp;运维成本</li>
<li>提高资源利用率</li>
<li>按需使用按量付费</li>
</ul>
</li>
<li>业务敏捷
<ul>
<li>缩短上线时间</li>
<li>资源弹性扩展</li>
<li>精准营销/风控</li>
</ul>
</li>
<li>精细运营
<ul>
<li>服务度量计费</li>
<li>成本优化控制</li>
<li>数据分析支持</li>
</ul>
</li>
<li>组织优化
<ul>
<li>聚焦核心业务</li>
<li>人员技能优化</li>
<li>组织文化调整</li>
</ul>
</li>
</ul>
<h5 id="厂商"><a class="markdownIt-Anchor" href="#厂商"></a> 厂商</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/15/image76850ddc3782d4e0.png" alt="云计算对厂商的影响" /></p>
<h5 id="企业上云诉求与挑战"><a class="markdownIt-Anchor" href="#企业上云诉求与挑战"></a> 企业上云诉求与挑战</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/15/image4a0c4aa05643009c.png" alt="企业上云看重点&amp;顾虑点" /></p>
<h4 id="中国云市场概况"><a class="markdownIt-Anchor" href="#中国云市场概况"></a> 中国云市场概况</h4>
<h5 id="中国云市场规模"><a class="markdownIt-Anchor" href="#中国云市场规模"></a> 中国云市场规模</h5>
<ul>
<li>中国云计算市场规模突破千亿，持续飞速增长<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/15/image0fa09a7ccf6f4811.png" alt="中国云市场规模" /></li>
</ul>
<h5 id="中国云市场份额"><a class="markdownIt-Anchor" href="#中国云市场份额"></a> 中国云市场份额</h5>
<ul>
<li>公有云/私有云的IT市场份额逐渐上升，上云迁移/云转型潜力/需求巨大。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/15/image4ad4ecde807136e4.png" alt="中国云市场份额" /></p>
<h5 id="中国云市场主流厂商"><a class="markdownIt-Anchor" href="#中国云市场主流厂商"></a> 中国云市场主流厂商</h5>
<table>
<thead>
<tr>
<th style="text-align:center">云厂商类型</th>
<th style="text-align:center">相对优势</th>
<th style="text-align:center">相对劣势</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">互联网企业</td>
<td style="text-align:center">很强技术研发实力，大规模系统实战经验、产品方案更全、规模优势</td>
<td style="text-align:center">私有云能力，服务能力</td>
</tr>
<tr>
<td style="text-align:center">传统IT企业</td>
<td style="text-align:center">研发能力强、运营商服务经验，私有云/传统IT，服务能力</td>
<td style="text-align:center">公有云能力、产品方案</td>
</tr>
<tr>
<td style="text-align:center">电信运营商</td>
<td style="text-align:center">拥有丰富的网络带宽与数据中心资源</td>
<td style="text-align:center">技术研发与运营能力</td>
</tr>
<tr>
<td style="text-align:center">国际企业</td>
<td style="text-align:center">先发优势明显（技术、市场与生态）</td>
<td style="text-align:center">市场监管与合规性，本土服务能力</td>
</tr>
<tr>
<td style="text-align:center">其它厂商</td>
<td style="text-align:center">专注于特定的细分领域或市场，联盟云</td>
<td style="text-align:center">技术研发实力、偏科、成本</td>
</tr>
</tbody>
</table>
<h3 id="腾讯云发展与优势"><a class="markdownIt-Anchor" href="#腾讯云发展与优势"></a> 腾讯云发展与优势</h3>
<h4 id="腾讯云发展阶段"><a class="markdownIt-Anchor" href="#腾讯云发展阶段"></a> 腾讯云发展阶段</h4>
<ul>
<li>
<p>腾讯云以卓越科技实力、丰富的实战经验助力各行各业数字化转型，为全球数百万的企业和开发者提供领先的云计算。</p>
</li>
<li>
<p>孵化期 1999–2010</p>
<ul>
<li>借助QQ高速发展，积累丰富的大规模系统开发运维经验。</li>
</ul>
</li>
<li>
<p>创业期 2010–2013</p>
<ul>
<li>2010年腾讯开放平台接入首批应用，腾讯云正式对外提供云服务。</li>
</ul>
</li>
<li>
<p>成长期 2013–2018</p>
<ul>
<li>2013年腾讯云面向所有用户开放，2014年腾讯云计算有限公司成立，2015年云+计划打造百亿生态圈。</li>
</ul>
</li>
<li>
<p>爆发期 2018–</p>
<ul>
<li>2018腾讯CSIG成立，全面发力产业互联网，产业智变、云启未来。</li>
</ul>
</li>
</ul>
<h4 id="腾讯云竞争优势"><a class="markdownIt-Anchor" href="#腾讯云竞争优势"></a> 腾讯云竞争优势</h4>
<ul>
<li>服务丰富
<ul>
<li>数百款云产品</li>
<li>190+解决方案</li>
<li>探索新技术方案</li>
</ul>
</li>
<li>全球布局
<ul>
<li>全球25个地域</li>
<li>53个可用区</li>
<li>1300+加速节点</li>
<li>80T整体带宽</li>
</ul>
</li>
<li>实战经验
<ul>
<li>大规模应用开发运维经验：QQ、微信、微信支付。</li>
</ul>
</li>
<li>研发能力
<ul>
<li>KVM贡献榜领先</li>
<li>云主机性能领先</li>
<li>数据库性能领先</li>
</ul>
</li>
<li>规模经济
<ul>
<li>采购成本低</li>
<li>运维成本低</li>
<li>服务性价比高</li>
</ul>
</li>
</ul>
<h4 id="腾讯云成功案例"><a class="markdownIt-Anchor" href="#腾讯云成功案例"></a> 腾讯云成功案例</h4>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<ol>
<li>数据中心发展阶段：云计算、IDC、EDC的差异。</li>
<li>云计算核心特征：5大特点、4种部署方式、3种服务模式。</li>
<li>云计算关键技术：计算虚拟化、分布式存储、网络虚拟化、云管理平台，容器、人工智能&amp;大数据等。</li>
<li>云计算影响与市场：发展阶段、产业互联网、主流云厂商及其特点。</li>
<li>腾讯云发展与优势：发展阶段、竞争优势、成功案例</li>
</ol>
<h2 id="云服务器"><a class="markdownIt-Anchor" href="#云服务器"></a> 云服务器</h2>
<h3 id="云服务器基础知识"><a class="markdownIt-Anchor" href="#云服务器基础知识"></a> 云服务器基础知识</h3>
<h4 id="地域与可用区"><a class="markdownIt-Anchor" href="#地域与可用区"></a> 地域与可用区</h4>
<ul>
<li>可用去（Zone）同一地域内电力和网络互相独立的物理数据中心。命名【城市+编号】。</li>
<li>地域（region）：一个独立的地理区域，命名【覆盖范围+机房所在城市】。</li>
<li>腾讯云目前全球支持25个区域、53个可用区</li>
</ul>
<h5 id="部署多地域多可用区"><a class="markdownIt-Anchor" href="#部署多地域多可用区"></a> 部署多地域多可用区</h5>
<ul>
<li>就近接入</li>
<li>隔离故障点</li>
<li>负载均衡</li>
<li>保证高可用</li>
</ul>
<h4 id="云服务器实例"><a class="markdownIt-Anchor" href="#云服务器实例"></a> 云服务器实例</h4>
<ul>
<li>实例：一台完整的云服务器（虚拟机），包含CPU、内存、磁盘、网络、操作系统等组件。</li>
<li>命名：系列.机型.规格（vCPU核数与内存大小） 如：S4.MEDIUM4(标准型S4，2核4GB)</li>
<li>管理：实例可通过控制台或API管理；实例配置可在线调整，重启生效。</li>
<li>安全：策略控制、安全组、登陆控制。</li>
</ul>
<h5 id="云服务器实例系列"><a class="markdownIt-Anchor" href="#云服务器实例系列"></a> 云服务器实例系列</h5>
<ul>
<li>不同系列的实例 <strong>硬件型号与规格</strong> 不同（CPU、内存、带宽，最大规格等）</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">标准型</th>
<th style="text-align:center">标准型S1</th>
<th style="text-align:center">标准型S2</th>
<th style="text-align:center">标准型S3</th>
<th style="text-align:center">标准型S4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CPU</td>
<td style="text-align:center">Intel Xeon CPU</td>
<td style="text-align:center">Xeon Broadwell(v4)</td>
<td style="text-align:center">Skylake 6133</td>
<td style="text-align:center">Skylake 6148</td>
</tr>
<tr>
<td style="text-align:center">内存</td>
<td style="text-align:center">DDR3</td>
<td style="text-align:center">DDR4</td>
<td style="text-align:center">最新DDR4</td>
<td style="text-align:center">最新DDR4</td>
</tr>
<tr>
<td style="text-align:center">内网带宽</td>
<td style="text-align:center">10Gbps</td>
<td style="text-align:center">10Gbps</td>
<td style="text-align:center">10Gbps</td>
<td style="text-align:center">25Gbps</td>
</tr>
<tr>
<td style="text-align:center">最大规格</td>
<td style="text-align:center">48核96GB</td>
<td style="text-align:center">56核224GB</td>
<td style="text-align:center">80核320GB</td>
<td style="text-align:center">72核228GB</td>
</tr>
</tbody>
</table>
<h5 id="云服务器实例类型"><a class="markdownIt-Anchor" href="#云服务器实例类型"></a> 云服务器实例类型</h5>
<ul>
<li>实例类型：通过不同的配置（CPU、内存、IO、网络等）提供不同的IO、计算、存储或网络能力，不同的应用场景。实例族指某一类实例类型的集合。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">实例类型</th>
<th style="text-align:center">主要特点</th>
<th style="text-align:center">应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">标准型</td>
<td style="text-align:center">均衡计算、内存与网络</td>
<td style="text-align:center">中小型Web应用、中小型数据库等、企业官网</td>
</tr>
<tr>
<td style="text-align:center">内存型</td>
<td style="text-align:center">大内存</td>
<td style="text-align:center">大量的内存操作、查找和计算的，分布式内存缓存等</td>
</tr>
<tr>
<td style="text-align:center">高IO型</td>
<td style="text-align:center">高IO、高吞吐量、低时延</td>
<td style="text-align:center">NoSQL数据库、群集化数据库、OLTP系统</td>
</tr>
<tr>
<td style="text-align:center">计算型</td>
<td style="text-align:center">高主频CPU，最高性价比</td>
<td style="text-align:center">高流量Web服务器、MMO游戏服务器、HPC</td>
</tr>
</tbody>
</table>
<h4 id="云服务器镜像"><a class="markdownIt-Anchor" href="#云服务器镜像"></a> 云服务器镜像</h4>
<ul>
<li>定义：
<ul>
<li>镜像就创建云服务器的模板（装机盘），提供云服务器实例所需的操作系统与软件配置等信息。</li>
</ul>
</li>
<li>作用：
<ul>
<li>批量部署环境</li>
<li>特定软件部署</li>
<li>运行环境备份</li>
</ul>
</li>
</ul>
<h5 id="镜像类型与优势"><a class="markdownIt-Anchor" href="#镜像类型与优势"></a> 镜像类型与优势</h5>
<ul>
<li>
<p>镜像类型</p>
<ul>
<li>公有镜像 服务市场镜像 自定义镜像 共享镜像</li>
</ul>
</li>
<li>
<p>镜像优势：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">对比项</th>
<th style="text-align:center">镜像部署</th>
<th style="text-align:center">手动部署</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">部署时长</td>
<td style="text-align:center">3-5分钟</td>
<td style="text-align:center">1-2天</td>
</tr>
<tr>
<td style="text-align:center">部署过程</td>
<td style="text-align:center">快速创建合适的云服务器</td>
<td style="text-align:center">自行选择软件、自行安装和调试</td>
</tr>
<tr>
<td style="text-align:center">安全性</td>
<td style="text-align:center">腾讯云测试审核、安全加固</td>
<td style="text-align:center">依赖开发部署人员的水平</td>
</tr>
<tr>
<td style="text-align:center">适用情况</td>
<td style="text-align:center">四种镜像部署</td>
<td style="text-align:center">完全自行配置，无基础设置</td>
</tr>
</tbody>
</table>
<h4 id="云服务器存储"><a class="markdownIt-Anchor" href="#云服务器存储"></a> 云服务器存储</h4>
<ul>
<li>按存储介质：普通云硬盘、高性能云硬盘、SSD云硬盘</li>
<li>按使用场景：系统盘、数据盘</li>
<li>按架构模式：本地盘、云硬盘、对象存储</li>
</ul>
<h4 id="云服务器演进"><a class="markdownIt-Anchor" href="#云服务器演进"></a> 云服务器演进</h4>
<ul>
<li>虚拟主机
<ul>
<li>网络服务器上划分出一定的磁盘空间供用户使用的主机。</li>
</ul>
</li>
<li>独立主机
<ul>
<li>客户独立租用一台服务器来展示自己得到网站。</li>
</ul>
</li>
<li>VPS主机
<ul>
<li>将一部服务器分割成多个虚拟专享服务器。</li>
</ul>
</li>
<li>云服务器
<ul>
<li>在一组集群主机上虚拟出多个类似独立主机的部分</li>
</ul>
</li>
</ul>
<h3 id="云服务器产品介绍"><a class="markdownIt-Anchor" href="#云服务器产品介绍"></a> 云服务器产品介绍</h3>
<h4 id="云服务器cvm"><a class="markdownIt-Anchor" href="#云服务器cvm"></a> 云服务器CVM</h4>
<ul>
<li>云服务器CVM（Cloud Virtual Machine）是一种弹性伸缩的计算服务。</li>
<li>特点：
<ul>
<li>弹性计算
<ul>
<li>分钟级扩展收缩</li>
</ul>
</li>
<li>灵活配置
<ul>
<li>配置CPU、内存、带宽等</li>
</ul>
</li>
<li>稳定可靠
<ul>
<li>可用性99.95%，3副本</li>
</ul>
</li>
<li>管理简单
<ul>
<li>API/CLI/控制台</li>
</ul>
</li>
<li>安全网络
<ul>
<li>VPC/ACL/安全组</li>
</ul>
</li>
<li>全面防护
<ul>
<li>木马/漏洞检测、暴力破解防护等</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="cvm应用电商促销业务"><a class="markdownIt-Anchor" href="#cvm应用电商促销业务"></a> CVM应用：电商促销业务</h5>
<ul>
<li>需求：
<ul>
<li>突发流量井喷</li>
<li>保障业务，控制成本</li>
</ul>
</li>
<li>方案：
<ul>
<li>标准型CVM、镜像；</li>
<li>弹性伸缩组：闲时缩减实例数、忙时增加实例数。</li>
</ul>
</li>
</ul>
<p>配置实例：</p>
<table>
<thead>
<tr>
<th style="text-align:center">产品</th>
<th style="text-align:center">数量</th>
<th style="text-align:center">规格</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CVM固定服务群</td>
<td style="text-align:center">20台</td>
<td style="text-align:center">标准型S2 2核4G</td>
</tr>
<tr>
<td style="text-align:center">CVM弹性伸缩组</td>
<td style="text-align:center">动态调整</td>
<td style="text-align:center">标准型S2 1核1G</td>
</tr>
</tbody>
</table>
<h4 id="gpu云服务器"><a class="markdownIt-Anchor" href="#gpu云服务器"></a> GPU云服务器</h4>
<ul>
<li>基于GPU应用的计算服务，具有实时高速的并行计算核浮点计算能力。</li>
<li>突破传统CPU限制、具有高并行、高吞吐、低时延等特点，科学计算中性能比传统架构提高50倍。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">GPU</th>
<th style="text-align:center">CPU</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">数千个加速核心</td>
<td style="text-align:center">几十个核心</td>
</tr>
<tr>
<td style="text-align:center">高效众多ALU，多线程超大并行吞吐</td>
<td style="text-align:center">复杂逻辑控制单元，强大ALU</td>
</tr>
<tr>
<td style="text-align:center">计算密集、并行计算</td>
<td style="text-align:center">逻辑控制、串行运算</td>
</tr>
</tbody>
</table>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/16/imagee2eed942a282498e.png" alt="GUP VS CPU" /></p>
<h5 id="gpu云服务器应用"><a class="markdownIt-Anchor" href="#gpu云服务器应用"></a> GPU云服务器应用</h5>
<ul>
<li>计算型GPU
<ul>
<li>深度学习：深度学习训练和推理，图像识别、语音识别等；</li>
<li>科学计算：计算金融学、地震分析、分子建模、基因组学等；</li>
<li>视频编解码：高清视频转码、安防视频监控、大型视频会议等。</li>
</ul>
</li>
<li>渲染型GPU
<ul>
<li>图新工作站：三维设计与渲染、影音动画制作、工程建模与仿真（CAD/CAE）、医学成像、游戏测试等</li>
<li>非线性编辑：电影和电视后期制作中的剪接操作，分别进行剪辑、字幕、特技、调色、包装等。</li>
</ul>
</li>
</ul>
<h6 id="gpu云服务器应用大数据分析"><a class="markdownIt-Anchor" href="#gpu云服务器应用大数据分析"></a> GPU云服务器应用：大数据分析</h6>
<ul>
<li>需求：
<ul>
<li>用于AI算法建模</li>
<li>高计算能力</li>
</ul>
</li>
<li>方案：
<ul>
<li>采用GPU实例</li>
<li>缩短深度学习的训练时间</li>
<li>避免昂贵硬件采购</li>
</ul>
</li>
</ul>
<h4 id="fpga云服务器"><a class="markdownIt-Anchor" href="#fpga云服务器"></a> FPGA云服务器</h4>
<ul>
<li>基于FPGA（Field Programmable Gate Array）现场可编程阵列的计算服务。可使用FPGA镜像在几分钟内部署FPGA实例，实现硬件加速。</li>
<li>3种FPGA实例类型：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">实例规格</th>
<th style="text-align:center">FPGA</th>
<th style="text-align:center">vCPU</th>
<th style="text-align:center">内存(GB)</th>
<th style="text-align:center">数据盘</th>
<th style="text-align:center">网络</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">FX2.7xlarge60</td>
<td style="text-align:center">1</td>
<td style="text-align:center">14核</td>
<td style="text-align:center">60</td>
<td style="text-align:center">SSD云盘</td>
<td style="text-align:center">万兆网络</td>
</tr>
<tr>
<td style="text-align:center">FX2.14xlarge120</td>
<td style="text-align:center">2</td>
<td style="text-align:center">28核</td>
<td style="text-align:center">120</td>
<td style="text-align:center">SSD云盘</td>
<td style="text-align:center">万兆网络</td>
</tr>
<tr>
<td style="text-align:center">FX2.28xlarge240</td>
<td style="text-align:center">4</td>
<td style="text-align:center">56核</td>
<td style="text-align:center">240</td>
<td style="text-align:center">SSD云盘</td>
<td style="text-align:center">万兆网络</td>
</tr>
</tbody>
</table>
<h5 id="fpga云服务器优势"><a class="markdownIt-Anchor" href="#fpga云服务器优势"></a> FPGA云服务器优势</h5>
<ul>
<li>产品优势
<ul>
<li>硬件加速
<ul>
<li>FPGA硬件加速器协同执行，运行速度比CPU服务器最高可提升20倍。</li>
</ul>
</li>
<li>硬件可编程
<ul>
<li>FPGA实例可重复编程，自定义硬件加速，无需重新设计硬件。</li>
</ul>
</li>
<li>产权交易平台
<ul>
<li>提供统一规范、安全可靠的FPGA硬件平台及FPGA服务市场</li>
</ul>
</li>
</ul>
</li>
<li>应用场景：深度学习模型、实时图像压缩处理等。</li>
</ul>
<h4 id="专用宿主主机cdh"><a class="markdownIt-Anchor" href="#专用宿主主机cdh"></a> 专用宿主主机CDH</h4>
<ul>
<li>专用宿主机（CVM Dedicated Host）提供独享宿主机资源的购买、搭载虚拟化平台，可创建云主机。</li>
<li>产品优势：
<ul>
<li>物理隔离</li>
<li>资源独享</li>
<li>安全合规</li>
<li>灵活配置</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/17/image.png" alt="CDH" /></p>
<h5 id="cdh应用场景"><a class="markdownIt-Anchor" href="#cdh应用场景"></a> CDH应用场景</h5>
<ul>
<li>金融业务：安全合规</li>
<li>高性能业务：资源独享</li>
</ul>
<h4 id="黑石物理服务器cpm"><a class="markdownIt-Anchor" href="#黑石物理服务器cpm"></a> 黑石物理服务器CPM</h4>
<ul>
<li>黑石物理服务器（Cloud Physical Machine）是一种按需购买、按量付费的物理服务器租赁服务。提供云端专用高性能、安全隔离的物理集群。
<ul>
<li>黑石Stack-V(深度整合VMware)</li>
<li>黑石ARM服务器(CPM for ARM)</li>
<li>黑石OpenPOWER服务器(CPM for OpenPOWER)</li>
</ul>
</li>
</ul>
<h5 id="黑石stack-v应用混合云"><a class="markdownIt-Anchor" href="#黑石stack-v应用混合云"></a> 黑石Stack-V应用：混合云</h5>
<ul>
<li>深度整合VMware套件，包括vSphere6.5、vSAN6.6、NSX6.3等，VMware许可。通过内网互联，整合众多腾讯云产品。</li>
</ul>
<h5 id="黑石arm应用移动游戏场景"><a class="markdownIt-Anchor" href="#黑石arm应用移动游戏场景"></a> 黑石ARM应用：移动游戏场景</h5>
<ul>
<li>需求：
<ul>
<li>移动端游戏研发需要大量真机测试，手机型号多迭代快。大型游戏安装包很大，户外运营体验成本很高。</li>
</ul>
</li>
<li>方案：
<ul>
<li>黑石ARM实例与移动端ARM的CPU采用相同指令集，可以在ARM上运行Android模拟器，用于游戏测试与运行。</li>
</ul>
</li>
</ul>
<h5 id="黑石openpower应用大数据"><a class="markdownIt-Anchor" href="#黑石openpower应用大数据"></a> 黑石OpenPOWER应用：大数据</h5>
<ul>
<li>需求：
<ul>
<li>大数据处理要求性能、高并发、高IO、大内存，高速传输等。</li>
</ul>
</li>
<li>方案：
<ul>
<li>黑石OpenPOWER具有高主频、高并发、线程多、内存带宽大、缓存大等特点。</li>
</ul>
</li>
</ul>
<h3 id="云服务计费方案"><a class="markdownIt-Anchor" href="#云服务计费方案"></a> 云服务计费方案</h3>
<h4 id="云服务计费模式"><a class="markdownIt-Anchor" href="#云服务计费模式"></a> 云服务计费模式</h4>
<ul>
<li>云服务器购买渠道
<ul>
<li>官网购买：通过登录腾讯云官网控制台进行云服务的配置购买。</li>
<li>API购买：通过API接口，输入相应的参数，购买CVM服务器。</li>
</ul>
</li>
<li>计费模式
<ul>
<li>包年包月，持续稳定
<ul>
<li>预付费、提支付费后预留充足的资源，能够享受大量折扣。</li>
</ul>
</li>
<li>按量计费，灵活方便
<ul>
<li>后付费、按实际使用量或时长计费，支持随时购买释放。</li>
</ul>
</li>
<li>阶梯计价，越多越省
<ul>
<li>采用阶梯计价模式，使用量越大，时长越长、单价越低。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="云服务价格计算器"><a class="markdownIt-Anchor" href="#云服务价格计算器"></a> 云服务价格计算器</h5>
<ul>
<li>可进行众多产品的选型配置，价格计算；直接购买或导出预算清单。</li>
</ul>
<h4 id="包年包月计费模式"><a class="markdownIt-Anchor" href="#包年包月计费模式"></a> 包年包月计费模式</h4>
<ul>
<li>包年包月：预付费购买，一次性支付一个月、多个月或多年的费用。支付成功后锁定云资源，直到到期未续费而销毁。</li>
<li>退款说明：每个账号默认享有一次五天内无理由全额退款。</li>
<li>适用场景：具有较稳定的业务场景，需要长期使用云资源，追求低成本。</li>
<li>计费流程：选购-&gt;订单-&gt;账单-&gt;到期处理-&gt;续费</li>
</ul>
<h5 id="包年包月停服回收机制"><a class="markdownIt-Anchor" href="#包年包月停服回收机制"></a> 包年包月停服回收机制</h5>
<style>
ul{text-align:left}
</style>
<table>
<thead>
<tr>
<th style="text-align:center">阶段</th>
<th style="text-align:center">时间段</th>
<th style="text-align:center">处理机制</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">到期预警</td>
<td style="text-align:center">到期前7天-到期前1天</td>
<td style="text-align:center"><div><ul ><li>未自动续费的云资源:系统给用户推送云资源到期续费的通知。</li><li>设置自动续费但账户余额不足以续费的云资源：<ul><li>推送自动续费余额不足需进行账户充值的通知。</li><li>通知以邮件和短信的方式推送，用户将收到4-7条通知。</li></ul></li></ul></div></td>
</tr>
<tr>
<td style="text-align:center">欠费预警</td>
<td style="text-align:center">到期当天</td>
<td style="text-align:center"><ul><li>未设置自动续费的云资源：若用户未续费，云资源将被停服（断网关机，仅保留数据）。</li><li>设置自动续费但账户余额不足以续费的云资源：若用户未充值，云资源将被停服（断网关机，仅保留数据）</li><li>停服后，系统推送停服通知。</li></ul></td>
</tr>
<tr>
<td style="text-align:center">资源停服</td>
<td style="text-align:center">到期当天停服后-到期后第7天</td>
<td style="text-align:center"><ul><li>可在产品控制台回收站或联系腾讯云客服，续费并找回云资源，恢复使用。</li><ul></td>
</tr>
<tr>
<td style="text-align:center">资源销毁</td>
<td style="text-align:center">到期后第8天</td>
<td style="text-align:center"><ul><li>若仍未进行续费，系统将销毁资源并清除数据，不可恢复。</li></ul></td>
</tr>
</tbody>
</table>
<h4 id="按量计费模式"><a class="markdownIt-Anchor" href="#按量计费模式"></a> 按量计费模式</h4>
<ul>
<li>按量计费：后付费，根据实际使用量或时长按一定的结算周期进行结算。可随时购买或销毁，可灵活升降配置。</li>
<li>应用场景：业务发展波动大，资源使用有临时性和突发性。</li>
<li>计费流程：充值-&gt;开通-&gt;冻结-&gt;解冻-&gt;账单-&gt;欠费-&gt;充值-&gt;……</li>
</ul>
<h5 id="按量计费冻结机制"><a class="markdownIt-Anchor" href="#按量计费冻结机制"></a> 按量计费冻结机制</h5>
<ul>
<li>开通按量计费资源时，系统根据资源计算周期及历史使用情况，预估冻结金额一定的账户金额，下次计费结算或资源释放时会解冻。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">结算周期</th>
<th style="text-align:center">冻结机制（不同产品略有不同，以官网具体产品说明为准）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">月结</td>
<td style="text-align:center"><ul><li>每月计算日，系统解冻之前的冻结费用，并进行扣费。</li><li>扣费结束后，系统按照如下计算公式再次冻结费用：</li><ul><li>设备类资源：上个月底最后一天实际使用的云服务量 $\times<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>30</mn></mrow><annotation encoding="application/x-tex">30</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span></span></span></span>\times$单价。</li><li>流量类资源：上月费用的1倍或1.2倍。</li></ul><li>调整配置时，已冻结的费用将解冻，并重新按新配置的单价进行冻结。</li><li>资源释放时，将会对冻结的费用在下个月的计算日（3号）前进行解冻。</li><ul></td>
</tr>
<tr>
<td style="text-align:center">时结或日结</td>
<td style="text-align:center"><ul><li>购买资源时，会冻结1~2个结算周期的费用</li><li>调整配置时，购买时冻结的费用将解冻，并重新按新配置的单价进行冻结。</li><li>资源释放时，将会对冻结的费用在下个月的结算日（3日）前进行解冻</li></ul></td>
</tr>
</tbody>
</table>
<h5 id="按量计费停服回收机制"><a class="markdownIt-Anchor" href="#按量计费停服回收机制"></a> 按量计费停服回收机制</h5>
<table>
<thead>
<tr>
<th style="text-align:center">阶段</th>
<th style="text-align:center">时间段</th>
<th style="text-align:center">处理机制(不同产品略有不同,以官网具体产品说明为准)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">生成账单</td>
<td style="text-align:center">结算周期</td>
<td style="text-align:center"><ul><li>根据生成账单执行扣费。若余额不足,进入欠费状态。系统推送欠费通知。</li></ul></td>
</tr>
<tr>
<td style="text-align:center">欠费保护期</td>
<td style="text-align:center"><ul>欠费后:<li>按时:2小时</li><li>按天:1天</li></ul></td>
<td style="text-align:center"><ul><li>资源可以继续使用,并计费。系统将推送欠费提醒。</li><li>账号充正前,不能新开通新服务和申请新资源。</li></ul></td>
</tr>
<tr>
<td style="text-align:center">欠费停服期</td>
<td style="text-align:center"><ul>按保护期后:<li>按时:24小时</li><li>按天:30天</li></ul></td>
<td style="text-align:center"><ul><li>系统推送停服通知,正在使用资源将强制停服关闭。</li><li>重新充值后,可以在控制台重新启动使用对应的服务</li><li>账号充正前,不能新开通新服务和申请新资源。</li></ul></td>
</tr>
<tr>
<td style="text-align:center">欠费状态资源回收</td>
<td style="text-align:center">超过欠费停服期</td>
<td style="text-align:center"><ul><li>停服资源配置将进行销毁和回收,且不可恢复。系统推送资源回收的通知。</li><li>账号充正前,不能新开通新服务和申请新资源。</li></ul></td>
</tr>
</tbody>
</table>
<h5 id="按量计费限制"><a class="markdownIt-Anchor" href="#按量计费限制"></a> 按量计费限制</h5>
<ul>
<li>不支持代理商代付</li>
<li>不支持代金券消费</li>
<li>不支持五天无理由退款</li>
<li>不支持切换包年包月</li>
</ul>
<h4 id="云服务器计费方案"><a class="markdownIt-Anchor" href="#云服务器计费方案"></a> 云服务器计费方案</h4>
<ul>
<li>CVM费用=实例费用（CPU+内存）+存储费用+带宽费用</li>
<li>计费模式：
<ul>
<li>包年包月：
<ul>
<li>预付费，一次支付一个月或多个月费用。</li>
</ul>
</li>
<li>按量计费：
<ul>
<li>后付费，按秒计费，按小时结算；</li>
<li>三级阶梯价：0<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo></mrow><annotation encoding="application/x-tex">&lt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span></span></span></span>T1$\leqslant<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>96</mn><mi>H</mi></mrow><annotation encoding="application/x-tex">96H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span></span></span></span>&lt;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">T2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">2</span></span></span></span>\leqslant<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>360</mn><mi>H</mi></mrow><annotation encoding="application/x-tex">360H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">6</span><span class="mord">0</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span></span></span></span>&lt;$T3</li>
<li>部分实例支持关机不收费。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="cvm计费方案"><a class="markdownIt-Anchor" href="#cvm计费方案"></a> CVM计费方案</h5>
<table>
<thead>
<tr>
<th style="text-align:center">计费模式</th>
<th style="text-align:center">包年包月</th>
<th style="text-align:center">按量计费</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">付款方式</td>
<td style="text-align:center">预付费</td>
<td style="text-align:center">购买时冻结费用,每小时结算</td>
</tr>
<tr>
<td style="text-align:center">计费单位</td>
<td style="text-align:center">元/月</td>
<td style="text-align:center">元/秒</td>
</tr>
<tr>
<td style="text-align:center">单价</td>
<td style="text-align:center">单价较低</td>
<td style="text-align:center">初始单价较高,阶梯降价;连续使用15天后 单价基本接近包年包月</td>
</tr>
<tr>
<td style="text-align:center">最少使用时长</td>
<td style="text-align:center">至少使用一个月</td>
<td style="text-align:center">按秒计费,按小时结算,随时购买释放</td>
</tr>
<tr>
<td style="text-align:center">实例配置调整</td>
<td style="text-align:center">随时升降配置。每个实例升配 无限制,最多进行5次降配。</td>
<td style="text-align:center">随时升降配置,次数无限制。</td>
</tr>
</tbody>
</table>
<h5 id="cvm实例购买限额"><a class="markdownIt-Anchor" href="#cvm实例购买限额"></a> CVM实例购买限额</h5>
<ul>
<li>包年包月CVM实例每月新购配额<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/17/image9a71510add46882b.png" alt="包年包月CVM每月新购配额" /></li>
<li>按量付费CVM实例每月新购配额<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/17/image3a6f88a251ea5593.png" alt="按量付费CVM实例每月新购配额" /></li>
</ul>
<h5 id="云服务器计费方案-2"><a class="markdownIt-Anchor" href="#云服务器计费方案-2"></a> 云服务器计费方案</h5>
<table>
<thead>
<tr>
<th style="text-align:center">产品</th>
<th style="text-align:center">CVM云服务器</th>
<th style="text-align:center">GPU云服务器</th>
<th style="text-align:center">FPGA云服务器</th>
<th style="text-align:center">CDH专用宿主机</th>
<th style="text-align:center">CPM黑石物理服务器</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">计费方式</td>
<td style="text-align:center"><ul><li>包年包月</li><li>按秒计费，按时结算</li></ul></td>
<td style="text-align:center"><ul><li>包年包月</li><li>按秒计费，按时结算</li></ul></td>
<td style="text-align:center"><ul><li>内测阶段申请使用</li><li>价格协商</li></ul></td>
<td style="text-align:center"><ul><li>包年包月</li></ul></td>
<td style="text-align:center"><ul><li>包年包月</li><li>按天计费，按月结算</li></ul></td>
</tr>
</tbody>
</table>
<h3 id="课程总结"><a class="markdownIt-Anchor" href="#课程总结"></a> 课程总结</h3>
<ul>
<li>云服务器基础：地域与可用区、实例、镜像、存储</li>
<li>云服务器产品：CVM、GPU、FPGA、CDH、CPM</li>
<li>云服务计费方案：按量计费、包年包月、回收机制、冻结机制</li>
</ul>
<h2 id="云网络"><a class="markdownIt-Anchor" href="#云网络"></a> 云网络</h2>
<h3 id="腾讯云私有网络服务"><a class="markdownIt-Anchor" href="#腾讯云私有网络服务"></a> 腾讯云私有网络服务</h3>
<h4 id="私有网络vpc"><a class="markdownIt-Anchor" href="#私有网络vpc"></a> 私有网络VPC</h4>
<ul>
<li>私有网络（Virtual Private Cloud）是用户自定义的、逻辑隔离的专属云上网络空间。
<ul>
<li>IP/网卡</li>
<li>子网</li>
<li>私有网段</li>
<li>路由表</li>
<li>安全组/ACL</li>
</ul>
</li>
</ul>
<h4 id="vpc私有网段"><a class="markdownIt-Anchor" href="#vpc私有网段"></a> VPC私有网段</h4>
<ul>
<li>私有网段：
<ul>
<li>10.0.0.0-10.255.255.255（掩码16-28）</li>
<li>172.16.0.0-172.31.255.255(掩码16-28)</li>
<li>192.168.0.0-192.168.255.255(掩码16-28)</li>
</ul>
</li>
<li>子网：
<ul>
<li>云资源（CVM，CDB等）需要部署在子网内；</li>
<li>通过DHCP获得私有IP，不能在公网路由；</li>
<li>每个子网可用IP数2^n-3（n为主机位的位数）。</li>
</ul>
</li>
</ul>
<h5 id="ip子网划分"><a class="markdownIt-Anchor" href="#ip子网划分"></a> IP子网划分</h5>
<ul>
<li>子网划分
<ul>
<li>IP地址组成（二进制）：<span style="border-bottom:1px solid black;">xxxx xxxx.xxxx xxxx.xxxx xxxx</span>.<span style="border-bottom:1px solid red;"><font color=red>xxxx xxxx</font></span><br />
              子网位置（掩码24）     <font color=red>主机位</font></li>
<li>子网划分：通过设置 <strong>子网掩码的位数</strong> 来决定可用的子网数目与主机IP数。如设子网掩码为n，子网数为2<sup>n，主机数，为2</sup>(32-n)-3。</li>
</ul>
</li>
<li>举例：10.3.5.7/24
<ul>
<li>二进制：0000 1010.0000 0011.0000 0101.<font color=red>0000 0111</font></li>
<li>子网网数量2<sup>24，主机数量2</sup>(32-24)-3；</li>
<li>网络地址10.3.5.0，广播地址：10.3.5.255，网关地址（可设定）。</li>
</ul>
</li>
</ul>
<h4 id="vpc路由表"><a class="markdownIt-Anchor" href="#vpc路由表"></a> VPC路由表</h4>
<ul>
<li>VPC内网互通，不同VPC内网不通。通过路由表实现子网间、子网与外部的路由通信。</li>
<li>路由表种类：
<ul>
<li>默认路由表</li>
<li>自定义路由表</li>
</ul>
</li>
<li>路由策略
<ul>
<li>目的端</li>
<li>下一跳类型</li>
<li>下一跳</li>
</ul>
</li>
</ul>
<h4 id="vpc访问控制"><a class="markdownIt-Anchor" href="#vpc访问控制"></a> VPC访问控制</h4>
<ul>
<li>网络ACL：控制进出子网的数据流（入站/出站）。</li>
<li>安全组：配置放通或拒绝的端口/协议。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image.png" alt="VPC访问控制" /></li>
</ul>
<h5 id="安全组与网络acl"><a class="markdownIt-Anchor" href="#安全组与网络acl"></a> 安全组与网络ACL</h5>
<table>
<thead>
<tr>
<th style="text-align:center">安全组</th>
<th style="text-align:center">网络ACL</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CVM实例级别的流量控制(第一防御层)</td>
<td style="text-align:center">子网级别的流量控制(第二防御层)</td>
</tr>
<tr>
<td style="text-align:center">支持允许规则和拒绝规则</td>
<td style="text-align:center">支持允许规则和拒绝规则</td>
</tr>
<tr>
<td style="text-align:center">有状态:返回数据流会被自动允许,不受任何规则影响</td>
<td style="text-align:center">无状态:返回数据流必须被规则明确允许</td>
</tr>
<tr>
<td style="text-align:center">只有在启动CVM实例的同时,指定安全组或稍后将安全组与实例关联的情况下,操作才会被应用到实例</td>
<td style="text-align:center">自动应用到关联子网内的所有CVM实例(备份</td>
</tr>
<tr>
<td style="text-align:center">防御层,若CVM实例为绑定安全组,此处可以做备份防御</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h4 id="弹性网卡eni"><a class="markdownIt-Anchor" href="#弹性网卡eni"></a> 弹性网卡ENI</h4>
<ul>
<li>弹性网卡（Elastic Network Interface）绑定私有网络内云服务器的一种弹性网络接口，可在云服务器间自由迁移。</li>
<li>ENI优势：
<ul>
<li>多网卡/IP</li>
<li>灵活迁移</li>
<li>网络隔离</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image7524637cd17fcb2f.png" alt="ENI可绑定任意CVM" /></p>
<h3 id="腾讯云网络连接服务"><a class="markdownIt-Anchor" href="#腾讯云网络连接服务"></a> 腾讯云网络连接服务</h3>
<h4 id="网络连接服务"><a class="markdownIt-Anchor" href="#网络连接服务"></a> 网络连接服务</h4>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/imagebdfffa8598189b10.png" alt="网络连接服务" /></p>
<h4 id="公网接入"><a class="markdownIt-Anchor" href="#公网接入"></a> 公网接入</h4>
<h5 id="弹性ip"><a class="markdownIt-Anchor" href="#弹性ip"></a> 弹性IP</h5>
<ul>
<li>VPC里的服务器分配私有IP，无法访问公网，可以绑定公网IP来实现。</li>
<li><strong>普通公网IP</strong>：在CVM上申请绑定，与账号无关，解绑后立即释放，无法找回。</li>
<li><strong>弹性公网IP</strong>：（Elastic IP，EIP）</li>
<li>EIP可独立申请，绑定CVM、或NAT网关实例。</li>
<li>与账号相关，解绑后继续保留，可重新绑定；</li>
<li>可通过API/控制台主动释放或欠费自动释放。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image23d86f4df3ac43bc.png" alt="EIP" /></p>
<h5 id="公网网关"><a class="markdownIt-Anchor" href="#公网网关"></a> 公网网关</h5>
<ul>
<li>没有公网IP云服务器，可通过位于不同子网的公网网关访问Internet。</li>
<li>公网网关就是开启了公网转发功能的云主机。</li>
<li>只能在购买服务器时进行设置。</li>
<li>需要建立独立的网关子网。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image2bd1b29fcb394c54.png" alt="公网网关" /></p>
<h5 id="nat网关"><a class="markdownIt-Anchor" href="#nat网关"></a> NAT网关</h5>
<ul>
<li>NAT网关：
<ul>
<li>通过IP地址转换提供Internet访问服务；</li>
<li>SNAT（源网络地址转换）；</li>
<li>DNAT（目的网络地址转换）；</li>
<li>网关流控、流量告警、共享带宽包。</li>
</ul>
</li>
<li>NAT网管类型
<ul>
<li>小型（最大100万连接数）</li>
<li>中型（最大300万连接数）</li>
<li>大型（最大1000万连接数）</li>
</ul>
</li>
</ul>
<h5 id="nat网关对比公网网关"><a class="markdownIt-Anchor" href="#nat网关对比公网网关"></a> NAT网关对比公网网关</h5>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">NAT网关</th>
<th style="text-align:center">公网网关</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">可用性</td>
<td style="text-align:center">双机热备,自动热切换</td>
<td style="text-align:center">手动切换故障网关</td>
</tr>
<tr>
<td style="text-align:center">公网带宽</td>
<td style="text-align:center">最大5Gbps</td>
<td style="text-align:center">取决于云服务器网络带宽</td>
</tr>
<tr>
<td style="text-align:center">公网IP</td>
<td style="text-align:center">最多绑定10个弹性IP</td>
<td style="text-align:center">1个弹性IP或普通公网IP</td>
</tr>
<tr>
<td style="text-align:center">公网限速</td>
<td style="text-align:center">无</td>
<td style="text-align:center">取决于云服务器限速</td>
</tr>
<tr>
<td style="text-align:center">最大连接数</td>
<td style="text-align:center">1000万</td>
<td style="text-align:center">50万</td>
</tr>
<tr>
<td style="text-align:center">内网IP</td>
<td style="text-align:center">不占用VPC用户的内网IP</td>
<td style="text-align:center">占用子网内IP</td>
</tr>
<tr>
<td style="text-align:center">安全组</td>
<td style="text-align:center">不支持安全组绑定</td>
<td style="text-align:center">支持安全组绑定</td>
</tr>
</tbody>
</table>
<h4 id="企业dc连接"><a class="markdownIt-Anchor" href="#企业dc连接"></a> 企业DC连接</h4>
<h5 id="专线接入"><a class="markdownIt-Anchor" href="#专线接入"></a> 专线接入</h5>
<ul>
<li>专线接入（Direct Connect，DC）提供与公网完全隔离的物理专线接企业DC与腾讯云。</li>
<li><strong>产品组成</strong>：物理专线、专用通道、专用网关</li>
<li><strong>产品优势</strong>：
<ul>
<li>网络质量保证</li>
<li>多地域接入</li>
<li>多端口多协议</li>
<li>主备双路接入</li>
</ul>
</li>
<li><strong>应用场景</strong>：
<ul>
<li>混合云</li>
<li>DC容灾<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image7249d9816a1ad106.png" alt="专线接入" /></li>
</ul>
</li>
</ul>
<h5 id="vpn连接"><a class="markdownIt-Anchor" href="#vpn连接"></a> VPN连接</h5>
<ul>
<li>VPN连接（VPN Connections）在Internet上构建一条安全加密的网络隧道，实现本地DC与腾讯云上资源连通的网络服务。
<ul>
<li><strong>产品组成</strong>：VPN网关、对端网关、VPN通道。</li>
<li><strong>产品优势</strong>：安全可靠通信、快速弹性部署、监控告警与流量控制。</li>
<li><strong>加密协议</strong>：IKE（秘钥交换协议）和IPsec对传输数据进行加密。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image69c09cc92723a934.png" alt="VPN连接" /></li>
</ul>
</li>
</ul>
<h5 id="专线接入对比vpn连接"><a class="markdownIt-Anchor" href="#专线接入对比vpn连接"></a> 专线接入对比VPN连接</h5>
<table>
<thead>
<tr>
<th style="text-align:center">对比项</th>
<th style="text-align:left">专线接入</th>
<th style="text-align:center">VPN连接</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">网络质量</td>
<td style="text-align:left">时延:99.5%保障,固定路由配置免去拥堵或绕行。<br>带宽:单线路最大支持10Gbps,多链路负载均衡。</td>
<td style="text-align:center">时延:Internet网络高峰时,路由可能绕行。<br>带宽:单网关最大支持100Mbps,可多VPN网关配置。</td>
</tr>
<tr>
<td style="text-align:center">高可靠</td>
<td style="text-align:left">接入与转发设备采用分布式集群化部署,双线接入,实现全链路高可靠,可用性99.95%。</td>
<td style="text-align:center">采用网关双机热备份配置,具备网关层高可靠,Internet网络链路不可靠。</td>
</tr>
<tr>
<td style="text-align:center">安全性</td>
<td style="text-align:left">独占网络链路,无数据泄露风险,安全性高,满足金融、政企等高安全要求</td>
<td style="text-align:center">基于IPsec与IKE加密传输,可以满足绝大多数网络传输安全性要求。</td>
</tr>
<tr>
<td style="text-align:center">NAT支持</td>
<td style="text-align:left">支持在网关上配置NAT</td>
<td style="text-align:center">暂不支持</td>
</tr>
<tr>
<td style="text-align:center">部署时间</td>
<td style="text-align:left">申请部署需要数周时间</td>
<td style="text-align:center">实时部署,即买即用。</td>
</tr>
</tbody>
</table>
<h4 id="对等连接"><a class="markdownIt-Anchor" href="#对等连接"></a> 对等连接</h4>
<ul>
<li>对等连接（Peering Connection,PC）是一种大带宽、高质量的云上资源互通服务，支持多VPC、多区域、多账户、异构网络互通等。对等连接互通性不传递。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image8c8846f85adc66ca.png" alt="对等连接" /></p>
<h5 id="对等连接限制"><a class="markdownIt-Anchor" href="#对等连接限制"></a> 对等连接限制</h5>
<ul>
<li>VPC对等连接的互通性不传递</li>
<li>跨账号对等连接需要对端确认</li>
<li>对等连接两端VPC网段不能重叠<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/imagee9352bd913bed5d8.png" alt="对等连接限制" /></li>
</ul>
<h5 id="对等连接对比"><a class="markdownIt-Anchor" href="#对等连接对比"></a> 对等连接对比</h5>
<table>
<thead>
<tr>
<th style="text-align:center">比较项</th>
<th style="text-align:center">同地域对等连接</th>
<th style="text-align:center">跨地域对等连接</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">底层架构</td>
<td style="text-align:center">基于腾讯云单地域本地内网</td>
<td style="text-align:center">基于腾讯云跨地域的内部MPLS网络</td>
</tr>
<tr>
<td style="text-align:center">最大带宽</td>
<td style="text-align:center">5Gbps;黑石互联:1Gbps</td>
<td style="text-align:center">最大1Gbps</td>
</tr>
<tr>
<td style="text-align:center">计费规则</td>
<td style="text-align:center">免费</td>
<td style="text-align:center">网络带宽按天计费。</td>
</tr>
<tr>
<td style="text-align:center">链路可用性</td>
<td style="text-align:center">99.50%</td>
<td style="text-align:center">白金:99.95%;金:99.50%;银:99.00%</td>
</tr>
<tr>
<td style="text-align:center">跨账号连接</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">访问权限</td>
<td style="text-align:center">互相访问全部资源</td>
<td style="text-align:center">互相访问全部资源</td>
</tr>
<tr>
<td style="text-align:center">功能限制</td>
<td style="text-align:center">两端VPC网段不可重复<br>多个对等连接间互不影响。</td>
<td style="text-align:center">两端VPC网段不可重复<br>一个VPC连接多个VPC(网段不可重复)</td>
</tr>
<tr>
<td style="text-align:center">应用场景</td>
<td style="text-align:center">不同VPC互通</td>
<td style="text-align:center">跨地域VPC互通、两地三中心容灾</td>
</tr>
</tbody>
</table>
<h4 id="云联网ccn"><a class="markdownIt-Anchor" href="#云联网ccn"></a> 云联网CCN</h4>
<ul>
<li>云联网（Cloud Connect Network,CCN）提供云上VPC间、VPC与企业DC间全网互联服。可将VPC和专线网关实例加入云联网实现全网互通。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">对比项</th>
<th style="text-align:center">对等连接/专线接入</th>
<th style="text-align:center">云联网CCN</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">连接性</td>
<td style="text-align:center">单点互联</td>
<td style="text-align:center">一次接入、全网互联，就近接入</td>
</tr>
<tr>
<td style="text-align:center">网络重叠</td>
<td style="text-align:center">VPC网段不重叠</td>
<td style="text-align:center">VPC网段可重叠、子网不重叠</td>
</tr>
<tr>
<td style="text-align:center">配置</td>
<td style="text-align:center">手动配置管理</td>
<td style="text-align:center">智能学习与调度，路由自动下发。</td>
</tr>
</tbody>
</table>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image13a93098604c133f.png" alt="云联网" /></p>
<h5 id="云联网限制"><a class="markdownIt-Anchor" href="#云联网限制"></a> 云联网限制</h5>
<ul>
<li><strong>与对等连接互通不传递性</strong></li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/imagec1fac5d95bb54316.png" alt="云联网限制" /></p>
<ul>
<li><strong>路由限制</strong>：
<ul>
<li>不同VPC中相同或包含的子网不能互通；</li>
<li>不同VPC CIDR有重叠，若其子网不同，可以互通；</li>
<li>若子网出现冲突，则最先关联云联网的实例生效，后关联的无效。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">资源</th>
<th style="text-align:center">限制（个）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">每个账号可以创建的云联网个数</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">每个云联网实例可以绑定的网络实例数</td>
<td style="text-align:center">25</td>
</tr>
<tr>
<td style="text-align:center">每个云联网路由条目数量</td>
<td style="text-align:center">无限制</td>
</tr>
</tbody>
</table>
<h5 id="云联网应用混合云"><a class="markdownIt-Anchor" href="#云联网应用混合云"></a> 云联网应用：混合云</h5>
<ul>
<li>混合云：一次接入全网互联</li>
<li>游戏加速：全球布局、就近接入</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/imagef2dfde785a51034a.png" alt="云联网应用：混合云" /></p>
<h3 id="腾讯云负载均衡服务"><a class="markdownIt-Anchor" href="#腾讯云负载均衡服务"></a> 腾讯云负载均衡服务</h3>
<h4 id="负载均衡clb"><a class="markdownIt-Anchor" href="#负载均衡clb"></a> 负载均衡CLB</h4>
<ul>
<li><strong>负载均衡（Cloud Load Balancer,CLB）</strong> 提供安全快捷的流量分法服务。</li>
<li><strong>工作原理</strong>：
<ul>
<li><strong>虚拟VIP</strong>：统一对外服务IP，接受访问请求；</li>
<li><strong>CLB实例</strong>：通过监听器监听并分发流量；</li>
<li><strong>后端CVM</strong>：处理访问请求并返回结果；</li>
<li><strong>健康检查</strong>：探测后端CVM的健康状态；</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image24c0a7ca91d632e9.png" alt="负载均衡CLB" /></p>
<h5 id="负载均衡优势"><a class="markdownIt-Anchor" href="#负载均衡优势"></a> 负载均衡优势</h5>
<ul>
<li><strong>高性能/高吞吐</strong>：
<ul>
<li>单集群最大支持1.2亿连接数；</li>
<li>单集群流量峰值40Gb/s，每秒处理包量达600万；</li>
</ul>
</li>
<li><strong>高可用性</strong> 99.95%
<ul>
<li>节点健康检查、自动切换；</li>
<li>跨可用区部署，机房级容灾；</li>
</ul>
</li>
<li><strong>安全保障</strong>
<ul>
<li>对每个租户的流量进行严格隔离；</li>
<li>提供主动DDoS防护能力。</li>
</ul>
</li>
</ul>
<h4 id="流量分发算法"><a class="markdownIt-Anchor" href="#流量分发算法"></a> 流量分发算法</h4>
<h5 id="多协议转发"><a class="markdownIt-Anchor" href="#多协议转发"></a> 多协议转发</h5>
<p><strong>四层负载均衡</strong><br />
监听TCP与UDP，基于端口+VIP转发<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image08e6573395c7b52b.png" alt="四层负载均衡" /></p>
<p><strong>七层负载均衡</strong><br />
监听HTTP与HTTPS，基于内容（域名/URL）转发<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image7fa5d7b867d9ad31.png" alt="七层负载均衡" /></p>
<h5 id="流量分发算法-2"><a class="markdownIt-Anchor" href="#流量分发算法-2"></a> 流量分发算法</h5>
<table>
<thead>
<tr>
<th style="text-align:center">算法</th>
<th style="text-align:center">加权轮询WRRS</th>
<th style="text-align:center">加权最小链接WLCS</th>
<th style="text-align:center">原地址散列IP-Hash</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">具体说明</td>
<td style="text-align:center">根据新连接数调度，权值高的服务器先分配连接，处理更多连接，依次轮询。</td>
<td style="text-align:center">设置权值为wi，当前连接数为ci，流量分派到ci/wi值最小的服务器。</td>
<td style="text-align:center">根据请求的源IP地址，使用散列键（Hash Key）从静态分配散列表找出对应服务器。</td>
</tr>
<tr>
<td style="text-align:center">适用场景</td>
<td style="text-align:center">服务时间基本相同、短链接（HTTP）。</td>
<td style="text-align:center">长连接/服务时间不同，如FTP；新增后端服务器。</td>
<td style="text-align:center">固定分派、会话保持，适合无cookie功能的TCP协议。</td>
</tr>
<tr>
<td style="text-align:center">不适用</td>
<td style="text-align:center">连接的服务时间差距大。</td>
<td style="text-align:center">最小连接数和会话保持不能同时开启</td>
<td style="text-align:center">服务器数量变化或该服务器不可用时有影响。</td>
</tr>
</tbody>
</table>
<h4 id="负载均衡类型"><a class="markdownIt-Anchor" href="#负载均衡类型"></a> 负载均衡类型</h4>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image3cb86f447a199624.png" alt="负载均衡类型" /></p>
<h5 id="公网clb对比内网clb"><a class="markdownIt-Anchor" href="#公网clb对比内网clb"></a> 公网CLB对比内网CLB</h5>
<ul>
<li>公网CLB（公网入口）
<ul>
<li>提供统一公网入口</li>
<li>服务器故障容错恢复</li>
<li>不同运营商就近接入</li>
</ul>
</li>
<li>内网CLB（内网分发）
<ul>
<li>内网访问流量分法</li>
<li>服务器故障容错恢复</li>
<li>屏蔽IP、透明化服务</li>
</ul>
</li>
</ul>
<h4 id="clb应用场景"><a class="markdownIt-Anchor" href="#clb应用场景"></a> CLB应用场景</h4>
<h5 id="流量分发扩展"><a class="markdownIt-Anchor" href="#流量分发扩展"></a> 流量分发/扩展</h5>
<ul>
<li><strong>需求</strong>：
<ul>
<li>业务波峰波谷明显，弹性调控后端资源；</li>
<li>业务流量峰值高，需构建低成本架构；</li>
<li>如电商促销、金融系统、游戏服务等。</li>
</ul>
</li>
<li><strong>方案</strong>：
<ul>
<li>负载均衡与弹性伸缩；</li>
<li>按需横向扩展/收缩。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/imagea3584fa1aac62232.png" alt="流量分发/扩展" /></li>
</ul>
</li>
</ul>
<h5 id="业务访问分离"><a class="markdownIt-Anchor" href="#业务访问分离"></a> 业务访问分离</h5>
<ul>
<li>通过CLB与CDN将不同流量分发到对应集群，实现文本、图片与视频访问分离，以获得最优访问体验与性价比。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image74eb96cfb367f5e2.png" alt="业务访问分离" /></p>
<h5 id="出入流量分离"><a class="markdownIt-Anchor" href="#出入流量分离"></a> 出入流量分离</h5>
<ul>
<li>内部发起与外部访问流量分离、设置不同处理与安全策略。
<ul>
<li>主动公网访问：通过NAT网关进行私有IP与公有IP地址转换。</li>
<li>响应外网请求：通过负载均衡分发流量，屏蔽后端服务器。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/imagedc9991275bb31b18.png" alt="出入流量分离" /></li>
</ul>
</li>
</ul>
<h5 id="混合云"><a class="markdownIt-Anchor" href="#混合云"></a> 混合云</h5>
<ul>
<li>通过负载均衡将业务流量分发到企业数据中心、或共有云上。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image3c695ffe073cf675.png" alt="混合云" /></p>
<h3 id="腾讯云网络产品的计费方案"><a class="markdownIt-Anchor" href="#腾讯云网络产品的计费方案"></a> 腾讯云网络产品的计费方案</h3>
<h4 id="免费的网络产品"><a class="markdownIt-Anchor" href="#免费的网络产品"></a> 免费的网络产品</h4>
<ul>
<li>免费网络产品
<ul>
<li>私有网络</li>
<li>子网</li>
<li>路由表</li>
<li>弹性网卡</li>
<li>安全组</li>
<li>网络ACL</li>
</ul>
</li>
</ul>
<h4 id="公网接入计费方案"><a class="markdownIt-Anchor" href="#公网接入计费方案"></a> 公网接入计费方案</h4>
<h5 id="公网ip计费方案"><a class="markdownIt-Anchor" href="#公网ip计费方案"></a> 公网IP计费方案</h5>
<ul>
<li><strong>免费使用</strong>：
<ul>
<li>普通公网IP；</li>
<li>已绑定CVM或NAT网关使用的弹性IP。</li>
</ul>
</li>
<li><strong>弹性IP收费</strong>：
<ul>
<li>未绑定CVM或NAT网关使用时收取闲置占用费。</li>
<li>不足1小时按1小时计算，每小时结算。</li>
<li>建议及时将不使用的弹性IP释放，保证IP资源合理利用，并节省费用。</li>
</ul>
</li>
</ul>
<h5 id="公网网关计费"><a class="markdownIt-Anchor" href="#公网网关计费"></a> 公网网关计费</h5>
<ul>
<li>公网网关本质上是一个云服务器实例，因此遵循云服务器的计费方案。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">付费模式</th>
<th style="text-align:center">特性</th>
<th style="text-align:center">适合场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">包年包月</td>
<td style="text-align:center">预付费</td>
<td style="text-align:center">适合业务量较稳定的长周期业务，费用按较量计费模式更为低廉。</td>
</tr>
<tr>
<td style="text-align:center">按量计费</td>
<td style="text-align:center">后付费</td>
<td style="text-align:center">适合业务量有瞬间大幅波动的场景，费用按实际使用量计算，无需提前支付费用。</td>
</tr>
</tbody>
</table>
<h5 id="nat网关计费"><a class="markdownIt-Anchor" href="#nat网关计费"></a> NAT网关计费</h5>
<ul>
<li><strong>费用组成</strong>:NAT网关费用=网关租用费+外网流量费</li>
<li><strong>网关租用费</strong>：按小时计费、按网关类型（大、中、小型）定价不同。
<ul>
<li><strong>外网流量费</strong>：访问Internet产生的流量费用。</li>
<li>按带宽计费：按公网传输速率（单位为Mbps）计费；</li>
<li>按流量计费:按公网传输的数据总量（单位为GB）计费。</li>
</ul>
</li>
</ul>
<h4 id="网络链接计费方案"><a class="markdownIt-Anchor" href="#网络链接计费方案"></a> 网络链接计费方案</h4>
<h5 id="对等连接计费"><a class="markdownIt-Anchor" href="#对等连接计费"></a> 对等连接计费</h5>
<ul>
<li>同地域对等连接免费使用。</li>
<li>跨地域对等连接收费方式如下二选一：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">计费方式</th>
<th style="text-align:left">计费说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>日峰值计费</strong></td>
<td style="text-align:left"><ul><li>每日费用=当日带宽峰值*阶梯单价；</li><li>每日带宽峰值按每5min平均带宽计算；</li><li>按天计费（元/Mbps/天）；</li></ul></td>
</tr>
<tr>
<td style="text-align:center"><strong>月95计费</strong></td>
<td style="text-align:left"><ul><li>每月费用=月95带宽峰值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 有效天数占比 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 阶梯单价；</li><li>月95带宽峰值：每月取每5分钟带宽进行降序排列，去掉前5%</li><li>有效占比=有效天/自然月的天数；带宽大于1Kbps为有效天。</li></ul></td>
</tr>
</tbody>
</table>
<h5 id="云联网计费方案"><a class="markdownIt-Anchor" href="#云联网计费方案"></a> 云联网计费方案</h5>
<ul>
<li><strong>免费使用</strong>：同地域网络实例互通不收费。</li>
<li><strong>计费模式</strong>：
<ul>
<li>跨地域网络实例间互通会产生费用，按95后付费标准收费；</li>
<li>每月费用=云联网内网络实例两两互通产生的跨地域互通流量费用之和；</li>
<li>两地域间互通每月费用=月95带宽峰值*有效天数占比*阶梯单价</li>
</ul>
</li>
</ul>
<h5 id="专线接入计费方案"><a class="markdownIt-Anchor" href="#专线接入计费方案"></a> 专线接入计费方案</h5>
<ul>
<li>费用组成：物理专线费用+专线通道</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">收费项</th>
<th style="text-align:left">收费模式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">物理专线</td>
<td style="text-align:left"><ul><li>腾讯云收费项：收取一次性接入费</li><li>运营商收费项：光纤铺设费</li><li>IDC机房提供商：光纤入楼物业费</li></ul></td>
</tr>
<tr>
<td style="text-align:center">专线通道</td>
<td style="text-align:left"><ul><li>专用通道指专线接入点与云上专线网关之间腾讯云内网部分；</li><li>专线接入点和云上专线网关地域相同，免费使用；</li><li>专线接入点和云上专线网关地域不同，月95带宽值后付费。</li></ul></td>
</tr>
</tbody>
</table>
<h5 id="vpn连接计费"><a class="markdownIt-Anchor" href="#vpn连接计费"></a> VPN连接计费</h5>
<ul>
<li>费用组成：VPN网关租用费（按小时计费）+流量费用</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/imagebd638af48710fc7e.png" alt="VPN连接计费" /></p>
<h4 id="负载均衡计费方案"><a class="markdownIt-Anchor" href="#负载均衡计费方案"></a> 负载均衡计费方案</h4>
<h5 id="clb计费方案"><a class="markdownIt-Anchor" href="#clb计费方案"></a> CLB计费方案</h5>
<ul>
<li>内网型CLB实例免费；公网型CLB按量后付费：CLB费用=CLB实例租用费+CVM带宽流量费</li>
<li><strong>实例租用费</strong>：按小时计价和结算，预先冻结1小时费用。</li>
<li><strong>外网流量费</strong>：
<ul>
<li>按带宽计费：带宽消耗使用云服务器已包含的公网带宽，不另收带宽费用；</li>
<li>按流量计费：用户使用公网负载均衡会产生出流量，需支付对应流量费用。</li>
</ul>
</li>
</ul>
<h3 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h3>
<ul>
<li>腾讯云私有网络：私有网段、路由表、安全组、网络ACL、弹性网卡</li>
<li>腾讯云网络连接：弹性IP/公网网关/NAT网关，专线接入/VPN连接，对等连接/云联网</li>
<li>腾讯云负载均衡：转发机制、流量分法、CLB类型、应用场景</li>
<li>腾讯云网络计费：免费产品、日峰值计费、月95计费</li>
</ul>
<h2 id="cdn加速"><a class="markdownIt-Anchor" href="#cdn加速"></a> CDN加速</h2>
<h3 id="cdn加速基础知识"><a class="markdownIt-Anchor" href="#cdn加速基础知识"></a> CDN加速基础知识</h3>
<h4 id="内容分发网络"><a class="markdownIt-Anchor" href="#内容分发网络"></a> 内容分发网络</h4>
<ul>
<li>内容分发网络（Content Delivery Network,CDN）通过高性能加速节点提前就近缓存业务内容，实现快速响应，降低用户访问延迟，提升可用性。</li>
<li><strong>CDN解决问题</strong>：
<ul>
<li>物理距离远，多次网络转发，延时高不稳定；</li>
<li>所在运营商不同，需运营商之间转发绕行；</li>
<li>网络带宽处理能力有限，海量请求时，响应速度与可用性降低。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image02c09f5dc9774b4b.png" alt="CDN" /></li>
</ul>
</li>
</ul>
<h4 id="cdn访问原理"><a class="markdownIt-Anchor" href="#cdn访问原理"></a> CDN访问原理</h4>
<ul>
<li>
<p><strong>传统网站访问</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image4d9086a74b36f44e.png" alt="传统网站访问" /></p>
</li>
<li>
<p><strong>CDN访问</strong>：<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image3a8338c8db1678d1.png" alt="CDN访问" /></p>
</li>
</ul>
<h4 id="cdn发展阶段"><a class="markdownIt-Anchor" href="#cdn发展阶段"></a> CDN发展阶段</h4>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/imagea549091ffd71611c.png" alt="CDN发展阶段" /></p>
<h4 id="cdn技术趋势"><a class="markdownIt-Anchor" href="#cdn技术趋势"></a> CDN技术趋势</h4>
<h5 id="cdn发展趋势"><a class="markdownIt-Anchor" href="#cdn发展趋势"></a> CDN发展趋势</h5>
<ul>
<li>价格更低</li>
<li>行业方案</li>
<li>标准化</li>
<li>边缘计算</li>
<li>智能CDN</li>
</ul>
<h5 id="cdn市场格局"><a class="markdownIt-Anchor" href="#cdn市场格局"></a> CDN市场格局</h5>
<ul>
<li>目前我国CDN覆盖率仅为17.2%，北美成熟市场50%；</li>
<li>受视频、VR/AR、游戏、电商、ABC、loT、边缘计算等业务推动，预计未来5年年均增速高达35%。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image8bdb2056bb8961a1.png" alt="CDN市场格局" /></li>
</ul>
<h3 id="腾讯云cdn加速系统架构"><a class="markdownIt-Anchor" href="#腾讯云cdn加速系统架构"></a> 腾讯云CDN加速系统架构</h3>
<h4 id="cdn系统架构"><a class="markdownIt-Anchor" href="#cdn系统架构"></a> CDN系统架构</h4>
<ul>
<li>腾讯云CDN架构涵盖：<strong>管理系统、内容系统、监控系统</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image315c471a4f4667d3.png" alt="CDN系统架构" /></li>
</ul>
<h4 id="cdn内容系统"><a class="markdownIt-Anchor" href="#cdn内容系统"></a> CDN内容系统</h4>
<ul>
<li><strong>中间源</strong>：提升响应速度、减少源站压力；</li>
<li><strong>双层缓存</strong>：均衡容量、性能与成本；</li>
<li><strong>DiskTank3存储引擎</strong>：兼顾海量小文件与大文件访问；</li>
<li><strong>NWS服务器</strong>：功能与性能优化；</li>
<li><strong>TGW负载均衡</strong>：多网统一接入。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/imagee90bc3dc82b3f6ac.png" alt="CDN内容系统" /></li>
</ul>
<h5 id="cdn缓存刷新"><a class="markdownIt-Anchor" href="#cdn缓存刷新"></a> CDN缓存刷新</h5>
<ul>
<li><strong>缓存过期</strong>：默认30天。自有源域名接入时常规动态文件过期时间为0。</li>
<li><strong>缓存刷新</strong>：
<ul>
<li><strong>URL刷新</strong>：以文件为单位进行缓存刷新。</li>
<li><strong>目录刷新</strong>：是以目录为单位，将目录下的所有文件进行缓存刷新。</li>
</ul>
</li>
<li><strong>URL预热</strong>：是以文件为单位提前将热点资源缓存到边缘节点。</li>
</ul>
<h4 id="cdn监控系统"><a class="markdownIt-Anchor" href="#cdn监控系统"></a> CDN监控系统</h4>
<ul>
<li>多维度、全方位的立体化监控与调度，快速发现和剔除异常机器：
<ul>
<li>动态路由协议OSPF 5秒禁用故障节点</li>
<li>组播心跳机制监控集群，剔出无心跳节点</li>
<li>区域内节点相互探测，实时剔除异常节点</li>
<li>：可达性、延时、下载速度、丢包率<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image2010d5d77b085626.png" alt="CDN监控系统" /></li>
</ul>
</li>
</ul>
<h5 id="gslb智能调度"><a class="markdownIt-Anchor" href="#gslb智能调度"></a> GSLB智能调度</h5>
<ul>
<li>腾讯自研GSLB调度系统，探测获取全网链路质量，实时调整调度策略。
<ul>
<li><strong>最优接入</strong>：用户请求会动态调度至最近最优的CDN节点。</li>
<li><strong>最优回源</strong>：根据全网实时状态监控以及智能路由，选择最优回源链路。</li>
<li><strong>动态加速</strong>：为动态请求提供最优链路，有效避开质量较差、较拥堵链路。</li>
</ul>
</li>
</ul>
<h4 id="cdn管理系统"><a class="markdownIt-Anchor" href="#cdn管理系统"></a> CDN管理系统</h4>
<ul>
<li>资源管理系统</li>
<li>安全管理系统</li>
<li>配置管理系统</li>
<li>客户管理系统<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/imageffe55f1f08e1a2a9.png" alt="CDN管理系统" /></li>
</ul>
<h4 id="cdn接入步骤"><a class="markdownIt-Anchor" href="#cdn接入步骤"></a> CDN接入步骤</h4>
<ul>
<li>在CDN控制台仅需以下四步，便可轻松接入CDN，使用CDN加速服务。
<ul>
<li><strong>添加加速域名</strong>
<ul>
<li>域名已备案/可访问</li>
</ul>
</li>
<li><strong>配置源站信息</strong>
<ul>
<li>自有源/COS源</li>
</ul>
</li>
<li><strong>选择加速产品</strong>
<ul>
<li>静态加速 下载加速 流媒体点播加速</li>
</ul>
</li>
<li><strong>修改CNAME</strong>
<ul>
<li>自有域名指向系统分配的CNAME域名</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="腾讯云cdn加速安全机制"><a class="markdownIt-Anchor" href="#腾讯云cdn加速安全机制"></a> 腾讯云CDN加速安全机制</h3>
<h4 id="cdn安全机制"><a class="markdownIt-Anchor" href="#cdn安全机制"></a> CDN安全机制</h4>
<ul>
<li><strong>SSL安全证书</strong>：HTTPS支持</li>
<li><strong>移动解析HttpDNS</strong>：防域名劫持</li>
<li><strong>CDN访问控制</strong>：授权访问</li>
<li><strong>大禹DDoS</strong>：攻击防护</li>
</ul>
<h4 id="移动解析httpdns"><a class="markdownIt-Anchor" href="#移动解析httpdns"></a> 移动解析HttpDNS</h4>
<ul>
<li><strong>域名劫持</strong>：
<ul>
<li>传统域名解析使用DNS协议向运营商Local DNS发起解析请求；</li>
<li>可能造成运营商的域名劫持（解析到错误的IP）或跨网访问问题。</li>
</ul>
</li>
<li><strong>解决问题：移动解析（HttpDNS）</strong>
<ul>
<li>使用Http协议向腾讯云Public DNS服务器发送域名解析请求，获取正确的/最佳IP。</li>
<li>使用HttpDNS时建议保留Local DNS备份。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image8d7f3d1efeed01de.png" alt="移动解析" /></li>
</ul>
</li>
</ul>
<h4 id="ssl安全证书"><a class="markdownIt-Anchor" href="#ssl安全证书"></a> SSL安全证书</h4>
<ul>
<li><strong>HTTP的挑战</strong>：
<ul>
<li>HTTP协议被用于在Web浏览器和网站服务器之间传递消息</li>
<li>HTTP协议传输的数据都是未加密的，也就是铭文的。</li>
</ul>
</li>
<li><strong>HTTPS=HTTP+SSL</strong>
<ul>
<li>通过加密传输保障数据安全；</li>
<li>通过身份认证保障网站真实性。</li>
</ul>
</li>
</ul>
<h5 id="腾讯云ssl证书"><a class="markdownIt-Anchor" href="#腾讯云ssl证书"></a> 腾讯云SSL证书</h5>
<ul>
<li>腾讯云SSL证书（SSL Certificates）提供一站式证书服务，为网站、移动应用等提供HTTPS解决方案。
<ul>
<li><strong>顶级CA机构</strong>：与国际顶级的CA机构、代理商合作，安全有保障；</li>
<li><strong>100%兼容性</strong>：Symantec根证书签发，支持所有浏览器和移动设备；</li>
<li><strong>提升搜索排名</strong>：采用HTTPS有利于提升网站的搜索排名及站点可信度；</li>
<li><strong>数据加密传输</strong>：数据加密传输，防止被篡改，流量劫持、广告植入等。</li>
</ul>
</li>
</ul>
<h5 id="ssl证书类型"><a class="markdownIt-Anchor" href="#ssl证书类型"></a> SSL证书类型</h5>
<table>
<thead>
<tr>
<th style="text-align:center">对比</th>
<th style="text-align:center">域名型DV</th>
<th style="text-align:center">企业型OV</th>
<th style="text-align:center">增强型EV</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">标识</td>
<td style="text-align:center">小锁标记+https</td>
<td style="text-align:center">小锁标记+https</td>
<td style="text-align:center">小锁标记+https+公司名称</td>
</tr>
<tr>
<td style="text-align:center">一般用途</td>
<td style="text-align:center">个人站点和应用：简单的Https加密需求</td>
<td style="text-align:center">全面的企业身份验证；域名所有权验证</td>
<td style="text-align:center">最高等级的企业身份验证；域名所有权验证</td>
</tr>
<tr>
<td style="text-align:center">颁发时长</td>
<td style="text-align:center">10分钟-24小时</td>
<td style="text-align:center">3-5个工作日</td>
<td style="text-align:center">5-7个工作日</td>
</tr>
<tr>
<td style="text-align:center">单次申请年限</td>
<td style="text-align:center">1年</td>
<td style="text-align:center">1-2年</td>
<td style="text-align:center">1-2年</td>
</tr>
</tbody>
</table>
<h4 id="cdn访问控制"><a class="markdownIt-Anchor" href="#cdn访问控制"></a> CDN访问控制</h4>
<ul>
<li><strong>过滤参数配置</strong></li>
<li><strong>防盗链配置</strong></li>
<li><strong>IP黑白名单</strong></li>
<li><strong>IP访问限频</strong></li>
</ul>
<h3 id="腾讯云cdn加速产品介绍"><a class="markdownIt-Anchor" href="#腾讯云cdn加速产品介绍"></a> 腾讯云CDN加速产品介绍</h3>
<h4 id="cdn加速产品"><a class="markdownIt-Anchor" href="#cdn加速产品"></a> CDN加速产品</h4>
<h5 id="静态内容加速scd"><a class="markdownIt-Anchor" href="#静态内容加速scd"></a> 静态内容加速SCD</h5>
<ul>
<li><strong>适用场景</strong>：针对门户网站、电商、UGC社区等场景，提供了强大的静态内容（如网页样式、图片、小文件）加速分发处理能力。</li>
<li><strong>客户案例</strong>：大众点评 小红书 富途证券<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image0b49cbb97205b595.png" alt="静态内容加速SCD" /></li>
</ul>
<h5 id="下载分发加速dd"><a class="markdownIt-Anchor" href="#下载分发加速dd"></a> 下载分发加速DD</h5>
<ul>
<li><strong>适用场景</strong>：APP安装包、游戏升级包、手机固件升级等大文件下载分发场景。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/imageef2cb304f38da820.png" alt="下载分发加速DD" /></li>
</ul>
<h5 id="音视频加速vcd"><a class="markdownIt-Anchor" href="#音视频加速vcd"></a> 音视频加速VCD</h5>
<ul>
<li><strong>适用场景</strong>：视频网站、电视盒子、UGC视频网站等场景流媒体内容分发。
<ul>
<li><strong>场景一</strong>：通用型场景，适用于一般视频网站，内容精准快速推送。</li>
<li>场景二：专业性能场景
<ul>
<li>海量并发、高速传输与处理（鉴黄/转码封装）<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image8e632b5a19beae2a.png" alt="音视频加速VCD" /></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="海外加速gcd"><a class="markdownIt-Anchor" href="#海外加速gcd"></a> 海外加速GCD</h4>
<ul>
<li>海外加速（Global Content Delivery,GCD）解决跨国访问问题，有效降低访问延迟，支持业务平滑出海。</li>
<li>覆盖50余国家的200+海外节点，总20T+带宽资源储备。</li>
</ul>
<h4 id="动态加速网络dsa"><a class="markdownIt-Anchor" href="#动态加速网络dsa"></a> 动态加速网络DSA</h4>
<ul>
<li>动态加速网络（Dynamic Site Accelerator,DSA）解决跨运营商、跨国、网络不稳定等因素导致的响应慢、丢包、服务不稳定等问题。</li>
<li>腾讯自研的最优链路算法及协议层优化，使动态内容通过安全可靠的最优传输路径快速分发给用户。</li>
<li>DSA还支持多链路冗余传输，保障数据在传输过程中的可靠性。</li>
</ul>
<h4 id="全球应用加速gaap"><a class="markdownIt-Anchor" href="#全球应用加速gaap"></a> 全球应用加速GAAP</h4>
<ul>
<li>全球应用加速GAAP依赖全球节点之间的高速通道、转发集群及智能路由技术，实现全球用户就近接入、直达源站访问。全球用户访问卡顿或者延迟过高问题。</li>
<li><strong>接入方式</strong>：域名接入、IP接入</li>
<li><strong>应用场景</strong>：跨区域访问加速 全球游戏同服<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image4fc90f70a70d9f22.png" alt="全球应用加速" /></li>
</ul>
<h4 id="cdn边缘计算"><a class="markdownIt-Anchor" href="#cdn边缘计算"></a> CDN边缘计算</h4>
<ul>
<li>CDN边缘计算（CDN Edge）CDN能力从缓存分发延伸至边缘计算，通过编程配置等方式将部分处理功能下沉至CDN边缘节点。</li>
<li><strong>产品优势</strong>：减少高网络延时、传输负载、以及后端计算压力。</li>
<li><strong>应用场景</strong>：定制化应用、灰度发布、动态源选择、访问控制。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/imaged841aa039d3c85c1.png" alt="CDN Edge" /></li>
</ul>
<h4 id="智能cdnx-p2p"><a class="markdownIt-Anchor" href="#智能cdnx-p2p"></a> 智能CDN:X-P2P</h4>
<ul>
<li><strong>X-P2P</strong>：__基于__新一代P2P技术，充分利用边缘计算存储能力和整体网络闲置带宽，结合音视频SaaS服务，提供更高体验与性价比的流媒体分享方案。</li>
<li><strong>产品优势</strong>：
<ul>
<li>比传统CDN价格低50%</li>
<li>业界最优的低延迟技术；</li>
<li>智能调度P2P与固定节点；</li>
<li>多重机制保障服务质量。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/imagee71224265eac0d42.png" alt="X-P2P" /></li>
</ul>
</li>
</ul>
<h3 id="腾讯云cdn加速计费方案"><a class="markdownIt-Anchor" href="#腾讯云cdn加速计费方案"></a> 腾讯云CDN加速计费方案</h3>
<h4 id="带宽计费方案"><a class="markdownIt-Anchor" href="#带宽计费方案"></a> 带宽计费方案</h4>
<ul>
<li>基于客户类型与CDN流量使用计费：<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image5245880b2ce2be53.png" alt="基于客户类型与CDN流量使用计费" /></li>
</ul>
<h5 id="日峰带宽取月均"><a class="markdownIt-Anchor" href="#日峰带宽取月均"></a> 日峰带宽取月均</h5>
<ul>
<li><strong>当月CDN费用</strong>=月均日峰带宽 \time 单价 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 有效天数/当月天数</li>
<li><strong>月均日峰带宽</strong>：每日取288带宽峰值（每5分钟一个），当月有效天的每日峰值取平均。</li>
<li><strong>有效天</strong>：产生消耗大于1Kbps即为有效天。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/imagee60f76c0e2d80d89.png" alt="日峰带宽取月均" /></li>
</ul>
<h5 id="月95带宽"><a class="markdownIt-Anchor" href="#月95带宽"></a> 月95带宽</h5>
<ul>
<li><strong>当月CDN费用</strong>=月带宽Max95 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 单价 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 有效天/当月天数</li>
<li><strong>月95带宽</strong>：每日取288带宽峰值（每5分钟一个）当月有效天的所有峰值进行排序，去掉前5%，剩下最大峰值即为Max95.</li>
<li><strong>有效天</strong>：产生消耗 大于1Kbps即为有效天。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/18/image873738c5dbca9caa.png" alt="月95带宽" /></p>
<h4 id="流量计费方案"><a class="markdownIt-Anchor" href="#流量计费方案"></a> 流量计费方案</h4>
<ul>
<li>采用月度流量<font color=blue>阶梯累进</font>计费：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">月流量阶梯</th>
<th style="text-align:center">单价（元/GB），仅供参考以官网为准</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0GB-2TB</td>
<td style="text-align:center">0.21</td>
</tr>
<tr>
<td style="text-align:center">2TB-10TB</td>
<td style="text-align:center">0.20</td>
</tr>
<tr>
<td style="text-align:center">10TB-50TB</td>
<td style="text-align:center">0.18</td>
</tr>
<tr>
<td style="text-align:center">50TB-100TB</td>
<td style="text-align:center">0.15</td>
</tr>
<tr>
<td style="text-align:center">$\geqslant$100TB</td>
<td style="text-align:center">低于0.11，以合同价为准</td>
</tr>
<tr>
<td style="text-align:center">流量包</td>
<td style="text-align:center">优先抵扣</td>
</tr>
</tbody>
</table>
<ul>
<li>购买__流量包__抵扣：优先抵扣流量包，超出部分再按照阶梯价格计费。</li>
</ul>
<h4 id="计费方案选择"><a class="markdownIt-Anchor" href="#计费方案选择"></a> 计费方案选择</h4>
<ul>
<li><strong>带宽利用率</strong>=实例使用流量（深色部分①）/峰值带宽折算流量（整个阴影②）
<ul>
<li>若带宽利用率超过50%，表明业务的曲线较为平稳，建议采用 <strong>带宽计费</strong> 方式。</li>
<li>若带宽利用率小于50%，表明业务的曲线波动较大，建议采用 <strong>流量计费</strong> 方式。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/19/image.png" alt="带宽利用率" /></li>
</ul>
</li>
</ul>
<h3 id="总结-3"><a class="markdownIt-Anchor" href="#总结-3"></a> 总结</h3>
<ul>
<li>CDN加速基础知识：CDN访问原理、腾讯云CDN简介</li>
<li>腾讯云CDN系统架构：内容、监控、管理、缓存刷新、接入步骤</li>
<li>腾讯云CDN安全机制：HTTPS、访问控制、防域名劫持、攻击防护</li>
<li>腾讯云CDN加速产品：静态内容、下载分发、音视频、海外、动态网络、全球应用、边缘计算、X-P2P</li>
<li>腾讯云CDN计费方案:带宽计费、流量计费、按带宽利用率选择。</li>
</ul>
<h2 id="云存储"><a class="markdownIt-Anchor" href="#云存储"></a> 云存储</h2>
<h3 id="云存储基础知识"><a class="markdownIt-Anchor" href="#云存储基础知识"></a> 云存储基础知识</h3>
<h4 id="存储发展"><a class="markdownIt-Anchor" href="#存储发展"></a> 存储发展</h4>
<h5 id="存储发展历程"><a class="markdownIt-Anchor" href="#存储发展历程"></a> 存储发展历程</h5>
<ul>
<li>合久必分、分久必合<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/19/image3f7cf5ffdabc5497.png" alt="合久必分" /><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/19/image6422eb3ea7c2504c.png" alt="分久必合" /></li>
</ul>
<h4 id="存储类型"><a class="markdownIt-Anchor" href="#存储类型"></a> 存储类型</h4>
<h5 id="存储类型与特点"><a class="markdownIt-Anchor" href="#存储类型与特点"></a> 存储类型与特点</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/19/image37021ceec08177cc.png" alt="三种存储形式" /></p>
<table>
<thead>
<tr>
<th style="text-align:center">存储形式</th>
<th style="text-align:center">主要特点</th>
<th style="text-align:center">举例</th>
<th style="text-align:center">应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">块存储</td>
<td style="text-align:center">通过LBA读写 数据块，高速传输</td>
<td style="text-align:center">DAS、SAN、CBS</td>
<td style="text-align:center">数据库</td>
</tr>
<tr>
<td style="text-align:center">文件存储</td>
<td style="text-align:center">通过文件名/目录，读写文件，权限控制</td>
<td style="text-align:center">NAS、FTP、CFS</td>
<td style="text-align:center">文件共享</td>
</tr>
<tr>
<td style="text-align:center">对象存储</td>
<td style="text-align:center">通过对象ID/元数据 读写对象（键-值）快速读写</td>
<td style="text-align:center">COS、S3</td>
<td style="text-align:center">视频、图像大文件存储</td>
</tr>
</tbody>
</table>
<h4 id="存储介质"><a class="markdownIt-Anchor" href="#存储介质"></a> 存储介质</h4>
<h5 id="存储介质分类"><a class="markdownIt-Anchor" href="#存储介质分类"></a> 存储介质分类</h5>
<table>
<thead>
<tr>
<th style="text-align:center">磁盘</th>
<th style="text-align:center">HDD机械盘</th>
<th style="text-align:center">SSD固态盘</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">读写原理</td>
<td style="text-align:center">盘片选择、磁头读写数据</td>
<td style="text-align:center">主控器通过块地址LBA并发读写</td>
</tr>
<tr>
<td style="text-align:center">读写性能</td>
<td style="text-align:center">读：200M/秒；写100M/秒</td>
<td style="text-align:center">读：500M/秒；写：200M/秒</td>
</tr>
<tr>
<td style="text-align:center">最大容量</td>
<td style="text-align:center">16TB</td>
<td style="text-align:center">4TB</td>
</tr>
<tr>
<td style="text-align:center">写入次数</td>
<td style="text-align:center">无限制</td>
<td style="text-align:center">SLC主控10万次 MLC主控1万次</td>
</tr>
<tr>
<td style="text-align:center">功耗噪声</td>
<td style="text-align:center">高功率电机驱动，功耗高，噪音大、会发热</td>
<td style="text-align:center">功耗低，噪音小、待机功能、无发热</td>
</tr>
<tr>
<td style="text-align:center">抗震</td>
<td style="text-align:center">高速运转磁头抗震很差</td>
<td style="text-align:center">芯片存储超强抗震</td>
</tr>
<tr>
<td style="text-align:center">数据恢复</td>
<td style="text-align:center">删除后可借助软件恢复</td>
<td style="text-align:center">删除后无法恢复</td>
</tr>
<tr>
<td style="text-align:center">价格</td>
<td style="text-align:center">较低</td>
<td style="text-align:center">较高</td>
</tr>
</tbody>
</table>
<h4 id="存储分级"><a class="markdownIt-Anchor" href="#存储分级"></a> 存储分级</h4>
<ul>
<li><strong>存储分级</strong>：基于数据访问频率、性能要求与成本考虑将数据存放在不同的存储设备上，不同分级存储可以自动迁移。
<ul>
<li>存储访问的局部性；</li>
<li>存储方案的性价比。</li>
</ul>
</li>
<li>标准存储：CBS/CFS/COS</li>
<li>低频存储：COS（低频存储）</li>
<li>离线存储：归档存储CAS</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">存储分级</th>
<th style="text-align:center">标准存储</th>
<th style="text-align:center">低频存储</th>
<th style="text-align:center">归档存储</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">数据持久性</td>
<td style="text-align:center">99.999999999%</td>
<td style="text-align:center">99.999999999%</td>
<td style="text-align:center">99.999999999</td>
</tr>
<tr>
<td style="text-align:center">服务可用性</td>
<td style="text-align:center">99.95%</td>
<td style="text-align:center">99.9%</td>
<td style="text-align:center">99.9%</td>
</tr>
<tr>
<td style="text-align:center">响应</td>
<td style="text-align:center">毫秒级</td>
<td style="text-align:center">毫秒级</td>
<td style="text-align:center">需提前申请恢复</td>
</tr>
<tr>
<td style="text-align:center">最短计费时间</td>
<td style="text-align:center">-</td>
<td style="text-align:center">30天</td>
<td style="text-align:center">90天</td>
</tr>
<tr>
<td style="text-align:center">支持地域</td>
<td style="text-align:center">全部地域</td>
<td style="text-align:center">全部地域</td>
<td style="text-align:center">仅支持中国大陆地域</td>
</tr>
<tr>
<td style="text-align:center">存储费用</td>
<td style="text-align:center">标准</td>
<td style="text-align:center">较低</td>
<td style="text-align:center">极低</td>
</tr>
<tr>
<td style="text-align:center">数据取回费用</td>
<td style="text-align:center">标准</td>
<td style="text-align:center">较低</td>
<td style="text-align:center">极低</td>
</tr>
<tr>
<td style="text-align:center">数据取回费用</td>
<td style="text-align:center">-</td>
<td style="text-align:center">较低</td>
<td style="text-align:center">较高</td>
</tr>
<tr>
<td style="text-align:center">读写请求费用</td>
<td style="text-align:center">极低</td>
<td style="text-align:center">较低</td>
<td style="text-align:center">极低（需恢复才可请求）</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">存储类型</th>
<th style="text-align:center">特点说明</th>
<th style="text-align:center">应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>标准存储</strong></td>
<td style="text-align:center">用于高频高速访问的热点数据；高可用性、高性能、高吞吐量。</td>
<td style="text-align:center">热点视频、社交图片、移动应用、游戏程序、动态网站</td>
</tr>
<tr>
<td style="text-align:center"><strong>低频存储</strong></td>
<td style="text-align:center">用于低频少量访问的数据；高可靠性、高性价比。</td>
<td style="text-align:center">网盘数据、大数据分析、政企业务数据、低频档案、监控数据</td>
</tr>
<tr>
<td style="text-align:center"><strong>归档存储</strong></td>
<td style="text-align:center">极少访问的大量的冷数据；低成本的海量存储</td>
<td style="text-align:center">档案数据、医疗影像、科学资料、影视素材</td>
</tr>
</tbody>
</table>
<h3 id="云存储产品介绍"><a class="markdownIt-Anchor" href="#云存储产品介绍"></a> 云存储产品介绍</h3>
<ul>
<li>云存储产品：云硬盘CBS、文件存储CFS、对象存储COS、归档存储CAS</li>
</ul>
<h4 id="云硬盘cbs"><a class="markdownIt-Anchor" href="#云硬盘cbs"></a> 云硬盘CBS</h4>
<ul>
<li>云硬盘（Cloud Block Storage,CBS）是CVM使用的持久性块级存储服务。</li>
<li><strong>类型</strong>：系统盘/数据盘；普通云硬盘/高性能云硬盘/SSD云硬盘。</li>
<li>可靠性达99.9999999%，同可用区内数据保存3副本。</li>
</ul>
<h5 id="云硬盘类型"><a class="markdownIt-Anchor" href="#云硬盘类型"></a> 云硬盘类型</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/19/imageb0e8f7ac5989eac4.png" alt="云硬盘类型" /></p>
<h5 id="云硬盘快照"><a class="markdownIt-Anchor" href="#云硬盘快照"></a> 云硬盘快照</h5>
<ul>
<li>快照是云硬盘在指定时间点的数据备份，只能云硬盘的同地域使用快照，快照属于增量备份，仅保存前一次快照后更改过的数据。</li>
<li><strong>应用场景</strong>
<ul>
<li>数据日常备份</li>
<li>数据快速恢复</li>
<li>数据多副本应用<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/19/image059eb7f12073d8c0.png" alt="云硬盘快照" /></li>
</ul>
</li>
</ul>
<h5 id="cbs产品优势"><a class="markdownIt-Anchor" href="#cbs产品优势"></a> CBS产品优势</h5>
<ul>
<li>可靠
<ul>
<li>数据写入三份</li>
<li>跨机架存储</li>
</ul>
</li>
<li>弹性
<ul>
<li>自由配置容量</li>
<li>扩容业务不中断</li>
</ul>
</li>
<li>高性能
<ul>
<li>高性能SSD</li>
<li>单盘提供</li>
<li>24000随机</li>
<li>IOPS</li>
</ul>
</li>
<li>易用性
<ul>
<li>操作简单</li>
<li>节省部署成本</li>
</ul>
</li>
<li>快照备份
<ul>
<li>快照备份</li>
<li>快照创建实例</li>
</ul>
</li>
</ul>
<h5 id="cbs应用场景"><a class="markdownIt-Anchor" href="#cbs应用场景"></a> CBS应用场景</h5>
<p>云硬盘的应用场景：</p>
<ul>
<li>关系型数据库/NoSQL数据库</li>
<li>企业办公应用</li>
<li>海量数据分析<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/19/image18126e722f4123d4.png" alt="云硬盘应用架构示例" /></li>
</ul>
<h4 id="文件存储cfs"><a class="markdownIt-Anchor" href="#文件存储cfs"></a> 文件存储CFS</h4>
<ul>
<li>文件存储（Cloud File Storage,CFS）提供安全可靠、可扩展的共享文件存储服务。</li>
<li>支持NFS v3.0/v4.0，CIFS/SMB协议，支持POSIX访问语义（例如强数据一致性和文件锁定）。</li>
<li>用户可以使用标准操作系统挂载命令来挂载文件系统。</li>
</ul>
<h5 id="cbs对比cfs"><a class="markdownIt-Anchor" href="#cbs对比cfs"></a> CBS对比CFS</h5>
<table>
<thead>
<tr>
<th style="text-align:center">类别</th>
<th style="text-align:center">文件存储CFS</th>
<th style="text-align:center">云硬盘CBS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">吞吐量级别</td>
<td style="text-align:center">单客户端100MB/s（上限1.5GB/s）</td>
<td style="text-align:center">上限600MB/s</td>
</tr>
<tr>
<td style="text-align:center">共享性</td>
<td style="text-align:center">多客户端共享</td>
<td style="text-align:center">不共享</td>
</tr>
<tr>
<td style="text-align:center">冗余</td>
<td style="text-align:center">3份</td>
<td style="text-align:center">3份</td>
</tr>
<tr>
<td style="text-align:center">权限控制</td>
<td style="text-align:center">支持POSIX权限</td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td style="text-align:center">使用方式</td>
<td style="text-align:center">挂载后直接使用</td>
<td style="text-align:center">挂载后安装文件系统</td>
</tr>
</tbody>
</table>
<h5 id="cfs应用场景"><a class="markdownIt-Anchor" href="#cfs应用场景"></a> CFS应用场景</h5>
<ul>
<li>企业文件共享</li>
<li>流媒体处理</li>
<li>Web服务及内容管理</li>
<li>大数据应用<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/19/imagefb373fabf67a48b3.png" alt="企业文件共享" /></li>
</ul>
<h4 id="对象存储cos"><a class="markdownIt-Anchor" href="#对象存储cos"></a> 对象存储COS</h4>
<ul>
<li>对象存储（Cloud Object Storage,COS）是无数据格式限制，可容纳海量数据且支持HTTP/HTTPS协议访问的分布式存储服务。</li>
<li>数据以对象（Object）形式存放在用户自助创建的存储桶（Bucket）中。</li>
<li>可通过按地域分配的域名对COS中的数据直接进行数据访问、下载或管理。</li>
</ul>
<h5 id="cos访问控制"><a class="markdownIt-Anchor" href="#cos访问控制"></a> COS访问控制</h5>
<ul>
<li>
<p>可通过 <strong>对象地址对COS中的对象</strong> 进行访问与下载：<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/19/imagefe0ae64b5830c778.png" alt="对象地址" /></p>
</li>
<li>
<p><strong>访问控制</strong>：</p>
<ul>
<li>共享权限：私有读写、公有读私有写、公有读写</li>
<li><strong>用户权限</strong>：完全控制、数据读取、权限读取、权限写入。</li>
</ul>
</li>
</ul>
<h5 id="cos产品优势"><a class="markdownIt-Anchor" href="#cos产品优势"></a> COS产品优势</h5>
<ul>
<li><strong>高安全性————全面防护，分权管理</strong>
<ul>
<li>防盗链功能，用以屏蔽恶意来源的访问</li>
<li>DDOS攻击防护和CC攻击防护</li>
<li>过滤恶意攻击数据包，清洗出正常流量</li>
<li>多级分权限管理系统</li>
</ul>
</li>
<li><strong>高性能————智能调度，访问可靠</strong>
<ul>
<li>智能调度：访问可靠COS支持分块和并发发起请求。</li>
<li>最优的BGP链路上传。</li>
<li>结合CDN降低时延，提高下载速度。</li>
</ul>
</li>
<li><strong>高扩展性————方便接入，一键迁移</strong>
<ul>
<li>详尽的RESTful API接入说明和丰富的SDK接入工具</li>
<li>无缝迁移工具</li>
</ul>
</li>
<li><strong>高性价比————按量付费，自动扩容</strong>
<ul>
<li>无需采购、部署和运维费用；</li>
<li>根据使用量收取费用；</li>
<li>无最低限制，可随时无限扩容。</li>
</ul>
</li>
</ul>
<h5 id="cos应用场景"><a class="markdownIt-Anchor" href="#cos应用场景"></a> COS应用场景</h5>
<ul>
<li>COS主要存储非结构化数据，如视频、音频、图片、文件等。</li>
<li>应用场景：内容分发、UGC应用数据存储、大数据分析与处理等
<ul>
<li>例：内容分发：用户内容上传-&gt;存至对象存储-&gt;全球内容分发-&gt;在各类终端浏览内容</li>
</ul>
</li>
</ul>
<h4 id="归档存储cas"><a class="markdownIt-Anchor" href="#归档存储cas"></a> 归档存储CAS</h4>
<ul>
<li>归档存储（Cloud Archive Storage，CAS）是低成本、高可靠且易管理的云端离线存储服务。</li>
<li>CAS通过文件库Vault（存储容器）来存取档案Archive（存储对象）。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/20/image458a82055cd14dd6.png" alt="CAS" /></p>
<table>
<thead>
<tr>
<th style="text-align:left">取回模式</th>
<th style="text-align:left">取回时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">加急模式</td>
<td style="text-align:left">1到5分钟，紧急访问支持256MB以下文件的快速读取，收费较高。</td>
</tr>
<tr>
<td style="text-align:left">标准模式</td>
<td style="text-align:left">3-5小时取回数据，收费适中。</td>
</tr>
<tr>
<td style="text-align:left">批量模式</td>
<td style="text-align:left">5-12小时批量获取大量数据，收费较低</td>
</tr>
</tbody>
</table>
<h5 id="cas对比cos"><a class="markdownIt-Anchor" href="#cas对比cos"></a> CAS对比COS</h5>
<table>
<thead>
<tr>
<th style="text-align:left">对比项</th>
<th style="text-align:left">归档存储CAS</th>
<th style="text-align:left">对象存储COS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">存储容器</td>
<td style="text-align:left">存储桶Bucket</td>
<td style="text-align:left">文件库Vault</td>
</tr>
<tr>
<td style="text-align:left">存储对象</td>
<td style="text-align:left">档案Archive</td>
<td style="text-align:left">对象Object</td>
</tr>
<tr>
<td style="text-align:left">存储类型</td>
<td style="text-align:left">离线存储</td>
<td style="text-align:left">在线存储</td>
</tr>
<tr>
<td style="text-align:left">数据存取</td>
<td style="text-align:left">对象数据、对象索引</td>
<td style="text-align:left">档案ID</td>
</tr>
<tr>
<td style="text-align:left">数据取回</td>
<td style="text-align:left">非实时取回，取回过程相对复杂</td>
<td style="text-align:left">实时取回，取回简单</td>
</tr>
<tr>
<td style="text-align:left">产品价格</td>
<td style="text-align:left">相对较低</td>
<td style="text-align:left">相对较高</td>
</tr>
</tbody>
</table>
<h5 id="cas产品优势"><a class="markdownIt-Anchor" href="#cas产品优势"></a> CAS产品优势</h5>
<ul>
<li><strong>安全性</strong>：
<ul>
<li>支持分级鉴权</li>
<li>支持指定条件访问、指定人员、指定操作、指定资源多维度复合鉴权</li>
</ul>
</li>
<li><strong>扩展性</strong>：
<ul>
<li>自动扩展</li>
<li>单用户无存储容量上限</li>
<li>无需提前准备设备扩容</li>
</ul>
</li>
<li><strong>成本低</strong>：
<ul>
<li>每G单价远低于在线存储，低于友商</li>
<li>按量付费，无最低使用量限制</li>
</ul>
</li>
</ul>
<h5 id="cas应用场景合规性文件归档"><a class="markdownIt-Anchor" href="#cas应用场景合规性文件归档"></a> CAS应用场景：合规性文件归档</h5>
<ul>
<li>在金融、保险、医疗、直播、会计等多个行业往往需要保存甚至10年以上的合规性文件，如文书档案、患者病例、视频截图、合同档案等。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/20/imaged4f89afafe183a7b.png" alt="合规性文件归档" /></li>
</ul>
<h3 id="腾讯云存储服务"><a class="markdownIt-Anchor" href="#腾讯云存储服务"></a> 腾讯云存储服务</h3>
<ul>
<li>云存储服务：存储网关CSG、云数据迁移CDM、日志服务CLS</li>
</ul>
<h4 id="存储网关csg"><a class="markdownIt-Anchor" href="#存储网关csg"></a> 存储网关CSG</h4>
<ul>
<li>存储网关（Cloud Storage Gateway）是一种混合云存储方案，即插即用，屏蔽后端存储差异，实现本地存储与公有云存储的无缝衔接。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/20/image34b21613ed7750d2.png" alt="CSG" /></p>
<h5 id="csg网关类型"><a class="markdownIt-Anchor" href="#csg网关类型"></a> CSG网关类型</h5>
<table>
<thead>
<tr>
<th style="text-align:center">存储网关</th>
<th style="text-align:center">卷网关</th>
<th style="text-align:center">文件网关</th>
<th style="text-align:center">磁带网关</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">访问协议</td>
<td style="text-align:center">ISCSI</td>
<td style="text-align:center">NFS3/NFS4.1</td>
<td style="text-align:center">VTL</td>
</tr>
<tr>
<td style="text-align:center">后端存储</td>
<td style="text-align:center">对象存储COS</td>
<td style="text-align:center">对象存储COS</td>
<td style="text-align:center">归档存储CAS</td>
</tr>
</tbody>
</table>
<h5 id="csg产品优势"><a class="markdownIt-Anchor" href="#csg产品优势"></a> CSG产品优势</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/20/image4ba0eed117c43cbd.png" alt="产品优势" /></p>
<h5 id="csg应用场景"><a class="markdownIt-Anchor" href="#csg应用场景"></a> CSG应用场景</h5>
<ul>
<li>混合云负载、备份及容灾、数据开发、数据迁移</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/20/imaged0438d4364882832.png" alt="备份及容灾" /></p>
<h4 id="存储迁移cdm"><a class="markdownIt-Anchor" href="#存储迁移cdm"></a> 存储迁移CDM</h4>
<ul>
<li>
<p>云数据迁移（Cloud Data Migration，CDM）是TB~PB级别安全可靠的离线迁移上云服务。</p>
</li>
<li>
<p>CDM优势：高效传输、安全保护、状态跟踪。</p>
</li>
<li>
<p>CDM设备类型：</p>
</li>
</ul>
<p>|迁移设备|可用容量|支持接口|设备尺寸|<br />
|M30|30TB|1个USB3.0接口|28cm <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 16cm <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 22cm|<br />
|L80|80TB|2个10Gbps以太网电口|48cm <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 92cm <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 9cm|</p>
<h5 id="cdm产品优势"><a class="markdownIt-Anchor" href="#cdm产品优势"></a> CDM产品优势</h5>
<ul>
<li><strong>安全性</strong>
<ul>
<li>设备端加解密、自行管理密钥；</li>
<li>与腾讯云CAM服务集成，管理任务进度和权限。</li>
<li>数据迁移完成后，擦除设备磁盘每个扇区，保障数据不会被第三方读取。</li>
</ul>
</li>
<li><strong>高效性</strong>
<ul>
<li>高速稳定</li>
<li>小文件优化</li>
<li>专业物流</li>
</ul>
</li>
<li><strong>低成本</strong>
<ul>
<li>高性价比</li>
<li>高效去重</li>
</ul>
</li>
</ul>
<h5 id="cdm应用场景"><a class="markdownIt-Anchor" href="#cdm应用场景"></a> CDM应用场景</h5>
<ul>
<li>海量数据归档备份</li>
<li>云端数据分析处理</li>
<li>弱网环境迁移数据</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/20/image7c0a96dcc362e4de.png" alt="应用示例" /></p>
<h4 id="日志服务cls"><a class="markdownIt-Anchor" href="#日志服务cls"></a> 日志服务CLS</h4>
<ul>
<li>日志服务（Cloud Log Service，CLS）是一站式日志服务平台：
<ul>
<li>日志采集：通过LogListener、API实时采集；</li>
<li>日志检索：实时索引、亿级日志检索秒级返回结果；</li>
<li>日志投递：日志可以投递到COS，实现日志生命周期管理。</li>
</ul>
</li>
<li>日志类型：
<ul>
<li>系统日志、应用日志、移动端日志、嵌入式设备日志等。</li>
</ul>
</li>
</ul>
<h5 id="cls产品优势"><a class="markdownIt-Anchor" href="#cls产品优势"></a> CLS产品优势</h5>
<ul>
<li><strong>高速检索</strong>
<ul>
<li>配置快速生效，秒级检索返回</li>
<li>大容量日志存储：支持从每日TB级日志数据采集存储需求</li>
</ul>
</li>
<li><strong>弹性扩容</strong>
<ul>
<li>支持从MB-TB级别的日志数据量</li>
<li>无需提前准备设备扩容</li>
</ul>
</li>
<li><strong>高性价比</strong>
<ul>
<li>按实际使用量付费，价格低廉</li>
<li>无需担心资源被闲置浪费</li>
</ul>
</li>
</ul>
<h5 id="cls应用场景"><a class="markdownIt-Anchor" href="#cls应用场景"></a> CLS应用场景</h5>
<ul>
<li>通过日志采集与分析，解决故障排查定位，业务指标监控、客户行为分析、安全审计等问题。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/20/image6047499ea06974cf.png" alt="日志采集与分析" /></p>
<h3 id="云存储计费方案"><a class="markdownIt-Anchor" href="#云存储计费方案"></a> 云存储计费方案</h3>
<h4 id="cbs计费方案"><a class="markdownIt-Anchor" href="#cbs计费方案"></a> CBS计费方案</h4>
<table>
<thead>
<tr>
<th style="text-align:left">计费模式</th>
<th style="text-align:left">预付费</th>
<th style="text-align:left">按量计费</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">付款方式</td>
<td style="text-align:left">预付费</td>
<td style="text-align:left">后付费，购买时冻结3小时的费用，每小时计算一次费用并冻结下一小时的费用，每天汇总后进行一次结算。</td>
</tr>
<tr>
<td style="text-align:left">计费单位</td>
<td style="text-align:left">元/GB*月</td>
<td style="text-align:left">元/GB*小时</td>
</tr>
<tr>
<td style="text-align:left">最少使用时长</td>
<td style="text-align:left">至少使用一个月</td>
<td style="text-align:left">按小时结算，随时购买随时释放</td>
</tr>
<tr>
<td style="text-align:left">使用场景</td>
<td style="text-align:left">存储需求长期稳定的成熟业务</td>
<td style="text-align:left">适用于电商抢购等存储需求大幅波动场景</td>
</tr>
</tbody>
</table>
<p>__硬盘快照__按总存储容量进行收费，每个地域单独结算，目前仅支持按量计费后付费方式，以小时为单位整点结算，国内主要区域提供一定量的免费额度。</p>
<h4 id="cfs计费方案"><a class="markdownIt-Anchor" href="#cfs计费方案"></a> CFS计费方案</h4>
<ul>
<li><strong>按量付费</strong>：基于文件实际存储容量，按小时计费和计算；</li>
<li><strong>存储容量</strong>：按单位小时内实际适用存储空间最大值（峰值）计算；</li>
<li><strong>阶梯分段</strong>：基于不同地区按不同的存储容量阶梯到达计费；</li>
<li><strong>免费容量</strong>：截止2019年5月31日前，每个CFS用户可享受10GB免费容量。</li>
</ul>
<h4 id="cos计费方案"><a class="markdownIt-Anchor" href="#cos计费方案"></a> COS计费方案</h4>
<ul>
<li><strong>计费方式</strong>：
<ul>
<li>预付费资源包（中国大陆）；</li>
<li>按量后付费（所有区域）；</li>
</ul>
</li>
<li><strong>结算方式</strong>：
<ul>
<li>免费额度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span></span></span></span> 资源包 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span></span></span></span> 按量计费；</li>
<li>按日结算：流量费用；</li>
<li>按月结算：存储容量费用、请求费用、数据取回费用。</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/20/imagebcdf7acf7c93bc53.png" alt="imagebcdf7acf7c93bc53.png" /></p>
<h5 id="cos计费组成"><a class="markdownIt-Anchor" href="#cos计费组成"></a> COS计费组成</h5>
<ul>
<li><strong>存储容量费</strong>：<strong>（元/GB/月，月结）</strong>
<ul>
<li>存储容量费用 = 月均存储容量*存储容量单价 * ；</li>
<li>月均存储容量 = 当月日均存储容量之和/当月天数；</li>
<li>日均存储容量 = 当日每5分钟存储容量之和/288（采样点数）。</li>
</ul>
</li>
<li><strong>请求费用计费</strong>：<strong>（元/万次，月结）</strong>
<ul>
<li>读/写请求：通过API、SDK等发送COS请求指令实现数据上传、下载、查询、删除操作；</li>
<li>请求费用 = 每万次请求单价*月累计请求次数/10000（向下取整）。</li>
<li>月累计请求次数不足1万次，按10000次计算。</li>
</ul>
</li>
<li><strong>数据取回费</strong>：<strong>（元/GB，月结）</strong>
<ul>
<li>基于用户读取数据的容量进行计费；</li>
<li>标准存储不收取，低频存储收取；</li>
<li>数据取回费 = 每GB单价*月数据取回量。</li>
</ul>
</li>
<li><strong>流量费用</strong>：<strong>（元/GB、日结）</strong>
<ul>
<li>基于用户通过读取存储的数据时产生外网流量累加值计算；</li>
<li>收费流量类型：外网下行流量、CDN回源流量、跨区域复制流量</li>
<li>流量费用 = 每GB单价*日累计流量</li>
</ul>
</li>
</ul>
<h4 id="cas计费方案"><a class="markdownIt-Anchor" href="#cas计费方案"></a> CAS计费方案</h4>
<ul>
<li>CAS采用按量后付费、按月结算，次月3日出账单</li>
<li>CAS费用组成
<ul>
<li>存储空间费</li>
<li>流量费用</li>
<li>请求费用</li>
<li>数据读取费</li>
<li>提前删除费</li>
</ul>
</li>
</ul>
<h5 id="cas计费组成"><a class="markdownIt-Anchor" href="#cas计费组成"></a> CAS计费组成</h5>
<ol>
<li><strong>存储费用</strong>:
<ul>
<li>存储容量费用 = 月均存储容量*存储容量单价*；</li>
<li>月均存储容量 = 当月日均存储容量之和/当月天数；</li>
<li>日均存储容量 = 当日每5分钟存储容量之和/288（采样点数）。</li>
</ul>
</li>
<li><strong>流量费用</strong>：
<ul>
<li>外网出流量：基于通过外网直接访问归档存储，产生的流量；</li>
<li>相同地域的内网出入流量、外网入流量免费。</li>
<li>流量费用 = 外网出流量*单价</li>
</ul>
</li>
<li><strong>请求费用</strong>
<ul>
<li>按请求次数收费：读请求（GET/HEAD），写请求（PUT/POST/DELETE）。</li>
<li>请求费用 = 请求次数*单价</li>
</ul>
</li>
<li><strong>数据读取费用</strong>
<ul>
<li>基于数据读取模式（加急模式、标准模式、批量模式）确定计费单价；</li>
<li>数据读取费 = 读取数据存储容量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 单价</li>
</ul>
</li>
<li><strong>数据提前删除费</strong>
<ul>
<li>为满足CAS最短存储时长90天而提前删除数据、需收取被删除数据剩余天数的存储费用。</li>
<li>数据提前删除费用 = 删除的存储量*（90-已保存天数）*日单价</li>
</ul>
</li>
</ol>
<h4 id="cdm计费方案"><a class="markdownIt-Anchor" href="#cdm计费方案"></a> CDM计费方案</h4>
<ul>
<li>CDM计费基于设备租用费：基于设备数量和使用时间
<ul>
<li>服务费用 = 设备台数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 单价；</li>
<li>超时费用 = （使用天数-免费天数） <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 单价；</li>
<li>可退还押金 = 设备台数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 单价。</li>
<li>数据上云费用：免费，设备寄回之后，由腾讯云负责将数据导入云存储中；</li>
<li>物流费用：由专业的物流团队负责，费用不需要用户承担</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">设备</th>
<th style="text-align:center">服务费</th>
<th style="text-align:center">免费使用</th>
<th style="text-align:center">超市费用</th>
<th style="text-align:center">押金</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">M30(30TB)</td>
<td style="text-align:center">1500元</td>
<td style="text-align:center">10天</td>
<td style="text-align:center">200元/天</td>
<td style="text-align:center">15000元</td>
</tr>
<tr>
<td style="text-align:center">L80(80TB)</td>
<td style="text-align:center">3500元</td>
<td style="text-align:center">10天</td>
<td style="text-align:center">450元/天</td>
<td style="text-align:center">50000元</td>
</tr>
</tbody>
</table>
<h3 id="总结-4"><a class="markdownIt-Anchor" href="#总结-4"></a> 总结</h3>
<ul>
<li>存储基础知识：发展历程、存储类型、存储介质、存储分级</li>
<li>腾讯云存储产品：云硬盘CBS、文件存储CFS、对象存储COS、归档存储CAS</li>
<li>腾讯云存储服务：存储网关CSG、存储迁移CDM、日志服务CLS</li>
<li>存储计费方案：各存储产品服务计费方案</li>
</ul>
<h2 id="云数据库"><a class="markdownIt-Anchor" href="#云数据库"></a> 云数据库</h2>
<h3 id="数据库基础知识"><a class="markdownIt-Anchor" href="#数据库基础知识"></a> 数据库基础知识</h3>
<h4 id="数据库类型对比"><a class="markdownIt-Anchor" href="#数据库类型对比"></a> 数据库类型对比</h4>
<h5 id="数据库类型"><a class="markdownIt-Anchor" href="#数据库类型"></a> 数据库类型</h5>
<table>
<thead>
<tr>
<th style="text-align:center">对比项</th>
<th style="text-align:center">关系型SQL</th>
<th style="text-align:center">非关系型NoSQL</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">数据存储</td>
<td style="text-align:center">关系表</td>
<td style="text-align:center">数据集（键值/JSON文档/哈希表/其他）</td>
</tr>
<tr>
<td style="text-align:center">模式结构</td>
<td style="text-align:center">结构化、提前定义表结构</td>
<td style="text-align:center">动态调整模式、非结构化</td>
</tr>
<tr>
<td style="text-align:center">扩展方式</td>
<td style="text-align:center">纵向扩展，提高处理能力</td>
<td style="text-align:center">横向扩展、增加分布式节点</td>
</tr>
<tr>
<td style="text-align:center">数据查询</td>
<td style="text-align:center">标准通用的查询语言SQL</td>
<td style="text-align:center">非标准非结构化的查询语言(UnQL)</td>
</tr>
<tr>
<td style="text-align:center">关键特性</td>
<td style="text-align:center">ACID</td>
<td style="text-align:center">CAP、BASE</td>
</tr>
<tr>
<td style="text-align:center">主要优势</td>
<td style="text-align:center">结构化、事务管理、易于维护使用</td>
<td style="text-align:center">扩展性、灵活调整、大数据分析</td>
</tr>
<tr>
<td style="text-align:center">主要劣势</td>
<td style="text-align:center">扩展性、高并发场景、大数据分析</td>
<td style="text-align:center">事务支持较弱，标准不统一</td>
</tr>
</tbody>
</table>
<h5 id="主流关系型数据库"><a class="markdownIt-Anchor" href="#主流关系型数据库"></a> 主流关系型数据库</h5>
<ul>
<li>ORACLE</li>
<li>IBM Db2</li>
<li>MySQL</li>
<li>SQL Server</li>
<li>PostgreSQL</li>
</ul>
<h5 id="主流nosql数据库"><a class="markdownIt-Anchor" href="#主流nosql数据库"></a> 主流NoSQL数据库</h5>
<table>
<thead>
<tr>
<th style="text-align:center">数据库类型</th>
<th style="text-align:center">关键特点</th>
<th style="text-align:center">主流产品</th>
<th style="text-align:center">应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>键值数据库</strong></td>
<td style="text-align:center">使用哈希表存储和指向特定的数据的指针。</td>
<td style="text-align:center">Redis,Memcached</td>
<td style="text-align:center">内容缓存、购物车等</td>
</tr>
<tr>
<td style="text-align:center"><strong>文档数据库</strong></td>
<td style="text-align:center">以文档形式(JSON/BSON/XML)存取数据，Schema-Free弱模式结构。</td>
<td style="text-align:center">MongoDB,CouchDB</td>
<td style="text-align:center">应用日志系统、网站/博客平台</td>
</tr>
<tr>
<td style="text-align:center"><strong>列式数据库</strong></td>
<td style="text-align:center">键仍然存在，但指针指向多个列、以列簇式存储相关数据。</td>
<td style="text-align:center">HBase,Cassandra</td>
<td style="text-align:center">分布式文件系统、大数据分析</td>
</tr>
<tr>
<td style="text-align:center"><strong>图数据库</strong></td>
<td style="text-align:center">以图储存数据、实体顶点，边代表关系。</td>
<td style="text-align:center">Neo4J,InfoGrid,Infinite Graph</td>
<td style="text-align:center">社交网络、推荐引擎</td>
</tr>
</tbody>
</table>
<h4 id="数据库排名"><a class="markdownIt-Anchor" href="#数据库排名"></a> 数据库排名</h4>
<ul>
<li><strong>DB-Engines Ranking 按月更新数据库流行度排名：</strong></li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/22/image05d2ad0228653de1.png" alt="数据库流行度排名" /></p>
<h4 id="数据库发展趋势"><a class="markdownIt-Anchor" href="#数据库发展趋势"></a> 数据库发展趋势</h4>
<ul>
<li><strong>融合：</strong>
<ul>
<li>软件与硬件融合：数据库一体机</li>
<li>NoSQL与SQL融合：NewSQL</li>
<li>OLAP与OLTP融合：HTAP</li>
<li>DBMS与AI融合：</li>
</ul>
</li>
<li><strong>突破：</strong>
<ul>
<li>海量数据处理：大数据分析</li>
<li>高性能：集群/分布式/低延迟</li>
<li>稳定性：数据复制，备份容灾</li>
<li>架构突破：内核优化/云原生DB</li>
</ul>
</li>
</ul>
<h4 id="腾讯云数据库产品"><a class="markdownIt-Anchor" href="#腾讯云数据库产品"></a> 腾讯云数据库产品</h4>
<ul>
<li><strong>关系型数据库：</strong> MySQL、MariaDB、SQL Server、PostgreSQL、TDSQL、CynosDB</li>
<li><strong>NoSQL数据库：</strong> Redis、MemCached、MongoDB、CTSDB、HBase</li>
<li><strong>数据库服务：</strong> DTS、TData</li>
</ul>
<h3 id="腾讯云关系型数据库"><a class="markdownIt-Anchor" href="#腾讯云关系型数据库"></a> 腾讯云关系型数据库</h3>
<h4 id="云数据库-mysql"><a class="markdownIt-Anchor" href="#云数据库-mysql"></a> 云数据库 MySQL</h4>
<ul>
<li>
<p>TencentDB for MySQL让用户在云端部署使用MySQL数据库。</p>
</li>
<li>
<p><strong>兼容性</strong></p>
<ul>
<li>100%兼容开源mySQL协议；</li>
</ul>
</li>
<li>
<p><strong>性能优化</strong></p>
<ul>
<li>深度优化MySQL内核；</li>
<li>使用PCI-e SSD提升I/O性能；</li>
<li>单实例24万QPS，6TB存储空间；</li>
<li>一主多从、支持读写分离。</li>
</ul>
</li>
<li>
<p><strong>安全保障</strong></p>
<ul>
<li>数据加密、数据库审计；</li>
</ul>
</li>
<li>
<p><strong>高可用性</strong></p>
<ul>
<li>实时热备，基于binlog 5日内无损恢复数据；</li>
<li>自动容灾，自动故障检测、主备切换/迁移对用户透明；</li>
</ul>
</li>
</ul>
<h5 id="mysql应用游戏应用场景"><a class="markdownIt-Anchor" href="#mysql应用游戏应用场景"></a> MySQL应用：游戏应用场景</h5>
<ul>
<li><strong>业务需求：</strong> 基于玩家数量变化分派资源；多时间点的数据保留与回档。</li>
<li><strong>应对方案</strong>：弹性扩容、快速回档</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/22/imaged635785595967d9a.png" alt="游戏应用" /></p>
<h5 id="mysql应用移动app场景"><a class="markdownIt-Anchor" href="#mysql应用移动app场景"></a> MySQL应用：移动APP场景</h5>
<ul>
<li>业务特点：高并发访问、多读少写</li>
<li>应对方案：读写分离、性能优化</li>
</ul>
<h4 id="云数据库-sql-server"><a class="markdownIt-Anchor" href="#云数据库-sql-server"></a> 云数据库 SQL Server</h4>
<ul>
<li>
<p>SQL Server是微软推出的基于Windows系统的商用关系型数据库。</p>
</li>
<li>
<p><strong>TencentDB for SQL Server</strong> 具有微软正版授权，可在云端轻松部署使用。</p>
</li>
<li>
<p><strong>目前支持如下版本：</strong></p>
<ul>
<li>SQL Server 2008 R2 sp3</li>
<li>SQL Server 2012 sp3</li>
<li>SQL Server 2016</li>
</ul>
</li>
<li>
<p><strong>产品功能：</strong></p>
<ul>
<li><strong>预配置参数</strong>
<ul>
<li>快速启动与连接实例；</li>
<li>简化初始化与参数调优。</li>
</ul>
</li>
<li><strong>数据库镜像</strong>
<ul>
<li>默认提供一主一镜像；</li>
<li>宕机自检与秒级切换。</li>
</ul>
</li>
<li><strong>备份回档</strong>
<ul>
<li>定时自动备份保留7天；</li>
<li>随时回档到指定时间。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="sql-server镜像机制"><a class="markdownIt-Anchor" href="#sql-server镜像机制"></a> SQL Server镜像机制</h5>
<ul>
<li>采用数据库镜像(Database Mirroring)实现高可用复制；
<ul>
<li>每个库对应一组监控Agent，通过心跳对数据库进行实时监控；</li>
<li>如果节点故障，系统将自动恢复/重建；节点切换对业务透明</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/22/imaged05d86a5f751b02e.png" alt="镜像机制" /></p>
<h5 id="sql-server应用windows平台"><a class="markdownIt-Anchor" href="#sql-server应用windows平台"></a> SQL Server应用：Windows平台</h5>
<ul>
<li>Windows平台架构及云数据库SQL Server可以协助用户快速部署企业OA/ERP/销售管理等移动办公平台。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/22/image6ca0c996d4d33f2c.png" alt="" /></p>
<h4 id="云数据库-postgresql"><a class="markdownIt-Anchor" href="#云数据库-postgresql"></a> 云数据库 PostgreSQL</h4>
<ul>
<li>
<p>PostgreSQL是开源NewSQL数据库，结合SQL和NoSQL特性，已成为商用首选开源关系数据库。</p>
</li>
<li>
<p>TencentDB for PostgreSQL让用户在云端轻松设置、操作和扩展PostgreSQL数据库：</p>
<ul>
<li>更多的功能特性支持；</li>
<li>商用级数据强一致；</li>
<li>超高的性能；</li>
<li>高可靠性</li>
</ul>
</li>
</ul>
<h5 id="postgresql应用场景"><a class="markdownIt-Anchor" href="#postgresql应用场景"></a> PostgreSQL应用场景</h5>
<ul>
<li>强大计算性能、空间地理信息处理能力，适用于面向企业复杂SQL处理的OLAP或OLTP场景：
<ul>
<li><strong>企业核心应用：</strong> 如ERP、交易系统、财务系统等；</li>
<li><strong>含LBS的应用：</strong> 大型游戏、O2O等应用；</li>
<li><strong>数据仓库和大数据：</strong> 支持更多数据类型和高级分析功能；</li>
<li><strong>建站或APP：</strong> 自定义函数、数据格式；全文搜索功能。</li>
</ul>
</li>
</ul>
<h5 id="oltp与olap对比"><a class="markdownIt-Anchor" href="#oltp与olap对比"></a> OLTP与OLAP对比</h5>
<ul>
<li>TDSQL是一个面向OLTP业务的分布式数据库。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">特点</th>
<th style="text-align:center">OLTP</th>
<th style="text-align:center">OLAP</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>主要场景</strong></td>
<td style="text-align:center">日常交易处理</td>
<td style="text-align:center">统计、报表、分析</td>
</tr>
<tr>
<td style="text-align:center"><strong>面向业务</strong></td>
<td style="text-align:center">面向实时交易类，如电商交易、订单</td>
<td style="text-align:center">面向统计分析的，如ERP、BI等</td>
</tr>
<tr>
<td style="text-align:center"><strong>性能消耗</strong></td>
<td style="text-align:center">磁盘IO</td>
<td style="text-align:center">CPU</td>
</tr>
<tr>
<td style="text-align:center"><strong>实时性</strong></td>
<td style="text-align:center">实时读写要求高</td>
<td style="text-align:center">实时读写要求低</td>
</tr>
</tbody>
</table>
<h4 id="云数据库-mariadbtdsql"><a class="markdownIt-Anchor" href="#云数据库-mariadbtdsql"></a> 云数据库 MariaDB/TDSQL</h4>
<ul>
<li><strong>MariaDB</strong> 由MySQL创始人创立，承诺永远开源，高度兼容MySQL。</li>
<li><strong>TencentDB for MariaDB</strong> 定位于高安全性高性能的企业级云数据库。</li>
<li><strong>分布式数据库TDSQL：</strong>
<ul>
<li>TDSQL是腾讯云维护的金融级分布式架构MariaDB内核分支；支持自动水平拆分，业务感受完整的逻辑表，数据均匀拆分到物理分片中。TDSQL解决如下难题：
<ul>
<li>单机数据库到达瓶颈；</li>
<li>应用层分片开发工作量大；</li>
<li>开源NoSQL运维支持不足。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="mariadb产品优势"><a class="markdownIt-Anchor" href="#mariadb产品优势"></a> MariaDB产品优势</h5>
<ul>
<li><strong>强同步MAR</strong>
<ul>
<li>强同步保障数据一致性；</li>
<li>改造线程池模型提升性能；</li>
<li>满足金融级强一致性要求。</li>
</ul>
</li>
<li><strong>高可用</strong>
<ul>
<li>一主多从透明故障切换；</li>
<li>实时自动实例监控与修复；</li>
<li>多可用区部署，备份回档。</li>
</ul>
</li>
<li><strong>高性能</strong>
<ul>
<li>面向OLTP场景；</li>
<li>深度定制优化内核；</li>
<li>读写分离扩展性能。</li>
</ul>
</li>
</ul>
<h5 id="数据复制方式"><a class="markdownIt-Anchor" href="#数据复制方式"></a> 数据复制方式</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/22/image70090c698a90b115.png" alt="异步复制、半同步复制、强同步复制" /></p>
<h5 id="mar强同步"><a class="markdownIt-Anchor" href="#mar强同步"></a> MAR强同步</h5>
<ul>
<li><strong>腾讯自研的异步多线程强同步复制方案（MAR）</strong>：
<ul>
<li><strong>数据强一致：</strong> 每个节点都包含完整数据副本，可以随时切换；</li>
<li><strong>业务层透明：</strong> 业务层面无需做读写分离或同步强化工作；</li>
<li><strong>性能优化：</strong> 将串行同步线程异步化，引入线程池能力；</li>
<li><strong>自动管控：</strong> 支持自动成员控制，故障节点自动从集群中移除。</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/22/image95fa5ae0eb8bea9e.png" alt="数据复制方案对比" /></p>
<h5 id="tdsql水平拆分机制"><a class="markdownIt-Anchor" href="#tdsql水平拆分机制"></a> TDSQL水平拆分机制</h5>
<ul>
<li><strong>垂直拆分：</strong> 就是按业务应用切分不同内容分派到不同数据库中。</li>
<li><strong>水平切分</strong> 将一个表的数据分散到多个物理独立的数据库服务器中。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/22/image5dce51c781ea8406.png" alt="水平拆分" /></p>
<h5 id="tdsql-share-nothing架构"><a class="markdownIt-Anchor" href="#tdsql-share-nothing架构"></a> TDSQL Share-Nothing架构</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/22/image8e1c508552da2427.png" alt="架构" /></p>
<h5 id="mariadb应用金融业务"><a class="markdownIt-Anchor" href="#mariadb应用金融业务"></a> MariaDB应用：金融业务</h5>
<ul>
<li>业务要求：强一致性、高性能高并发、高安全性</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/22/image6d820ed619154f88.png" alt="金融业务" /></p>
<h5 id="tdsql应用场景"><a class="markdownIt-Anchor" href="#tdsql应用场景"></a> TDSQL应用场景</h5>
<ul>
<li>大型应用（超高并发实时交易场景）</li>
<li>物联网数据（PB级数据存储访问场景）</li>
<li>文件索引（万亿行数据毫秒级存取）</li>
<li>高性价比商业数据库解决方案</li>
</ul>
<h4 id="云数据库-cynosdb"><a class="markdownIt-Anchor" href="#云数据库-cynosdb"></a> 云数据库 CynosDB</h4>
<ul>
<li>CynosDB是腾讯云自研的企业级云原生分布式云数据库：
<ul>
<li>高性能：单节点读性能可达130万QPS，MySQL 8倍、PostgreSQL 4倍；</li>
<li>大容量：最高128TB的海量存储，可自动扩缩容；</li>
<li>低成本：价格仅为通用商业数据库的1/15。</li>
<li>兼容性：100%兼容MySQL和PostgreSQL。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">CynosDB版本</th>
<th style="text-align:center">数据库版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">兼容MySQL版</td>
<td style="text-align:center">MySQL 5.7</td>
</tr>
<tr>
<td style="text-align:center">兼容PostgreSQL版</td>
<td style="text-align:center">PostgreSQL 10</td>
</tr>
</tbody>
</table>
<h5 id="cynosdb架构"><a class="markdownIt-Anchor" href="#cynosdb架构"></a> CynosDB架构</h5>
<ul>
<li>内核定制优化：60多项数据库内核优化，实现诸多企业级特性。</li>
<li>日志即数据库：将WAL LOG下沉到存储层，网络IO减少到最低。</li>
<li>新硬件与软件优化：SPDK和RDMA零拷贝技术，减少系统切换性能损耗。</li>
<li>弹性扩展：CynosFS可计算智能存储，自动扩缩容与故障检测。</li>
</ul>
<h5 id="cynosdb应用场景"><a class="markdownIt-Anchor" href="#cynosdb应用场景"></a> CynosDB应用场景</h5>
<ul>
<li><strong>企业核心应用：</strong>
<ul>
<li>高性能、高可用、低成本</li>
</ul>
</li>
<li><strong>互联网或游戏业务：</strong>
<ul>
<li>大容量、弹性扩展、秒级备份回档</li>
</ul>
</li>
</ul>
<h3 id="腾讯云nosql数据库"><a class="markdownIt-Anchor" href="#腾讯云nosql数据库"></a> 腾讯云NoSQL数据库</h3>
<h4 id="云数据库mongodb"><a class="markdownIt-Anchor" href="#云数据库mongodb"></a> 云数据库MongoDB</h4>
<ul>
<li>TencentDB for MongoDB基于开源MongoDB打造的高性能、分布式文档数据库服务。
<ul>
<li>兼容开源MongoDB协议、DynamoDB协议；</li>
<li>腾讯自研的MongoDB分布式集群；</li>
<li>模式自由schema-free;</li>
<li>自动容灾、备份回档。</li>
</ul>
</li>
</ul>
<h5 id="mongodb容灾架构"><a class="markdownIt-Anchor" href="#mongodb容灾架构"></a> MongoDB容灾架构</h5>
<ul>
<li><strong>主从热备架构，具有自动容灾机制：</strong>
<ul>
<li>集群通过心跳检测监控节点状态；</li>
<li>主节点不可达时，集群内会自动选举出新的主节点；</li>
<li>主节点故障后重新拉起，会变成从节点；如果拉起失败，会补充新节点进入集群；</li>
<li>任一从节点不可达时，会尝试拉起节点或者补充新节点。</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/22/image9a904b7b9d02de39.png" alt="容灾架构" /></p>
<h5 id="mongodb应用游戏开发场景"><a class="markdownIt-Anchor" href="#mongodb应用游戏开发场景"></a> MongoDB应用：游戏开发场景</h5>
<ul>
<li>需求：游戏需求变化快，版本迭代快，需要频繁修改数据库表结构。</li>
<li>方案：MongoDB无固定模式，大幅缩短版本迭代周期。</li>
</ul>
<h4 id="云数据库redis"><a class="markdownIt-Anchor" href="#云数据库redis"></a> 云数据库Redis</h4>
<ul>
<li>提供兼容开源Redis协议的弹性缓存和存储服务。</li>
<li>支持主从热备，自动容灾切换、数据备份、故障迁移、实例监控、在线扩容、数据回档等全套的数据库服务。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">引擎版本</th>
<th style="text-align:center">版本说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">社区版Redis引擎</td>
<td style="text-align:center">Redis 2.8、Redis 4.0版本协议和命令</td>
</tr>
<tr>
<td style="text-align:center">自研版CKV引擎</td>
<td style="text-align:center">兼容Redis 3.2版本协议和命令</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">存储引擎</th>
<th style="text-align:center">社区版引擎</th>
<th style="text-align:center">腾讯云CKV引擎</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>支持版本</strong></td>
<td style="text-align:center"><strong>单机版、主从版、集群版</strong></td>
<td style="text-align:center"><strong>主从版、集群版</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong>架构</strong></td>
<td style="text-align:center">单线程</td>
<td style="text-align:center">多线程</td>
</tr>
<tr>
<td style="text-align:center"><strong>QPS</strong></td>
<td style="text-align:center">8万-10万</td>
<td style="text-align:center">8万-12万</td>
</tr>
<tr>
<td style="text-align:center"><strong>冷热分离</strong></td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">不支持</td>
</tr>
<tr>
<td style="text-align:center"><strong>强同步</strong></td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">不支持</td>
</tr>
<tr>
<td style="text-align:center"><strong>数据备份</strong></td>
<td style="text-align:center">通过bgsave备份，需求2倍内存</td>
<td style="text-align:center">无需额外内存</td>
</tr>
<tr>
<td style="text-align:center"><strong>平滑升级</strong></td>
<td style="text-align:center">集群版支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center"><strong>快速启动</strong></td>
<td style="text-align:center">慢</td>
<td style="text-align:center">基于内存共享数据、1秒内</td>
</tr>
<tr>
<td style="text-align:center"><strong>单节点容量</strong></td>
<td style="text-align:center">0.25GB-60GB</td>
<td style="text-align:center">4GB-384GB</td>
</tr>
</tbody>
</table>
<h4 id="云数据库memcached"><a class="markdownIt-Anchor" href="#云数据库memcached"></a> 云数据库Memcached</h4>
<ul>
<li>提供兼容Memcached协议、高性能、高可靠、易用的弹性缓存和存储服务。</li>
<li>提供主从热备、自动容灾切换、在线扩容、数据备份等实例监控全套数据库服务。</li>
</ul>
<h5 id="memcached自动容灾"><a class="markdownIt-Anchor" href="#memcached自动容灾"></a> Memcached自动容灾</h5>
<ul>
<li>
<p>单个实例保存在多个节点，双机热备。</p>
</li>
<li>
<p>节点故障时，系统自动切换或人工切换。</p>
<ul>
<li>当主节点故障时，接入机会把读写请求发送到从节点；</li>
<li>新增一个从节点开始从新的主机拷贝数据，完成主从同步。</li>
<li>当从节点故障时，直接加入新的从节点</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image.png" alt="自动容灾" /></p>
<h5 id="memcached在线扩容"><a class="markdownIt-Anchor" href="#memcached在线扩容"></a> Memcached在线扩容</h5>
<ul>
<li>
<p>自动扩容以保证用户实例始终有20%的可用空间。</p>
</li>
<li>
<p><strong>实例需要扩容时：</strong></p>
<ul>
<li>检查实例当前所在存储节点的剩余空间是否满足扩容需求；</li>
<li>如果满足则直接原地扩容，否则需要增加额外的存储节点。</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image304f0c44aa9276df.png" alt="在线扩容" /></p>
<h5 id="redismemcached应用场景"><a class="markdownIt-Anchor" href="#redismemcached应用场景"></a> Redis/Memcached应用场景</h5>
<ul>
<li><strong>存储需要高速访问的热点数据：</strong>
<ul>
<li>游戏行业场景：积分排行榜。</li>
<li>互联网/APP：热点访问/下载数据</li>
<li>电商场景：商品分类数据/图片、商品搜索结果</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image937800a1506f091f.png" alt="游戏、电商" /></p>
<h4 id="云数据库ctsdb"><a class="markdownIt-Anchor" href="#云数据库ctsdb"></a> 云数据库CTSDB</h4>
<h5 id="时序数据库ctsdb"><a class="markdownIt-Anchor" href="#时序数据库ctsdb"></a> 时序数据库CTSDB</h5>
<ul>
<li><strong>时序数据库</strong> 主要用于处理带时间标签（按照时间的顺序变化）的数据。</li>
<li><strong>TencentDB for STSDB</strong> 提供高性能、分布式、安全、稳定的云端时序数据库。
<ul>
<li>高并发写入：写内存-Dump-批量写入</li>
<li>低成本存储：Rollup数据聚合、数据压缩</li>
<li>聚合分析能力：丰富聚合查询与分析方式</li>
</ul>
</li>
</ul>
<h5 id="ctsdb应用场景iot监控环境"><a class="markdownIt-Anchor" href="#ctsdb应用场景iot监控环境"></a> CTSDB应用场景：IoT监控环境</h5>
<ul>
<li><strong>IoT监控环境</strong>
<ul>
<li>PB级数据，CTSDB实时写入，快速查询。</li>
</ul>
</li>
<li><strong>互联网业务监控分析</strong>
<ul>
<li>CTSDB生成日志报表提供问题分析排查</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imagef22fd520f371a258.png" alt="应用" /></p>
<h4 id="数据库一体机tdata"><a class="markdownIt-Anchor" href="#数据库一体机tdata"></a> 数据库一体机TData</h4>
<ul>
<li>数据库一体机TData：融合高性能计算、热插拔山村、Infiniband网络的软硬件一体化数据库解决方案。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imagedd98461a80d479c5.png" alt="TData" /></p>
<h5 id="tdata产品优势"><a class="markdownIt-Anchor" href="#tdata产品优势"></a> TData产品优势</h5>
<ul>
<li>金融安全/合规</li>
<li>高可靠性</li>
<li>高性能/性价比</li>
<li>快速部署/扩展</li>
</ul>
<h5 id="tdata应用场景"><a class="markdownIt-Anchor" href="#tdata应用场景"></a> TData应用场景</h5>
<ul>
<li>可满足OLAP、OLTP以及混合负载等场景</li>
<li><strong>两地三中心：</strong> 同城双活、异地灾备，如金融行业</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image56a5f89d8c27e1f3.png" alt="同城双活、异地灾备" /></p>
<h3 id="腾讯云数据传输服务"><a class="markdownIt-Anchor" href="#腾讯云数据传输服务"></a> 腾讯云数据传输服务</h3>
<h4 id="数据传输服务dts"><a class="markdownIt-Anchor" href="#数据传输服务dts"></a> 数据传输服务DTS</h4>
<ul>
<li>腾讯云数据传输服务（Data  Transmission,DTS）提供一体化的数据库数据传输管理服务：
<ul>
<li>数据迁移
<ul>
<li>支持不同环境不同类型的数据库迁移。</li>
</ul>
</li>
<li>数据同步
<ul>
<li>支持云数据库MySQL实例之间实时同步。</li>
</ul>
</li>
<li>数据订阅
<ul>
<li>基于binlog实时获取同步数据库增量更新。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="dts迁移要求"><a class="markdownIt-Anchor" href="#dts迁移要求"></a> DTS迁移要求</h5>
<ul>
<li><strong>源数据库类型：</strong>
<ul>
<li>MySQL、Redis、MariaDB、PostgreSQL、Percona</li>
</ul>
</li>
<li><strong>接入类型：</strong>
<ul>
<li>公网、专线接入、VPN接入、云联网；云数据库、CVM自建。</li>
</ul>
</li>
<li><strong>目标数据库：</strong>
<ul>
<li>迁移到同类型数据库。</li>
</ul>
</li>
</ul>
<h5 id="dts应用数据库灾备"><a class="markdownIt-Anchor" href="#dts应用数据库灾备"></a> DTS应用：数据库灾备</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image5c3b137a3429d4c0.png" alt="本地数据库灾备、云上数据库灾备" /></p>
<h5 id="dts应用数据上云归档"><a class="markdownIt-Anchor" href="#dts应用数据上云归档"></a> DTS应用：数据上云/归档</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image0af610627220e428.png" alt="数据上云迁移、数据归档存储" /></p>
<h3 id="腾讯云数据库计费方案"><a class="markdownIt-Anchor" href="#腾讯云数据库计费方案"></a> 腾讯云数据库计费方案</h3>
<h4 id="关系型数据库计费"><a class="markdownIt-Anchor" href="#关系型数据库计费"></a> 关系型数据库计费</h4>
<ul>
<li><strong>实例费用</strong> = 实例规格费用（内存大小） + 存储空间费用（磁盘容量）</li>
</ul>
<ol>
<li><strong>MySQL计费方式：</strong>
<ul>
<li>包年包月：预付费、元/月</li>
<li>按量计费：按小时三级阶梯计费，使用越长价格越低。</li>
</ul>
</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">阶梯</th>
<th style="text-align:center">阶梯区间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">T1</td>
<td style="text-align:center">0 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo></mrow><annotation encoding="application/x-tex">&lt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span></span></span></span> T1 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⩽</mo></mrow><annotation encoding="application/x-tex">\leqslant</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mrel amsrm">⩽</span></span></span></span> 96小时</td>
</tr>
<tr>
<td style="text-align:center">T2</td>
<td style="text-align:center">96小时 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo></mrow><annotation encoding="application/x-tex">&lt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span></span></span></span> T2 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⩽</mo></mrow><annotation encoding="application/x-tex">\leqslant</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mrel amsrm">⩽</span></span></span></span> 360小时</td>
</tr>
<tr>
<td style="text-align:center">T3</td>
<td style="text-align:center">0 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo></mrow><annotation encoding="application/x-tex">&lt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span></span></span></span> T3 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span></span></span></span> 360小时</td>
</tr>
</tbody>
</table>
<ol start="2">
<li><strong>仅支持包年包月计费的数据库：</strong>
<ul>
<li>云数据库MariaDB</li>
<li>云数据库SQL Server</li>
<li>云数据库PostgreSQL</li>
</ul>
</li>
</ol>
<ul>
<li><strong>费用计算：</strong> 实例总价 = （内存容量 * 单价 + 硬盘容量 * 单价） * 实例数量 * 时长 * 折扣率</li>
</ul>
<h5 id="tdsql计费方案"><a class="markdownIt-Anchor" href="#tdsql计费方案"></a> TDSQL计费方案</h5>
<ul>
<li><strong>包年包月预付费，机架方案计费如下：</strong>
<ul>
<li>实例总价 = （分片内存 * 单价 + 分片磁盘 * 单价） * 分片数量 * 时间 * 折扣率。</li>
</ul>
</li>
</ul>
<h5 id="关系型数据库成绩"><a class="markdownIt-Anchor" href="#关系型数据库成绩"></a> 关系型数据库成绩</h5>
<ul>
<li><strong>数据库升级（包年包月）：</strong>
<ul>
<li>升级费用 = 实例到期剩余天数T * （目标实例单价P2 - 当前实例月单价P1）/30</li>
</ul>
</li>
</ul>
<h4 id="mongodb计费"><a class="markdownIt-Anchor" href="#mongodb计费"></a> MongoDB计费</h4>
<ul>
<li>实例费用 = 实例规格（内存）费用 + 存储空间费用</li>
<li><strong>计费方式：</strong>
<ul>
<li>包年包月：预付费</li>
<li>按量计费：基于不同内存规格，三级阶梯计费。</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image0c35251eff1eca58.png" alt="阶梯计费" /></p>
<h4 id="redis计费"><a class="markdownIt-Anchor" href="#redis计费"></a> Redis计费</h4>
<ul>
<li><strong>基于内存使用量计费：</strong>
<ul>
<li>包年包月：预付费</li>
<li>按量计费：
<ul>
<li>按秒计费，按小时结算；购买时冻结1小时费用；基于使用时长阶梯分段计费。</li>
</ul>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">阶梯区间</th>
<th style="text-align:center">阶梯单价（仅供参考，官网为准）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo></mrow><annotation encoding="application/x-tex">&lt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span></span></span></span> T1 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⩽</mo></mrow><annotation encoding="application/x-tex">\leqslant</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mrel amsrm">⩽</span></span></span></span> 96小时</td>
<td style="text-align:center">0.21元/小时</td>
</tr>
<tr>
<td style="text-align:center">96小时 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo></mrow><annotation encoding="application/x-tex">&lt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span></span></span></span> T2 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⩽</mo></mrow><annotation encoding="application/x-tex">\leqslant</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mrel amsrm">⩽</span></span></span></span> 360小时</td>
<td style="text-align:center">0.16元/小时</td>
</tr>
<tr>
<td style="text-align:center">T3 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span></span></span></span> 360小时</td>
<td style="text-align:center">0.11元/小时</td>
</tr>
</tbody>
</table>
<h4 id="mencached计费"><a class="markdownIt-Anchor" href="#mencached计费"></a> Mencached计费</h4>
<ul>
<li><strong>基于内存使用量，按量计费：</strong>
<ul>
<li>按天计算，按月结算，每月2、3号进行结算扣费。</li>
<li>每日费用 = 每日内存最大值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 单价；</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">地域</th>
<th style="text-align:center">每G内存价格（仅供参考，官网为准）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">北京、上海、广州、广州open</td>
<td style="text-align:center">2元/天</td>
</tr>
<tr>
<td style="text-align:center">香港、多伦多</td>
<td style="text-align:center">2.5元/天</td>
</tr>
</tbody>
</table>
<h3 id="总结-5"><a class="markdownIt-Anchor" href="#总结-5"></a> 总结</h3>
<ul>
<li>数据库基础知识：SQL对比NoSQL、主流NoSQL、数据库趋势</li>
<li>腾讯云关系型数据库：MySQL、SQL Server、PostgreSQL、MariaDB/TDSQL、CynosDB|</li>
<li>腾讯云非关系型数据库：MongoDB、Redis/Memcached、CTSDB、TData、DTS</li>
<li>腾讯云数据库计费方案：包年包月、按量计费</li>
</ul>
<h2 id="云安全"><a class="markdownIt-Anchor" href="#云安全"></a> 云安全</h2>
<h3 id="云安全体系与标准"><a class="markdownIt-Anchor" href="#云安全体系与标准"></a> 云安全体系与标准</h3>
<h4 id="安全责任共担模型"><a class="markdownIt-Anchor" href="#安全责任共担模型"></a> 安全责任共担模型</h4>
<h5 id="云安全基本原则"><a class="markdownIt-Anchor" href="#云安全基本原则"></a> 云安全基本原则</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imagec75281371b15af1f.png" alt="SCE、CIA" /></p>
<h5 id="安全责任共担模型-2"><a class="markdownIt-Anchor" href="#安全责任共担模型-2"></a> 安全责任共担模型</h5>
<ul>
<li>云安全保障需要客户和云厂商共同承担相应责任，采取有效防御备份措施</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imageb9d2bed880382690.png" alt="安全责任划分" /></p>
<h4 id="云安全标准与技术"><a class="markdownIt-Anchor" href="#云安全标准与技术"></a> 云安全标准与技术</h4>
<h5 id="云安全指南40"><a class="markdownIt-Anchor" href="#云安全指南40"></a> 云安全指南4.0</h5>
<ul>
<li><strong>CSA4.0定义两大类13个领域，介绍战略和战术上云安全的痛点与措施。</strong></li>
<li><strong>治理域（战略/策略）</strong>
<ol>
<li>治理和企业风险管理</li>
<li>法律问题：合同和电子举证</li>
<li>合规性和审计管理</li>
<li>信息治理</li>
</ol>
</li>
<li><strong>运行域（战术/技术）</strong>
<ol>
<li>管理平台和业务连续性</li>
<li>基础设施安全</li>
<li>虚拟化及容器（Container）技术</li>
<li>事件响应、通告和补救</li>
<li>应用安全</li>
<li>数据安全和加密</li>
<li>身份、授权和访问管理</li>
<li>安全即服务</li>
<li>相关技术</li>
</ol>
</li>
</ul>
<h5 id="等级保护标准20"><a class="markdownIt-Anchor" href="#等级保护标准20"></a> 等级保护标准2.0</h5>
<ul>
<li><strong>云等保2.0架构为两大部分（管理领域和技术领域），重点考虑合规性。</strong></li>
<li><strong>管理要求：</strong>
<ul>
<li>安全管理机构和人员</li>
<li>安全建设管理</li>
<li>安全运维管理</li>
<li>安全策略和管理制度</li>
</ul>
</li>
<li><strong>技术要求：</strong>
<ul>
<li>物流和环境安全</li>
<li>网络和通信安全</li>
<li>设备和计算安全</li>
<li>应用和数据安全</li>
</ul>
</li>
</ul>
<h5 id="可信云服务认证"><a class="markdownIt-Anchor" href="#可信云服务认证"></a> 可信云服务认证</h5>
<ul>
<li>可信云服务（TRUCS）认证是我国目前唯一针对云服务的权威认证体系。</li>
<li>三大类16个指标覆盖云服务商承诺的服务的SLA中的90%的问题</li>
<li>腾讯云多个业务通过可信云服务认证、首批通过可信云金牌运维专项评估。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imaged6fc9892dbb529f7.png" alt="可信云服务认证" /></p>
<h5 id="gartner十大安全项目"><a class="markdownIt-Anchor" href="#gartner十大安全项目"></a> Gartner十大安全项目</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image40eacdbdf1c83e18.png" alt="Gartner十大安全项目" /></p>
<ol>
<li>Privileged Access Management，特权账户管理（PAM）</li>
<li>CARTA-Inspired Vulnerability Management，符合CARTA方法论的弱点管理</li>
<li>Detection and Response，检测与响应</li>
<li>Cloud Security Posture Management，云安全配置管理（CSPM）</li>
<li>Cloud Access Security Broker，云访问安全代理（CASB）</li>
<li>Business Email Compromise，商业邮件失陷</li>
<li>Dark Data Discovery，暗数据发现</li>
<li>Security Incident Response，安全事件响应</li>
<li>Container Security，容器安全</li>
<li>Security Rating Services，安全评级服务</li>
</ol>
<h4 id="常见云安全威胁"><a class="markdownIt-Anchor" href="#常见云安全威胁"></a> 常见云安全威胁</h4>
<ul>
<li>病毒攻击
<ul>
<li>黑客通过在互联网上传播病毒等恶意代码，对计算机系统或者系统中的文件进行破坏，造成系统或文件无法正常使用。</li>
</ul>
</li>
<li>DDoS网络攻击
<ul>
<li>官网、支付接口、APP等业务面临风险，<br />
攻击对象主要是金融、电商、游戏平台各种在线实时业务体系</li>
</ul>
</li>
<li>木马攻击WebShell
<ul>
<li>黑客通过漏洞入侵网站后放置动态脚，通过后门木马持续控制服务器，进行文件上传下载、执行命令等各种破坏。</li>
</ul>
</li>
<li>渗透攻击数据拖取
<ul>
<li>黑客通过拖库、撞库、入侵的方式盗取数据<br />
潜伏期很长,企业发现的时候数据已经大面<br />
积流失。</li>
</ul>
</li>
<li>APP漏洞
<ul>
<li>黑客利用APP开发者在逻辑设计上的缺陷或错误编写所产生的漏洞，能轻易的人植入恶意代码，窃取敏感信息和远程控制。</li>
</ul>
</li>
<li>营销撸羊毛
<ul>
<li>“羊毛党“有选择性的参加线上的活动，以<br />
相对较低或者零成本获取物质上的优惠，严<br />
重破环了活动的目的、侵占了活动的资源。</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imagebb0c8d04e1eabd20.png" alt="互联网业务安全风险" /></p>
<h4 id="腾讯云安全体系"><a class="markdownIt-Anchor" href="#腾讯云安全体系"></a> 腾讯云安全体系</h4>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imageed2ba88fe959fbca.png" alt="腾讯云安全体系" /></p>
<h3 id="网络安全产品大禹"><a class="markdownIt-Anchor" href="#网络安全产品大禹"></a> 网络安全产品————大禹</h3>
<h4 id="大禹基本功能"><a class="markdownIt-Anchor" href="#大禹基本功能"></a> 大禹基本功能</h4>
<h5 id="ddos攻击挑战"><a class="markdownIt-Anchor" href="#ddos攻击挑战"></a> DDoS攻击挑战</h5>
<ul>
<li>门槛很低：攻击工具可以在网上下载/购买；</li>
<li>成本低廉：数百元可获得100G的攻击流量；</li>
<li>团队作战：已形成组织化分工明确黑色产业链。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image871bb0ba562b9d2c.png" alt="勒索攻击" /></li>
<li>海量终端覆盖–腾讯云掌握DDoS攻击的整个黑色产业链</li>
</ul>
<h5 id="大禹基本功能-2"><a class="markdownIt-Anchor" href="#大禹基本功能-2"></a> 大禹基本功能</h5>
<ul>
<li>基础防护
<ul>
<li>默认开启，免费使用</li>
<li>提供DDoS/CC防护</li>
<li>2Gbps防护峰值</li>
</ul>
</li>
<li>BGP高防包
<ul>
<li>自主更换绑定IP</li>
<li>独享包/共享包</li>
<li>310Gbps防护峰值</li>
</ul>
</li>
<li>BGP高防IP
<ul>
<li>将攻击引流到高防IP</li>
<li>支持腾讯云/非腾讯云</li>
<li>400Gbps防护峰值</li>
</ul>
</li>
<li>棋牌盾
<ul>
<li>面向游戏行业</li>
<li>IP池轮询技术</li>
<li>用户隐藏与流量调度</li>
</ul>
</li>
</ul>
<h4 id="大禹技术原理"><a class="markdownIt-Anchor" href="#大禹技术原理"></a> 大禹技术原理</h4>
<ul>
<li>
<p>高防IP牵引攻击流量，保护后端业务：</p>
<ul>
<li>配置高防IP作为业务IP对外发布，隐藏客户真实源站IP。</li>
<li>将流量引流至腾讯高防机房，清洗后正常流量转发到客户源站。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image0f1c8793b01df1b9.png" alt="高防IP清洗攻击流量" /></li>
</ul>
</li>
<li>
<p><strong>双重清洗：</strong></p>
<ul>
<li>第一次采用通用策略，清洗常见攻击流量；</li>
<li>第二次采用定制策略，清洗变异攻击；</li>
</ul>
</li>
<li>
<p><strong>一对多支持：</strong></p>
<ul>
<li>一个高防IP支持60条转发规则；</li>
<li>每条规则可配置20个源站IP。</li>
</ul>
</li>
<li>
<p><strong>支持云与非云客户：</strong></p>
<ul>
<li>配备转发集群，流量清洗后转发至内部或外部机房。</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image2a4a3729128a26d1.png" alt="流量清洗架构" /></p>
<h4 id="大禹优势与应用"><a class="markdownIt-Anchor" href="#大禹优势与应用"></a> 大禹优势与应用</h4>
<h5 id="大禹产品优势"><a class="markdownIt-Anchor" href="#大禹产品优势"></a> 大禹产品优势</h5>
<ul>
<li>海量防护资源
<ul>
<li>单节点T级防护能力、900G+防护峰值</li>
</ul>
</li>
<li>优质访问体验
<ul>
<li>30条BGP线路，平均访问延迟低于300ms</li>
</ul>
</li>
<li>领先清洗能力
<ul>
<li>腾讯自研防护集群、AI之恶能，成功率99.995%</li>
</ul>
</li>
<li>隐藏用户源站
<ul>
<li>高防IP替换并隐藏源站IP，提升安全性</li>
</ul>
</li>
</ul>
<h5 id="大禹应用场景"><a class="markdownIt-Anchor" href="#大禹应用场景"></a> 大禹应用场景</h5>
<ul>
<li>游戏
<ul>
<li>恶意攻击导致用户大批掉线、访问缓慢</li>
<li>UDP小包攻击、ACK Flood攻击、游戏外挂等攻击最终导致用户流失</li>
</ul>
</li>
<li>网站
<ul>
<li>网站服务器的真实IP泄露、流量攻击或应用层攻击，导致网站访问缓慢甚至直接瘫痪</li>
</ul>
</li>
<li>金融
<ul>
<li>在银行、保险、证券、互联网金融，恶意竞争使用DDoS攻击导致网站无法打开或APP无法登录，严重影响投资者信心</li>
</ul>
</li>
</ul>
<h4 id="大禹计费方案"><a class="markdownIt-Anchor" href="#大禹计费方案"></a> 大禹计费方案</h4>
<h5 id="大禹计费方案bgp高防包"><a class="markdownIt-Anchor" href="#大禹计费方案bgp高防包"></a> 大禹计费方案：BGP高防包</h5>
<ul>
<li><strong>BGP高防包费用：</strong> 保底防护峰值 + 弹性防护峰值</li>
<li><strong>基于高防包类型：</strong> 独享型（单IP）、共享型（多IP）</li>
</ul>
<p>|计费项|计费模式|付费说明|<br />
|保底防护峰值|包年包月、预付费|提供基础防护带宽，价格由保底防护峰值和购买时长确定，防护级别只升不降。|<br />
|弹性防护峰值|按天计费、后付费|触发弹性防护后，按当天最高攻击峰值所对应的弹性防护峰值区间计费。支持升级、降级配置。|</p>
<h5 id="大禹计费方案bgp高防ip"><a class="markdownIt-Anchor" href="#大禹计费方案bgp高防ip"></a> 大禹计费方案：BGP高防IP</h5>
<ul>
<li><strong>BGP高防IP：</strong> 保底防护峰值 + 弹性防护峰值 + 转发规则数 + 转发带宽</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">计费项</th>
<th style="text-align:center">计费模式</th>
<th style="text-align:center">付费说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">保底防护峰值</td>
<td style="text-align:center">包年包月、预付费</td>
<td style="text-align:center">提供基础防护带宽，价格由保底防护峰值和购买时长确定，防护级别只升不降</td>
</tr>
<tr>
<td style="text-align:center">弹性防护峰值</td>
<td style="text-align:center">按天计费、后付费</td>
<td style="text-align:center">触发弹性防护后，按当天最高攻击峰值所对应的弹性防护峰值区间计费。支持升级、降级配置。</td>
</tr>
<tr>
<td style="text-align:center">转发规则数</td>
<td style="text-align:center">包年包月按个数，后付费</td>
<td style="text-align:center">免费提供60个，超额的按500元/月/10个</td>
</tr>
<tr>
<td style="text-align:center">转发带宽</td>
<td style="text-align:center">包年包月按带宽、预付费</td>
<td style="text-align:center">清洗后转发回源带宽，免费100Mbps，超过需购买</td>
</tr>
</tbody>
</table>
<h3 id="主机安全产品云镜"><a class="markdownIt-Anchor" href="#主机安全产品云镜"></a> 主机安全产品————云镜</h3>
<h4 id="云镜主要功能"><a class="markdownIt-Anchor" href="#云镜主要功能"></a> 云镜主要功能</h4>
<h5 id="主机安全挑战"><a class="markdownIt-Anchor" href="#主机安全挑战"></a> 主机安全挑战</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image76c0c8277247a120.png" alt="安全挑战" /></p>
<h5 id="云镜基本功能"><a class="markdownIt-Anchor" href="#云镜基本功能"></a> 云镜基本功能</h5>
<ul>
<li>木马文件检测</li>
<li>密码破解检测</li>
<li>登录行为审计</li>
<li>漏洞检测预警</li>
<li>资产组件识别</li>
</ul>
<h5 id="云镜防护版本"><a class="markdownIt-Anchor" href="#云镜防护版本"></a> 云镜防护版本</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image27927d6289468b21.png" alt="云镜防护版本" /></p>
<h4 id="云镜技术原理"><a class="markdownIt-Anchor" href="#云镜技术原理"></a> 云镜技术原理</h4>
<ul>
<li><strong>基于“基于云+端”：</strong> 主机端轻量级Agent，检测计算和防护在云端进行。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image4cc64588f6a84d50.png" alt="" /></li>
<li><strong>基于云镜强大漏洞策略库</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image097034fd3914381c.png" alt="" /></li>
<li><strong>基于腾讯电脑管家的恶意文件检测能力</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image7a3fc246748ff668.png" alt="" /></li>
<li><strong>基于AI的WebShell检测技术</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imagef41c8a628531c7bc.png" alt="" /></li>
<li><strong>对密码破解行为进行检测告警</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imagea1a8db4e9e1221f0.png" alt="" /></li>
</ul>
<h4 id="云镜优势与应用"><a class="markdownIt-Anchor" href="#云镜优势与应用"></a> 云镜优势与应用</h4>
<h5 id="云镜产品优势"><a class="markdownIt-Anchor" href="#云镜产品优势"></a> 云镜产品优势</h5>
<ul>
<li>全面的漏洞监控
<ul>
<li>基于腾讯全网威胁情报数据源</li>
<li>腾讯电脑管家海量恶意样本资源</li>
</ul>
</li>
<li>基于AI的检测引擎
<ul>
<li>新一代TAV反病毒引擎及哈勃分析系统</li>
<li>基于机器学习的WebShell检测引擎</li>
</ul>
</li>
<li>低资源占用
<ul>
<li>轻量级Agent、计算与防护在云端</li>
<li>CPU使用率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo></mrow><annotation encoding="application/x-tex">&lt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span></span></span></span> 2%、内存占用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo></mrow><annotation encoding="application/x-tex">&lt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span></span></span></span> 30M</li>
</ul>
</li>
<li>高效资产管理
<ul>
<li>自动化获取主机资产信息，统一管理</li>
<li>安全事件统一管理，可视化运维平台</li>
</ul>
</li>
</ul>
<h5 id="云镜应用公有云场景"><a class="markdownIt-Anchor" href="#云镜应用公有云场景"></a> 云镜应用：公有云场景</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image1bbf786d7d6d0ad1.png" alt="公有云场景" /></p>
<h5 id="云镜应用私有云场景"><a class="markdownIt-Anchor" href="#云镜应用私有云场景"></a> 云镜应用：私有云场景</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image290417b4c6c2ba90.png" alt="私有云场景" /></p>
<h4 id="云镜计费方案"><a class="markdownIt-Anchor" href="#云镜计费方案"></a> 云镜计费方案</h4>
<ul>
<li><strong>基础防护：</strong> 可以免费使用，功能受限</li>
<li><strong>专业防护：</strong>
<ul>
<li><strong>按量计费：后付费</strong>
<ul>
<li>按开通专业防护的主机数量计费；</li>
<li>按天计费，北京时间每日凌晨两点扣费。</li>
</ul>
</li>
<li><strong>包年包月：</strong> 预付费，xx元/月</li>
</ul>
</li>
</ul>
<h3 id="网站安全产品网站管家"><a class="markdownIt-Anchor" href="#网站安全产品网站管家"></a> 网站安全产品————网站管家</h3>
<h4 id="网站管家功能"><a class="markdownIt-Anchor" href="#网站管家功能"></a> 网站管家功能</h4>
<h5 id="网站安全挑战"><a class="markdownIt-Anchor" href="#网站安全挑战"></a> 网站安全挑战</h5>
<ul>
<li><strong>Gartner insights:</strong>
<ul>
<li>信息安全攻击有<font color=red>75%</font>发生在Web应用层面；</li>
<li><font color=red>2/3</font>的Web站点都相当脆弱，易受攻击。</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image2bc0feffe0a8f21b.png" alt="网络安全挑战" /></p>
<h5 id="网络管家waf"><a class="markdownIt-Anchor" href="#网络管家waf"></a> 网络管家WAF</h5>
<ul>
<li>WAF（Web Application Firewall）是最常用最有效的Web应用保护方案    --Gartner WAF 魔力象限 2017</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image80a1a4ab548efd45.png" alt="" /></p>
<h5 id="网络管家功能"><a class="markdownIt-Anchor" href="#网络管家功能"></a> 网络管家功能</h5>
<ul>
<li>腾讯云网站管家为WAF为智能一站式网站安全防护平台：
<ul>
<li>AI + Web应用防火墙</li>
<li>0Day漏洞补丁</li>
<li>网页防篡改</li>
<li>数据防泄漏</li>
<li>爬虫Bot行为管理</li>
<li>DNS非法劫持检测</li>
</ul>
</li>
</ul>
<h4 id="waf技术原理"><a class="markdownIt-Anchor" href="#waf技术原理"></a> WAF技术原理</h4>
<ul>
<li><strong>攻击前：</strong> 7x24h实时检测分析安全隐患；</li>
<li><strong>攻击中：</strong> 识别与拦截恶意攻击、垃圾访问；</li>
<li><strong>攻击后：</strong> 通过云备份保障网页内容的正常显示。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image31f0d8797a84a1f0.png" alt="" /></p>
<ul>
<li>
<p><strong>反向代理 + 检测云：</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image820d035390d2fe0c.png" alt="" /></p>
<ul>
<li>业务侧更改DNS记录后，将流量转发给反向代理；</li>
<li>反向代理的安全模块接收到用户请求，封装后发送到检测云。</li>
<li>检测云收到请求并进行检测处理</li>
</ul>
</li>
<li>
<p><strong>WAF常用策略：</strong></p>
<ul>
<li>特征识别
<ul>
<li>识别攻击行为特征；</li>
<li>如识别病毒、蠕虫</li>
</ul>
</li>
<li>算法识别
<ul>
<li>基于语义理解识别；</li>
<li>如SQL注入、DDoS等。</li>
</ul>
</li>
<li>模式匹配
<ul>
<li>攻击行为归纳成一定模式，匹配后能确定是入侵行为。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="waf优势与应用"><a class="markdownIt-Anchor" href="#waf优势与应用"></a> WAF优势与应用</h4>
<ul>
<li>
<p><strong>久经考验的Web业务安全防护实践体系</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imagef5f85ccb734969cc.png" alt="" /></p>
</li>
<li>
<p><strong>AI + 规则 双引擎检测</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image9ed421ff531e35d8.png" alt="" /></p>
</li>
</ul>
<h5 id="waf应用场景"><a class="markdownIt-Anchor" href="#waf应用场景"></a> WAF应用场景</h5>
<ul>
<li>政务网站防护
<ul>
<li>保障政务网站内容不被黑篡改，民生数据不被入侵窃取。</li>
<li>保障民生服务正常可用，民众访问满意畅通。</li>
</ul>
</li>
<li>电商网站防护
<ul>
<li>智能过滤恶意攻击及垃圾访问，保障正常访问业务流畅</li>
<li>防止恶意爬虫竞争比价，库存查询，数据专区分析，黑产SEO。</li>
</ul>
</li>
<li>金融网站防护
<ul>
<li>监测DNS链路劫持，防止网站流量被恶意指向。</li>
<li>有效检测撞库等异常访问，数据不篡改、窃取或泄露。</li>
</ul>
</li>
</ul>
<h4 id="waf计费方案"><a class="markdownIt-Anchor" href="#waf计费方案"></a> WAF计费方案</h4>
<ul>
<li><strong>WAF费用：</strong> 基础防护套餐 + 扩展包
<ul>
<li>基础套餐：高级版、企业版、旗舰版</li>
<li>扩展包：域名包、带宽包、QPS包</li>
</ul>
</li>
<li><strong>付费方式：</strong> 按月预付费</li>
</ul>
<h4 id="web漏洞扫描"><a class="markdownIt-Anchor" href="#web漏洞扫描"></a> Web漏洞扫描</h4>
<ul>
<li>腾讯云Web漏洞扫描是用于监测网站漏洞的安全服务，为企业提供7 * 24小时全面准确的漏洞监测和专业的修复建议。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image9e1c8f8331270078.png" alt="" /></li>
<li>Web漏洞扫描按域名的扫描次数进行收费，预付费。</li>
</ul>
<h3 id="业务安全产品天御"><a class="markdownIt-Anchor" href="#业务安全产品天御"></a> 业务安全产品————天御</h3>
<h4 id="天御防刷服务"><a class="markdownIt-Anchor" href="#天御防刷服务"></a> 天御防刷服务</h4>
<h5 id="业务安全挑战"><a class="markdownIt-Anchor" href="#业务安全挑战"></a> 业务安全挑战</h5>
<ul>
<li><strong>黑产（薅羊毛）已经产业化</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image74712019296dd0d9.png" alt="" /></li>
</ul>
<h5 id="天御防刷服务-2"><a class="markdownIt-Anchor" href="#天御防刷服务-2"></a> 天御防刷服务</h5>
<ol>
<li><strong>注册保护</strong>
<ul>
<li>识别批量恶意注册、发现虚假或垃圾账号</li>
</ul>
</li>
<li><strong>登录保护</strong>
<ul>
<li>检测批量/异常登录，防止撞库与账户盗用</li>
</ul>
</li>
<li><strong>活动防刷</strong>
<ul>
<li>大数据分析用户行为与账号风险等级、识别对抗“羊毛党”。</li>
</ul>
</li>
</ol>
<h5 id="天御注册保护"><a class="markdownIt-Anchor" href="#天御注册保护"></a> 天御注册保护</h5>
<ul>
<li><strong>注册保护流程：</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imageb7c2db26aa16e472.png" alt="" /></li>
</ul>
<h5 id="天御防刷服务-3"><a class="markdownIt-Anchor" href="#天御防刷服务-3"></a> 天御防刷服务</h5>
<ul>
<li><strong>防刷流程（登录、注册、活动）：</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image9b5539da80ea3397.png" alt="" /></li>
</ul>
<h5 id="天御技术原理"><a class="markdownIt-Anchor" href="#天御技术原理"></a> 天御技术原理</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image5e0782e2c083ba63.png" alt="" /></p>
<h5 id="防刷服务优势"><a class="markdownIt-Anchor" href="#防刷服务优势"></a> 防刷服务优势</h5>
<ul>
<li>基于腾讯在电商、金融、社交、游戏等行业的运营和对抗经验。</li>
<li>积累了业内领先的对抗模型和黑产大数据。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imageea2386212ee908de.png" alt="" /></li>
</ul>
<h4 id="天御反欺诈服务"><a class="markdownIt-Anchor" href="#天御反欺诈服务"></a> 天御反欺诈服务</h4>
<ul>
<li><strong>金融风控关键挑战：</strong>
<ol>
<li><strong>贷前审核风控</strong>
<ul>
<li>天御反欺诈服务：识别客户的逾期风险</li>
<li>人脸识别服务：解决线上开户的本人和活人识别</li>
</ul>
</li>
<li><strong>银行卡支付防盗刷</strong>
<ul>
<li>支付防盗刷服务：发现银行卡存在的盗刷、洗钱、套现交易的风险</li>
</ul>
</li>
<li><strong>线上营销风控</strong>
<ul>
<li>活动防刷服务：信用卡积分、薅羊毛识别、邀请码返现等促销活动的被刷风险识别</li>
</ul>
</li>
<li><strong>网站或APP的安全风险</strong>
<ul>
<li>钓鱼网站举证服务：发现并溯源到钓鱼网站的whois信息</li>
<li>渗透测试服务：发现网站漏洞及时修复风险</li>
<li>安卓APP加固和安全测试服务</li>
<li>WAF应用拦截防御</li>
</ul>
</li>
</ol>
</li>
</ul>
<h5 id="天御反欺诈af"><a class="markdownIt-Anchor" href="#天御反欺诈af"></a> 天御反欺诈AF</h5>
<ul>
<li>天御借贷反欺诈（AntiFraud，AF）专注于识别金融行业的欺诈风险。
<ul>
<li>贷前检测</li>
<li>贷后监控</li>
<li>黑产情报</li>
<li>风险分析</li>
</ul>
</li>
</ul>
<h5 id="天御af技术原理"><a class="markdownIt-Anchor" href="#天御af技术原理"></a> 天御AF技术原理</h5>
<ul>
<li>输入手机号、ip、手机设备标识、身份证号、银行卡等信息；</li>
<li>天御返回风险等级，取值0-100，值越大表示风险等级越高。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image18ff10c96914a1ff.png" alt="" /></li>
</ul>
<h5 id="天御反欺诈优势"><a class="markdownIt-Anchor" href="#天御反欺诈优势"></a> 天御反欺诈优势</h5>
<ul>
<li><strong>实战经验：</strong> 应用与丰富的金融服务，连接亿万用户<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imaged3254b74dfdeb0c9.png" alt="" /></li>
<li><strong>AI+大数据：</strong> 从上千维度中选择40余个数据维度，有效识别业务的欺诈风险。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image6f949f3e3c915116.png" alt="" /></li>
</ul>
<h5 id="天御反欺诈场景"><a class="markdownIt-Anchor" href="#天御反欺诈场景"></a> 天御反欺诈场景</h5>
<ul>
<li><strong>申请贷款：</strong> 适用于银行、互金、P2P等金融行业的借贷场景，有效提高欺诈风险识别能力：
<ul>
<li>降低成本</li>
<li>灵活控制</li>
<li>加快放款速度</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image449457c4e12a35e2.png" alt="" /></p>
<h4 id="天御计费方案"><a class="markdownIt-Anchor" href="#天御计费方案"></a> 天御计费方案</h4>
<table>
<thead>
<tr>
<th style="text-align:left">产品</th>
<th style="text-align:left">计费方案</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">活动防刷</td>
<td style="text-align:left">按调用次数包年套餐，超出套餐的按次数区间表月结。</td>
</tr>
<tr>
<td style="text-align:left">注册保护</td>
<td style="text-align:left">提供按次调用的包年套餐</td>
</tr>
<tr>
<td style="text-align:left">登录保护</td>
<td style="text-align:left">基于每日防护上限次数，包年包月（包年价=包月价*10）</td>
</tr>
<tr>
<td style="text-align:left">借贷反欺诈AF</td>
<td style="text-align:left">按调用次数后付费（折扣有效），可选日结或月结。</td>
</tr>
</tbody>
</table>
<p>备注：各服务对企业认证用户提供7天免费体验（含1000次调用），可提工单定制报价。</p>
<h3 id="应用安全产品移动安全"><a class="markdownIt-Anchor" href="#应用安全产品移动安全"></a> 应用安全产品————移动安全</h3>
<h4 id="应用安全功能"><a class="markdownIt-Anchor" href="#应用安全功能"></a> 应用安全功能</h4>
<h5 id="应用安全挑战"><a class="markdownIt-Anchor" href="#应用安全挑战"></a> 应用安全挑战</h5>
<ul>
<li><strong>金融类APP平均高达65个漏洞，其中23%高危漏洞。</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image8259ae60b2d10120.png" alt="金融行业移动APP漏洞评测" /></li>
<li><strong>金融APP十大安全隐患：</strong>
<ul>
<li>信息数据明文发送</li>
<li>通信数据可解密</li>
<li>敏感数据本地可破解</li>
<li>调试信息泄漏</li>
<li>敏感信息泄漏</li>
<li>密码学误用</li>
<li>功能泄露</li>
<li>可二次打包</li>
<li>可调式</li>
<li>代码可逆向等</li>
</ul>
</li>
</ul>
<h5 id="移动应用安全ms"><a class="markdownIt-Anchor" href="#移动应用安全ms"></a> 移动应用安全MS</h5>
<ul>
<li>腾讯云移动应用安全提供全生命周期的一站式安全解决方案。
<ul>
<li>应用加固
<ul>
<li>盗版架空、防侵权篡改</li>
</ul>
</li>
<li>渠道监控
<ul>
<li>精确监控分发渠道与下载量</li>
</ul>
</li>
<li>质量跟踪
<ul>
<li>应用crash数据实时跟踪</li>
</ul>
</li>
<li>安全SDK
<ul>
<li>数据库防护、键盘输入防护、反外挂SDK</li>
</ul>
</li>
<li>安全评测
<ul>
<li>防数据泄露、安全审计、漏洞扫描等</li>
</ul>
</li>
<li>适配分析
<ul>
<li>50款真机机型兼容性测试</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="ms技术原理"><a class="markdownIt-Anchor" href="#ms技术原理"></a> MS技术原理</h4>
<h5 id="移动应用安全ms-2"><a class="markdownIt-Anchor" href="#移动应用安全ms-2"></a> 移动应用安全MS</h5>
<ul>
<li><strong>腾讯自研漏洞扫描引擎</strong>
<ul>
<li>静动态扫描
<ul>
<li>静态扫描采用数据流分析机制，覆盖所有隐藏代码</li>
<li>污点跟踪机制，精确度达到寄存器级别</li>
<li>动态扫描采用模糊测试方法，结果准确性高</li>
</ul>
</li>
<li>精确定位与详细修改建议
<ul>
<li>精确定位具体未知和修改建议</li>
<li>快速应急响应，突发、新增漏洞快速更新覆盖</li>
</ul>
</li>
<li>脱壳扫描
<ul>
<li>即使加固加壳，亦能实现脱壳扫描，最大限度发现应用中的潜在风险</li>
</ul>
</li>
</ul>
</li>
<li><strong>应用加固服务</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image5d5bdf9a3ea256b6.png" alt="" /></li>
</ul>
<h4 id="ms优势与应用"><a class="markdownIt-Anchor" href="#ms优势与应用"></a> MS优势与应用</h4>
<h5 id="ms产品优势"><a class="markdownIt-Anchor" href="#ms产品优势"></a> MS产品优势</h5>
<ul>
<li><strong>Top级应用分发市场</strong>
<ul>
<li><strong>应用宝</strong> 涵盖了国内主流分发渠道资源，精准渠道分发情况。</li>
</ul>
</li>
<li><strong>Top级样本渠道来源</strong>
<ul>
<li>腾讯 <strong>手机管家</strong> 掌握最新、最全的恶意样本情况。</li>
</ul>
</li>
<li><strong>全方位的渠道监控</strong>
<ul>
<li>保持 <strong>7*24小时监控</strong>，正版/盗版，渠道下载情况尽在掌握。</li>
</ul>
</li>
</ul>
<h5 id="ms应用场景"><a class="markdownIt-Anchor" href="#ms应用场景"></a> MS应用场景</h5>
<ol>
<li><strong>应用自主研发</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imagec2a104d7c4317dd8.png" alt="" /></li>
<li><strong>应用外包研发</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image1039728011a692bb.png" alt="" /></li>
<li><strong>应用分发</strong><br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image62954ee08d46675a.png" alt="" /></li>
</ol>
<h3 id="云安全产品计费方案"><a class="markdownIt-Anchor" href="#云安全产品计费方案"></a> 云安全产品计费方案</h3>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image6011315eb0279fde.png" alt="计费方案总结" /></p>
<h3 id="总结-6"><a class="markdownIt-Anchor" href="#总结-6"></a> 总结</h3>
<ul>
<li>云安全体系与标准：云安全原则、云安全责任共担模型、CSA4.0、等保2.0、可信云、云安全威胁、腾讯云安全体系。</li>
<li>腾讯云主流安全产品：大禹、云镜、网站管家、天御、应用安全功能，原理，优势和应用</li>
<li>腾讯云安全计费方案。</li>
</ul>
<h2 id="云视频与通信"><a class="markdownIt-Anchor" href="#云视频与通信"></a> 云视频与通信</h2>
<h3 id="音视频基础知识"><a class="markdownIt-Anchor" href="#音视频基础知识"></a> 音视频基础知识</h3>
<h4 id="音视频主要场景"><a class="markdownIt-Anchor" href="#音视频主要场景"></a> 音视频主要场景</h4>
<ul>
<li>点播
<ul>
<li>录制与观看不同时</li>
<li>视频流单向下行</li>
<li>视频网站短视频APP</li>
</ul>
</li>
<li>直播
<ul>
<li>实时录制与观看</li>
<li>视频流单向上下行</li>
<li>游戏/体育/新闻直播</li>
</ul>
</li>
<li>互动直播
<ul>
<li>实时录制、观看与互动</li>
<li>视频流双向上下行</li>
<li>电商导购、在线教育等</li>
</ul>
</li>
<li>即时通信
<ul>
<li>实时传递文件/语音/视频</li>
<li>信息流双向传播</li>
<li>聊天沟通、文件传输</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imageee9a0d69a1b2458f.png" alt="" /></p>
<h5 id="音视频场景点播"><a class="markdownIt-Anchor" href="#音视频场景点播"></a> 音视频场景：点播</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image354c3b146edcdc06.png" alt="点播" /></p>
<h5 id="音视频场景直播"><a class="markdownIt-Anchor" href="#音视频场景直播"></a> 音视频场景：直播</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image167d4b899cfad099.png" alt="直播" /></p>
<h5 id="音视频场景互动直播"><a class="markdownIt-Anchor" href="#音视频场景互动直播"></a> 音视频场景：互动直播</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imagedc9d31df0875170e.png" alt="互动直播" /></p>
<h5 id="音视频场景旁路直播"><a class="markdownIt-Anchor" href="#音视频场景旁路直播"></a> 音视频场景：旁路直播</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/imagec60366e8cd74b224.png" alt="旁路直播" /></p>
<h4 id="音视频技术原理"><a class="markdownIt-Anchor" href="#音视频技术原理"></a> 音视频技术原理</h4>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image42e47b25ab7ff1f7.png" alt="" /></p>
<h5 id="音视频技术原理推流"><a class="markdownIt-Anchor" href="#音视频技术原理推流"></a> 音视频技术原理：推流</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image500c137d960b1384.png" alt="推流" /></p>
<h5 id="音视频技术原理拉流"><a class="markdownIt-Anchor" href="#音视频技术原理拉流"></a> 音视频技术原理：拉流</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/23/image23f5b4716727ac3a.png" alt="拉流" /></p>
<h4 id="音视频协议参数"><a class="markdownIt-Anchor" href="#音视频协议参数"></a> 音视频协议参数</h4>
<h5 id="音视频传输协议"><a class="markdownIt-Anchor" href="#音视频传输协议"></a> 音视频传输协议</h5>
<table>
<thead>
<tr>
<th style="text-align:center">协议</th>
<th style="text-align:center">RTMR</th>
<th style="text-align:center">HLS</th>
<th style="text-align:center">HDL(HTTP-FLV)</th>
<th style="text-align:center">私有协议</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>协议</strong></td>
<td style="text-align:center">TCP长连接</td>
<td style="text-align:center">HTTP短连接</td>
<td style="text-align:center">HTTP长连接</td>
<td style="text-align:center">通常为UDP</td>
</tr>
<tr>
<td style="text-align:center"><strong>原理</strong></td>
<td style="text-align:center">每个时刻的数据收到后立刻转发</td>
<td style="text-align:center">集合一段时间的数据，生成ts切片文件（三片），并更新m3u8索引</td>
<td style="text-align:center">同RTMP，使用HTTP协议（80端口）</td>
<td style="text-align:center">基于UDP进行私有的封装处理</td>
</tr>
<tr>
<td style="text-align:center"><strong>延时</strong></td>
<td style="text-align:center">1-3秒</td>
<td style="text-align:center">5-20秒（依切片情况）</td>
<td style="text-align:center">1-3秒</td>
<td style="text-align:center">最小可达100ms</td>
</tr>
<tr>
<td style="text-align:center"><strong>H5支持</strong></td>
<td style="text-align:center">需要使用插件</td>
<td style="text-align:center">支持H5</td>
<td style="text-align:center">需要使用插件</td>
<td style="text-align:center">根据私有协议的实现来确认是否支持</td>
</tr>
<tr>
<td style="text-align:center"><strong>其他</strong></td>
<td style="text-align:center">需要Flash技术支持</td>
<td style="text-align:center">播时需要多次请求，对于网络质量要求高</td>
<td style="text-align:center">需要Flash技术支持</td>
<td style="text-align:center">非标准协议，通用性不强，需要特定的软件支持</td>
</tr>
</tbody>
</table>
<h5 id="音视频基本参数"><a class="markdownIt-Anchor" href="#音视频基本参数"></a> 音视频基本参数</h5>
<table>
<thead>
<tr>
<th style="text-align:left">参数名称</th>
<th style="text-align:left">参数说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>码率</strong></td>
<td style="text-align:left">也称比特率(bit rate)，单位是bps，指单位时间内的数据量，1 Byte=8 bit。</td>
</tr>
<tr>
<td style="text-align:left"><strong>分辨率</strong></td>
<td style="text-align:left">也叫清晰度(resolution)，指画面尺寸大小，通常表示为“横向像素数x纵向像素数，如1280x720等。通常码率固定时，分辨率越大，画面越模糊；分辨率固定时，码率越高，画面越清晰。</td>
</tr>
<tr>
<td style="text-align:left"><strong>帧率</strong></td>
<td style="text-align:left">帧指视频中每个静止画面，每秒内显示的帧数称为帧率(frame rate)，单位是fps(frame per second)，通常帧率越高,画面越流畅。</td>
</tr>
<tr>
<td style="text-align:left"><strong>采样率</strong></td>
<td style="text-align:left">采样率(sample rate)表示音频信号每秒内采样的次数，单位是Hz，常用44100Hz(CD音乐)或48000Hz(录音室)。</td>
</tr>
<tr>
<td style="text-align:left"><strong>位宽</strong></td>
<td style="text-align:left">采样位宽(sample size)，指记录每一个采样点使用的bit位数，常用的位宽是8bit或16bit。</td>
</tr>
<tr>
<td style="text-align:left"><strong>声道数</strong></td>
<td style="text-align:left">声道(sound channel)指声音里相互独立的音频信号，单声道指只有一条独立的音频信号，双声道(也叫立体声)就是有两条独立的音频信号。</td>
</tr>
</tbody>
</table>
<h4 id="即时通信基础知识"><a class="markdownIt-Anchor" href="#即时通信基础知识"></a> 即时通信基础知识</h4>
<h5 id="即时通信基本概念"><a class="markdownIt-Anchor" href="#即时通信基本概念"></a> 即时通信基本概念</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/24/image.png" alt="概念" /></p>
<h5 id="即时通信主要场景"><a class="markdownIt-Anchor" href="#即时通信主要场景"></a> 即时通信主要场景</h5>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">论坛</th>
<th style="text-align:center">单聊</th>
<th style="text-align:center">群聊</th>
<th style="text-align:center">聊天室</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>参与人数</strong></td>
<td style="text-align:center">众多</td>
<td style="text-align:center">少</td>
<td style="text-align:center">有限</td>
<td style="text-align:center">众多</td>
</tr>
<tr>
<td style="text-align:center"><strong>即时性</strong></td>
<td style="text-align:center">弱</td>
<td style="text-align:center">高</td>
<td style="text-align:center">高</td>
<td style="text-align:center">高</td>
</tr>
<tr>
<td style="text-align:center"><strong>离线消息关注度</strong></td>
<td style="text-align:center">弱</td>
<td style="text-align:center">高</td>
<td style="text-align:center">高</td>
<td style="text-align:center">弱</td>
</tr>
<tr>
<td style="text-align:center"><strong>历史消息关注度</strong></td>
<td style="text-align:center">弱</td>
<td style="text-align:center">高</td>
<td style="text-align:center">高</td>
<td style="text-align:center">弱</td>
</tr>
<tr>
<td style="text-align:center"><strong>主体</strong></td>
<td style="text-align:center">板块/话题</td>
<td style="text-align:center">好友</td>
<td style="text-align:center">群组</td>
<td style="text-align:center">房间/频道</td>
</tr>
</tbody>
</table>
<h3 id="腾讯云视频服务"><a class="markdownIt-Anchor" href="#腾讯云视频服务"></a> 腾讯云视频服务</h3>
<h4 id="云直播产品介绍"><a class="markdownIt-Anchor" href="#云直播产品介绍"></a> 云直播产品介绍</h4>
<ul>
<li><strong>云直播LVB：</strong> 提供高并发、低延迟、易接入、安全可靠稳定的主播推流、转码、分发及播放服务。</li>
<li><strong>直播推流/播放SDK：</strong> 提供端到端的一站式音视频直播解决方案。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/24/image1c29c30ee9dc7f01.png" alt="" /></p>
<h5 id="云直播系统架构"><a class="markdownIt-Anchor" href="#云直播系统架构"></a> 云直播系统架构</h5>
<ul>
<li>主播在推流端通过上行加速节点推流至腾<br />
讯云直播源站。</li>
<li>腾讯云直播平台在云端对视频进行处理,<br />
然后通过CDN加速节点进行分发直播流。</li>
<li>观众可通过播放器SDK进行视频观看.</li>
<li>直播流可按需进行录制,存储到腾讯云点<br />
播平台,以备视频点播回看。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/24/image491381e29e82ba55.png" alt="云直播系统架构" /></p>
<h5 id="云直播主要功能"><a class="markdownIt-Anchor" href="#云直播主要功能"></a> 云直播主要功能</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/24/image92f65b429684b1ca.png" alt="云直播主要功能" /></p>
<h5 id="云直播应用场景"><a class="markdownIt-Anchor" href="#云直播应用场景"></a> 云直播应用场景</h5>
<ul>
<li>业务特点：要求进行视频的实时录制播放，及时分发到大量用户
<ul>
<li>游戏直播</li>
<li>秀场直播</li>
<li>新闻直播</li>
<li>赛事直播</li>
<li>教育直播</li>
<li>电商直播</li>
<li>金融直播</li>
</ul>
</li>
</ul>
<h5 id="云直播计费方案"><a class="markdownIt-Anchor" href="#云直播计费方案"></a> 云直播计费方案</h5>
<ul>
<li>
<p>基于观看直播时产生的下行流量/带宽费用进行计费。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/24/image1e4ed1e874efa9d6.png" alt="" /></p>
</li>
<li>
<p><strong>增值服务计费：</strong></p>
<ul>
<li>录制、截图、鉴黄和转码等，默认关闭，用户可按需开启使用并付费。</li>
<li>转码费用 = 价格 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 转码时长，日结；</li>
<li>录制费用 = 价格 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> 录制路数峰值，月结；</li>
<li>截图费用 = 价格 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> （截图数量 - 免费额度1000），月结；</li>
<li>鉴黄费用 = 价格 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> （鉴黄数量 - 免费额度1000），月结；</li>
</ul>
</li>
</ul>
<h4 id="云点播产品介绍"><a class="markdownIt-Anchor" href="#云点播产品介绍"></a> 云点播产品介绍</h4>
<h5 id="云点播系统架构"><a class="markdownIt-Anchor" href="#云点播系统架构"></a> 云点播系统架构</h5>
<ul>
<li><strong>点播VOD：</strong> 音视频采集上传、存储管理、自动化转码处理、加速播放、媒体资源管理和音视频通信服务为一体的一站式VPaaS（Video Platform as a Service）解决方案。<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/24/image647990aedb81ce05.png" alt="云点播系统架构" /></li>
</ul>
<h5 id="云点播主要功能"><a class="markdownIt-Anchor" href="#云点播主要功能"></a> 云点播主要功能</h5>
<ul>
<li>音视频存储管理
<ul>
<li>音视频上传</li>
<li>音视频存储</li>
<li>媒资管理</li>
<li>源站同步</li>
</ul>
</li>
<li>音视频转码处理
<ul>
<li>音视频转码</li>
<li>音视频编辑</li>
<li>视频DRM加密</li>
<li>视频鉴黄</li>
</ul>
</li>
<li>音视频分发加速
<ul>
<li>自定义域名</li>
<li>防盗链</li>
<li>播放器SDK</li>
<li>微信发布</li>
<li>业务统计分析</li>
</ul>
</li>
</ul>
<h5 id="云点播应用场景"><a class="markdownIt-Anchor" href="#云点播应用场景"></a> 云点播应用场景</h5>
<ul>
<li><strong>业务特点：</strong> 大量音视频需要上传处理和存储；能保障各地的用户高质量的播放观看体验。</li>
<li>视频门户</li>
<li>在线教育</li>
<li>短视频应用</li>
</ul>
<h5 id="云点播计费方案"><a class="markdownIt-Anchor" href="#云点播计费方案"></a> 云点播计费方案</h5>
<ul>
<li>
<p>基于点播存储容量、转码规格时长与视频加速下行流量计费。</p>
</li>
<li>
<p>后付费日结</p>
<ul>
<li>视频存储：按容量计费；</li>
<li>视频转码：按规格和时长计费；</li>
<li>视频加速：按下行流量计费。</li>
</ul>
</li>
<li>
<p>预付费资源包</p>
<ul>
<li>视频存储资源包</li>
<li>视频转码资源包</li>
<li>视频加速资源包</li>
</ul>
</li>
<li>
<p><strong>增值服务计费</strong></p>
<ul>
<li><strong>短视频License SDK：</strong> 购买指定的点播资源包赠送1年使用权。</li>
<li><strong>音视频AI-视频分析：</strong> 按所分析视频原始时长计费，后付费月结。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">收费项</th>
<th style="text-align:center">价格</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">视频智能集锦拆条</td>
<td style="text-align:center">0.0x元/分钟</td>
</tr>
<tr>
<td style="text-align:center">视频智能标签分类</td>
<td style="text-align:center">0.0xx元/分钟</td>
</tr>
<tr>
<td style="text-align:center">视频智能封面</td>
<td style="text-align:center">0.0xx元/分钟</td>
</tr>
</tbody>
</table>
<h4 id="实时音视频介绍"><a class="markdownIt-Anchor" href="#实时音视频介绍"></a> 实时音视频介绍</h4>
<ul>
<li><strong>腾讯实时音视频TRTC：</strong>
<ul>
<li>提供多平台互通、高品质、可定制的实时互动视频通话服务；</li>
<li>结合腾讯浏览服务TBS WebRTC能力与腾讯实时音视频SDK；</li>
<li>用户可零音视频基础搭建出音视频通信平台，Demo体验如下：<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/24/image4829749b4c25c176.png" alt="demo" /></li>
</ul>
</li>
</ul>
<h5 id="实时音视频功能"><a class="markdownIt-Anchor" href="#实时音视频功能"></a> 实时音视频功能</h5>
<ul>
<li><strong>多平台互通</strong>
<ul>
<li>微信/QQ/QQ浏览器通过H5页面或微信小程序接入；</li>
<li>PC、MAC、APP可以通过集成SDK进行视频通话。</li>
</ul>
</li>
<li><strong>一体化方案</strong>
<ul>
<li>支持直播、点播、云通信、录制转码与旁路直播等；</li>
<li>支持互动白板、美艳滤镜、OCR识别、账号集成等。</li>
</ul>
</li>
<li><strong>高清视频体验</strong>
<ul>
<li>优化音视频清晰度，降低马赛克，支持720P高清通话。</li>
<li>全球端到端延时小于300ms，抗丢包率超过40%，抗网络抖动超过1000ms。</li>
</ul>
</li>
</ul>
<h5 id="实时音视频应用场景"><a class="markdownIt-Anchor" href="#实时音视频应用场景"></a> 实时音视频应用场景</h5>
<ul>
<li>业务需求：实时播放与观看，同时进行互动交流。
<ul>
<li>视频客服</li>
<li>在线招聘</li>
<li>在线会议</li>
<li>在线医疗</li>
</ul>
</li>
</ul>
<h5 id="实时音视频计费方案"><a class="markdownIt-Anchor" href="#实时音视频计费方案"></a> 实时音视频计费方案</h5>
<ul>
<li>
<p>基于通话时长（分钟数）进行计费：</p>
<ul>
<li><strong>预付费套餐</strong></li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">套餐包类型</th>
<th style="text-align:center">体验包</th>
<th style="text-align:center">入门包</th>
<th style="text-align:center">标准包</th>
<th style="text-align:center">企业包</th>
<th style="text-align:center">尊享包</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">价格(元)</td>
<td style="text-align:center">x.x</td>
<td style="text-align:center">3XXX</td>
<td style="text-align:center">9XXX</td>
<td style="text-align:center">28XXX</td>
<td style="text-align:center">73xxx</td>
</tr>
<tr>
<td style="text-align:center">通话分钟数</td>
<td style="text-align:center">300</td>
<td style="text-align:center">50000</td>
<td style="text-align:center">250000</td>
<td style="text-align:center">1000000</td>
<td style="text-align:center">3000000</td>
</tr>
<tr>
<td style="text-align:center">有效期</td>
<td style="text-align:center">1个月</td>
<td style="text-align:center">1个月</td>
<td style="text-align:center">3个月</td>
<td style="text-align:center">6个月</td>
<td style="text-align:center">12个月</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>后付费月结：</strong> 通话分钟数按参与音视频通话人数叠加计算；计费单位：元/千分钟。</li>
</ul>
</li>
<li>
<p><strong>增值服务：</strong></p>
<ul>
<li>如使用到旁路直播、录制、鉴黄等增值服务需单独计费。</li>
</ul>
</li>
</ul>
<h3 id="腾讯云通信服务"><a class="markdownIt-Anchor" href="#腾讯云通信服务"></a> 腾讯云通信服务</h3>
<h4 id="短信产品介绍"><a class="markdownIt-Anchor" href="#短信产品介绍"></a> 短信产品介绍</h4>
<ul>
<li>腾讯云短信(Short Message Service,SMS)沉淀腾讯十多年短信服务技术和经验,为QQ、微信等亿级平台和10万+客户提供国内短信、语音短信与国际短信服务。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/24/image65145747bce6b28b.png" alt="" /></p>
<h5 id="短信产品优势"><a class="markdownIt-Anchor" href="#短信产品优势"></a> 短信产品优势</h5>
<ul>
<li>快速稳定
<ul>
<li>99%超高到达率;90%10秒内到达</li>
</ul>
</li>
<li>智能调度
<ul>
<li>智能调度多家运营商通道,多地部署容灾备份</li>
</ul>
</li>
<li>便捷接入
<ul>
<li>支持HTTPS、CMPP、SMPP等协议,多种SDK</li>
</ul>
</li>
<li>实时监控
<ul>
<li>分地区、运营商与短信类型等实时监控。</li>
</ul>
</li>
<li>统计分析
<ul>
<li>统计发送情况、状态与记录，分析出报表。</li>
</ul>
</li>
</ul>
<h5 id="短信请求流程"><a class="markdownIt-Anchor" href="#短信请求流程"></a> 短信请求流程</h5>
<ul>
<li>一次短信（或语音）的业务请求流程如下：<br />
<img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/24/image384cdb84f375b0db.png" alt="" /></li>
</ul>
<h5 id="短信内容组成"><a class="markdownIt-Anchor" href="#短信内容组成"></a> 短信内容组成</h5>
<ul>
<li><strong>短信组成:</strong>
<ul>
<li><strong>短信签名</strong> 用于标识公司或业务,需要审批通过后才能使用。</li>
<li><strong>短信内容</strong> 通过内容模版定制设置,要经过审批后才能使用。</li>
</ul>
</li>
<li><strong>短信举例:</strong>
<ul>
<li>【腾讯科技】您的QQ登录验证码是1234,5分钟内有效。</li>
<li><strong>短信签名:</strong>【腾讯科技】</li>
<li><strong>短信内容:</strong> 您的QQ登录验证码是1234,5分钟内有效。</li>
<li><strong>内容模板:</strong> 您的QQ登录验证码是{1},{2}分钟内有效,其中{1}、{2}是可变参数。</li>
</ul>
</li>
</ul>
<h5 id="短信应用场景"><a class="markdownIt-Anchor" href="#短信应用场景"></a> 短信应用场景</h5>
<ul>
<li><strong>验证码发送</strong>
<ul>
<li>账号注册、登录认证、身份认证、支付认证等。</li>
</ul>
</li>
<li><strong>消息通知</strong>
<ul>
<li>操作状态通知、安全通知，费用通知、生活服务通知等。</li>
</ul>
</li>
<li><strong>营销推广</strong>
<ul>
<li>活动通知、折扣优惠、产品宣传，客户关怀等通知。</li>
</ul>
</li>
</ul>
<h5 id="短信计费方案"><a class="markdownIt-Anchor" href="#短信计费方案"></a> 短信计费方案</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/24/image0c47191c5b3f83bc.png" alt="" /></p>
<h4 id="云通信产品介绍"><a class="markdownIt-Anchor" href="#云通信产品介绍"></a> 云通信产品介绍</h4>
<ul>
<li>云通信(Instant Messaging,IM)承载亿级QQ用户即时通讯技术,立志成为企业数字化转型的通信助手,提供全方位立体化的通信能力。</li>
</ul>
<h5 id="云通信产品优势"><a class="markdownIt-Anchor" href="#云通信产品优势"></a> 云通信产品优势</h5>
<ul>
<li>丰富社交能力
<ul>
<li>支持单聊/群聊/直播间;</li>
<li>文本/表情/图片/语音/视频;</li>
<li>自定义:红包/回执/点赞等。</li>
</ul>
</li>
<li>稳定高可用
<ul>
<li>亿级消息稳定并发,图文秒传;</li>
<li>全球不少、自动选择最有路径;</li>
<li>强大的API与第三方回调能力。</li>
</ul>
</li>
<li>一站式解决方案
<ul>
<li>多终端SDK,整合音视频,小程序;</li>
<li>多渠道、多手机品牌的离线推送能力;</li>
<li>通过IMSDK实现第三方IM的平滑迁移。</li>
</ul>
</li>
</ul>
<h5 id="云通信功能架构"><a class="markdownIt-Anchor" href="#云通信功能架构"></a> 云通信功能架构</h5>
<ul>
<li><strong>业务功能</strong>
<ul>
<li>接入服务</li>
<li>账号系统</li>
<li>消息系统</li>
<li>群组系统</li>
<li>资料托管</li>
<li>关系托管</li>
</ul>
</li>
<li><strong>管理监控</strong>
<ul>
<li>控制台</li>
<li>REST API</li>
<li>第三方回调</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/24/image4ae9f4f803dfda5f.png" alt="" /></p>
<h5 id="云通信应用场景"><a class="markdownIt-Anchor" href="#云通信应用场景"></a> 云通信应用场景</h5>
<ul>
<li>应用内社交</li>
<li>客服咨询</li>
<li>企业协同办公</li>
<li>竞技游戏沟通</li>
</ul>
<h5 id="云通信计费方案"><a class="markdownIt-Anchor" href="#云通信计费方案"></a> 云通信计费方案</h5>
<ul>
<li><strong>费用组成：</strong>
<ul>
<li>基础套餐包
<ul>
<li>预付费,必选项;</li>
<li>体验版、专业版;</li>
<li>购买后才能使用即时通讯能力。</li>
</ul>
</li>
<li>功能套餐包
<ul>
<li>预付费,可选增项;</li>
<li>音视频聊天室个数</li>
<li>单个群群成员上限</li>
<li>单人可创建及加入群数</li>
</ul>
</li>
<li>资源消耗
<ul>
<li>按量后付费月结</li>
<li>日活跃用户数</li>
<li>音视频聊天带宽</li>
<li>消息漫游时长</li>
<li>累计群组数</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="云通信计费示例"><a class="markdownIt-Anchor" href="#云通信计费示例"></a> 云通信计费示例</h5>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/24/image532998dd629b305a.png" alt="" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.imagehub.cc/images/2022/11/24/image4c18cc473da0acbf.png" alt="" /></p>
<h3 id="总结-7"><a class="markdownIt-Anchor" href="#总结-7"></a> 总结</h3>
<ul>
<li>音视频基础知识：主要场景、技术原理、协议参数。</li>
<li>腾讯云视频服务：直播、点播、实时音视频</li>
<li>腾讯云通信服务：短信、云通信</li>
</ul>
]]></content>
      <tags>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>1.1 C语言概述</title>
    <url>/1.1%20C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="11-c语言概述"><a class="markdownIt-Anchor" href="#11-c语言概述"></a> 1.1 C语言概述</h1>
<p>C语言是什么</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685527152918-af4d37e7-277f-4d07-b668-341dd5f6775c.png?x-oss-process=image%2Fresize%2Cw_385%2Climit_0" alt="image.png" /></p>
<p>C语言是计算机编程语言的一种，编程语言用于人和机器交流。</p>
<p>编程语言通过一系列的语法和语义规则来描述计算机程序的行为和逻辑，程序员使用编程语言编写程序后，计算机可以将程序转化为二进制指令（即机器码），并由CPU执行，CPU会按照指令的顺序依次执行每个指令。</p>
<p>语言发展历程</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685528043770-263a422f-9167-47e8-b005-d1940eb2d0b9.png" alt="图片2.png" /></p>
<p>●机器语言</p>
<p>○机器语言是一组由0和1系列组成的指令码，这些指令码，是CPU制作厂商规定出来的，然后发布出来，程序员必须遵守。</p>
<p>●汇编语言</p>
<p>○汇编语言，用一些容易理解和记忆的缩写单词来代替一些特定的指令，汇编语言和机器自身的编程环境息息相关，推广和移植很难。</p>
<p>●高级语言</p>
<p>○高级语言摆脱了计算机硬件的限制，把主要精力放在了程序设计上，不在关注低层的计算机硬件。</p>
<p>○高级语言要被计算机执行，也需要一个翻译程序将其翻译成机器语言，而翻译工作由编译器或解释器完成。</p>
<p>■C语言通过编译器翻译成机器语言</p>
<p>为什么学习C语言</p>
<p>C语言特点</p>
<p>●简洁</p>
<p>○C语言的语法简单，语句清晰明了，使得程序易于阅读和理解。</p>
<p>●高效</p>
<p>○C语言的执行效率高，可以用于开发需要高性能的应用程序。</p>
<p>●可移植</p>
<p>○C语言可以在不同的硬件平台和操作系统上运行，具有较高的可移植性。</p>
<p>●模块化</p>
<p>○C语言支持函数和结构体等模块化编程方法，使得程序的复杂性得到有效控制。</p>
<p>●标准化</p>
<p>○C语言的语法和标准库已经被ISO和ANSI标准化，具有广泛的应用和兼容性。</p>
<p>C语言应用领域</p>
<p>●系统软件</p>
<p>○操作系统、编译器、数据库等</p>
<p>●嵌入式系统</p>
<p>○智能家电、智能穿戴设备、智能汽车等</p>
<p>●网络设备</p>
<p>○路由器、交换机、防火墙等</p>
<p>●游戏开发</p>
<p>○电脑游戏、手机游戏等</p>
<p>C语言的标准</p>
<p>●C89(C90)标准</p>
<p>○1989年，美国国家标准协会通过了C语言标准，简称C89</p>
<p>○1990年，国际标准化组织接收并采纳C89作为国际标准</p>
<p>●C99标准</p>
<p>○1999年，国际标准化组织和国际电工委员会正式发布了ISO/IEC 9899:1999，简称C99</p>
<p>○C99引入了许多新特性，例如内联函数，变量声明可以不放在函数开头，支持变长数组</p>
<p>●C11标准</p>
<p>○2011年，国际标准化组织和国际电工委员会正式发布C语言标准第三版草案N1570，称为ISO/IEC 9899:2011，简称C11</p>
<p>○C11增强了C语言对C++的兼容性</p>
]]></content>
  </entry>
  <entry>
    <title>1.2 编程环境</title>
    <url>/1.2%20%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="12-编程环境"><a class="markdownIt-Anchor" href="#12-编程环境"></a> 1.2 编程环境</h1>
<p>语言分类介绍</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685576085428-fd531adc-0bb8-453d-9649-aa6df7f35108.png?x-oss-process=image%2Fresize%2Cw_360%2Climit_0" alt="image.png" /></p>
<p>●编译型语言：C、C++</p>
<p>●解释型语言：Python、JS</p>
<p>C语言编译器</p>
<p>●GCC 系列</p>
<p>○GNU编译器套装(英语：GNU Compiler Collection，缩写为GCC)，指一套编程语言编译器，常被认为是跨平台编译器的事实标准。原名是：GNU C语言编译器(GNU C Compiler)。</p>
<p>●MinGW</p>
<p>○又称mingw32 ， 是将GCC编译器和GNU Binutils移植到Win32平台下的产物。MinGW占用内存、硬盘空间都比较少，能够链接到任意软件，但它对 POSIX 规范的实现没有 Cygwin 库完备。</p>
<p>●Cygwin</p>
<p>○Cygwin的主要目的是通过重新编译，将POSIX系统(例如Linux、BSD，以及其他Unix系统)上的软件移植到Windows上 。 Cygwin包括了一套库，该库在Win32系统下实现了POSIX系统调用的API；还有一套GNU开发工具集(比如GCC、GDB)</p>
<p>●MSVC系列</p>
<p>○与Visual Studio集成发布，微软自己的编译器，VS是一个基本完整的开发工具集，它包括了整个软件生命周期中所需要的大部分工具，如UML工具、代码管控工具、集成开发环境(IDE)等等。</p>
<p>gcc编译器安装</p>
<p>●下载地址：<a href="https://github.com/danielpinto8zz6/c-cpp-compile-run/blob/HEAD/docs/COMPILER_SETUP.md">https://github.com/danielpinto8zz6/c-cpp-compile-run/blob/HEAD/docs/COMPILER_SETUP.md</a></p>
<p>●安装初始操作</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685794789165-9182293e-3d93-4792-8c72-606efc4c4ff9.png" alt="Snipaste_2023-06-03_14-43-55.png" /></p>
<p>●指定路径安装</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685794825227-f26cbe7f-92bc-43d3-ab52-eaab916a2dc1.png" alt="Snipaste_2023-06-03_14-45-02.png" /></p>
<p>●默认配置安装</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685794834314-ecfd9277-9531-4499-ad9c-826a61a78947.png?x-oss-process=image%2Fresize%2Cw_608%2Climit_0" alt="Snipaste_2023-06-03_14-45-59.png" /></p>
<p>●重启电脑后，打开windows的终端，输入gcc   -v，能查询版本信息，说明gcc安装成功</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685794879613-33e98aaf-b025-4c76-b6a8-3a7b2f488c7b.png" alt="Snipaste_2023-06-03_14-49-12.png" /></p>
<p>C语言集成开发工具</p>
<p>●集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面工具。</p>
<p>●开发工具种类繁多，有vscode、Dev-C++、code lite、clion、Qt Creator等</p>
<p>○这里使用的vscode</p>
<p>vscode安装</p>
<p>●官网下载地址：<a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a></p>
<p>●安装说明，基本上一路下一步即可</p>
<p>○可以自己选择安装路径</p>
<p>○可以选择创建桌面快捷方式</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685668000407-fc4cfc03-6b4b-4c07-b250-375e11a57310.png" alt="image.png" /></p>
<p>vscode主题选择</p>
<p>●第一次启动软件，选择自己喜欢的主题</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685668244721-64bb72e0-9dbc-4f17-8b65-cfb13781100e.png?x-oss-process=image%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
<p>●设置主题的入口说明</p>
<p>○打开设置</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685668392966-3ca1d94f-322e-4283-9f8c-2292e7a4b921.png" alt="image.png" /></p>
<p>○输入 theme 后，再在设置页面选择自己喜欢的主题</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685668560047-ccf9945d-d665-4e70-b984-2e62b4296192.png?x-oss-process=image%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
<p>C语言环境插件下载</p>
<p>●拓展插件入口</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685668640737-0f39912d-4d85-40e3-b20d-4fd6e0ab4d8b.png" alt="image.png" /></p>
<p>●简体中文语言包</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685668752743-07b80aa4-2f1d-4a72-9a78-1cce6708cd97.png?x-oss-process=image%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685668797600-cbe8dd28-21a9-4599-81f3-4ded0aa4020d.png?x-oss-process=image%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
<p>●编辑和运行环境</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685669300106-3d4e2e18-3064-4be2-90d6-e46a80e39541.png?x-oss-process=image%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
<p>C环境编码设置</p>
<p>●在windows下如果不指定在程序执行时的GBK字符集，打印中文会乱码</p>
<p>●设置入口</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686040430192-46316e7d-2bf7-4de0-b524-e6e4b31390ce.png?x-oss-process=image%2Fresize%2Cw_494%2Climit_0" alt="image.png" /></p>
<p>●复制参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-fexec-charset=GBK</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686040616379-96f3aaf9-0375-4329-99ee-b0267c0d0381.png?x-oss-process=image%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
<p>C代码</p>
<p>●新建文件夹</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685672485344-f22ac357-3bae-43dd-b9f2-e6155ce10c7a.png?x-oss-process=image%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685672556490-0ad617a0-a333-47a1-99d6-dadd51eb21ee.png?x-oss-process=image%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
<p>●编辑和运行代码</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685672802917-c811444c-4804-4119-9988-326ede9c3ab0.png" alt="image.png" /></p>
<p>示例代码(直接复制粘贴)：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685673132841-a571d083-fbf9-451f-8291-3913f6f848b7.png?x-oss-process=image%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
<p>如果不想弹出通知窗口，可以设置为勿扰模式：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685673350928-38234b3e-54c8-4b60-9454-71aa2ae3322c.png" alt="image.png" /></p>
<p>设置用户代码块片段</p>
<p>●设置入口</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685673835123-23605a3f-0805-4caf-b059-da049ac5b3cc.png" alt="image.png" /></p>
<p>●选择C</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685673869795-763a1e3e-abf7-42f0-b269-10cf1995caa3.png" alt="image.png" /></p>
<p>●替换配置文件内容</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;main function&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;ma&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;#include &lt;stdio.h&gt;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;int main() &#123;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    $1&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;    return 0;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;&quot;</span>,</span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;description&quot;</span>: <span class="string">&quot;main function&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;printf function&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;pr&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;printf(\&quot;$1\\n\&quot;);&quot;</span>,</span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;description&quot;</span>: <span class="string">&quot;printf function&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685674385408-a729fc9a-4abc-45c5-b458-18353ad41f22.png?x-oss-process=image%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
<p>●验证是否能插入自定义的代码块</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685674561370-d9867c9a-20cb-43b0-a9e7-ba8f7c015ebd.png?x-oss-process=image%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
]]></content>
  </entry>
  <entry>
    <title>第一个C语言程序：HelloWorld</title>
    <url>/%E7%AC%AC%E4%B8%80%E4%B8%AAC%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%EF%BC%9AHelloWorld.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="21-第一个c语言程序helloworld"><a class="markdownIt-Anchor" href="#21-第一个c语言程序helloworld"></a> 2.1 第一个C语言程序：HelloWorld</h1>
<p>第一个C语言程序</p>
<p>示例代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●C语言的源代码文件是一个普通的文本文件，但扩展名必须是 .c</p>
<p>代码分析：</p>
<p>●include头文件包含</p>
<p>○#include的意思是头文件包含，#include &lt;stdio.h&gt;代表包含stdio.h这个头文件</p>
<p>○使用C语言库函数需要提前包含库函数对应的头文件，如这里使用了printf()函数，需要包含stdio.h头文件</p>
<p>●main函数</p>
<p>○程序的入口，一个程序有且只有一个main函数入口</p>
<p>○{}叫代码块，一个代码块内部可以有一条或者多条语句</p>
<p>■所有的可执行语句必须是在代码块里面</p>
<p>○C语言每句可执行代码都是&quot;;&quot;分号结尾</p>
<p>■所有的#开头的行，都代表预编译指令，预编译指令行结尾是没有分号的</p>
<p>●printf函数</p>
<p>○printf是C语言库函数，功能是向标准输出设备输出一个字符串</p>
<p>○printf(“hello world\n”);</p>
<p>■\n的意思是回车换行</p>
<p>●return语句</p>
<p>○return代表函数执行完毕，返回return代表函数的终止</p>
<p>○在main函数中return 0代表程序执行成功</p>
<p>注释</p>
<p>●注释</p>
<p>○对代码的解释和说明</p>
<p>●特点</p>
<p>○不会被执行</p>
<p>●目的</p>
<p>○让人们能够更加轻松地看懂代码</p>
<p>●分类</p>
<p>○行注释 //</p>
<p>■快键键 ctrl+/</p>
<p>○块注释 /**/</p>
<p>■快捷键 shift+alt+a</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 行注释</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        块注释</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>2.2 数据类型</title>
    <url>/2.2%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="22-数据类型"><a class="markdownIt-Anchor" href="#22-数据类型"></a> 2.2 数据类型</h1>
<p>数据类型介绍</p>
<p>●数据类型：数据所属的类型</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685582275643-ae98d8b4-b4d5-4b67-a400-596c3e1056b2.png" alt="Picture1.png" /></p>
<p>●数据类型的作用：编译器预算数据分配的内存空间大小</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/jpeg/29103019/1686020468474-ec72aa8b-6dd6-47e4-953e-6d801c791a94.jpeg?x-oss-process=image%2Fresize%2Cw_2560%2Climit_0%2Finterlace%2C1" alt="281f114434bc467ba3d506694fd6f3fb.jpeg" /></p>
<p>变量</p>
<p>变量的语法</p>
<p>●在计算机程序中，变量是用来存储数据的一个内存区域，并用一个名字来表示这个区域。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685582723984-2beb9ae3-9205-4b96-887f-58e0f940cd5f.png?x-oss-process=image%2Fresize%2Cw_320%2Climit_0" alt="image.png" /></p>
<p>●在程序运行过程中，其值可以改变</p>
<p>●变量在使用前必须先定义，定义变量前必须有相应的数据类型</p>
<p>●语法说明</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685585908648-4cdb0ff8-7f27-4b2f-bc96-038df0b38456.png" alt="Picture2.png" /></p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 定义1个int变量age同时赋值为18(这叫初始化)，然后打印内容</span></span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, age);</span><br><span class="line">    <span class="comment">// 2. 修改age的内容为20，然后打印内容</span></span><br><span class="line">    age = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, age);</span><br><span class="line">    <span class="comment">// 3. 定义2个int变量，然后在分别赋值，然后再打印内容</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    a = <span class="number">123</span>;</span><br><span class="line">    b = <span class="number">256</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);</span><br><span class="line">    <span class="comment">// 4. 定义1个float类型变量height同时赋值，然后打印内容</span></span><br><span class="line">    <span class="keyword">float</span> height = <span class="number">1.77</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, height);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>标识符命名</p>
<p>●标识符是用户编程时使用的名字，用于给变量、函数、结构体等命名 。</p>
<p>命令规则</p>
<p>●规则说明：</p>
<p>○由数字, 字母, 下划线_组成</p>
<p>○不能使用数字开头</p>
<p>○不能使用关键字</p>
<p>○严格区分大小写</p>
<p>●关键字：已经被占用的名字</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685586283792-b36e1b46-4bdc-4daf-9043-3dcd335358dd.png" alt="Picture3.png" /></p>
<p>命令规范</p>
<p>好的命名习惯要做到见名知意</p>
<p>●大驼峰</p>
<p>○每个单词首字母大写, 例如: MyFirstName</p>
<p>●小驼峰</p>
<p>○第二个单词开始首字母大写, 例如: myFirstName</p>
<p>●下划线命名</p>
<p>○每个单词之间使用下划线连接, 例如: my_first_name</p>
<p>char类型</p>
<p>●字符型变量用于存储一个单一字符，在 C 语言中用 char 表示，其中每个字符变量都会占用 1 个字节。</p>
<p>●在给字符型变量赋值时，需要用一对英文半角格式的单引号(’ ')把字符括起来。</p>
<p>●字符变量实际上并不是把该字符本身放到变量的内存单元中去，而是将该字符对应的ASCII码放到变量的存储单元中。</p>
<p>●char的本质就是一个1字节大小的整型。</p>
<table>
<thead>
<tr>
<th>ASCII值</th>
<th>控制字符</th>
<th>ASCII值</th>
<th>字符</th>
<th>ASCII值</th>
<th>字符</th>
<th>ASCII值</th>
<th>字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>NUT</td>
<td>32</td>
<td>(space)</td>
<td>64</td>
<td>@</td>
<td>96</td>
<td>、</td>
</tr>
<tr>
<td>1</td>
<td>SOH</td>
<td>33</td>
<td>!</td>
<td>65</td>
<td>A</td>
<td>97</td>
<td>a</td>
</tr>
<tr>
<td>2</td>
<td>STX</td>
<td>34</td>
<td>&quot;</td>
<td>66</td>
<td>B</td>
<td>98</td>
<td>b</td>
</tr>
<tr>
<td>3</td>
<td>ETX</td>
<td>35</td>
<td>#</td>
<td>67</td>
<td>C</td>
<td>99</td>
<td>c</td>
</tr>
<tr>
<td>4</td>
<td>EOT</td>
<td>36</td>
<td>$</td>
<td>68</td>
<td>D</td>
<td>100</td>
<td>d</td>
</tr>
<tr>
<td>5</td>
<td>ENQ</td>
<td>37</td>
<td>%</td>
<td>69</td>
<td>E</td>
<td>101</td>
<td>e</td>
</tr>
<tr>
<td>6</td>
<td>ACK</td>
<td>38</td>
<td>&amp;</td>
<td>70</td>
<td>F</td>
<td>102</td>
<td>f</td>
</tr>
<tr>
<td>7</td>
<td>BEL</td>
<td>39</td>
<td>,</td>
<td>71</td>
<td>G</td>
<td>103</td>
<td>g</td>
</tr>
<tr>
<td>8</td>
<td>BS</td>
<td>40</td>
<td>(</td>
<td>72</td>
<td>H</td>
<td>104</td>
<td>h</td>
</tr>
<tr>
<td>9</td>
<td>HT</td>
<td>41</td>
<td>)</td>
<td>73</td>
<td>I</td>
<td>105</td>
<td>i</td>
</tr>
<tr>
<td>10</td>
<td>LF</td>
<td>42</td>
<td>*</td>
<td>74</td>
<td>J</td>
<td>106</td>
<td>j</td>
</tr>
<tr>
<td>11</td>
<td>VT</td>
<td>43</td>
<td>+</td>
<td>75</td>
<td>K</td>
<td>107</td>
<td>k</td>
</tr>
<tr>
<td>12</td>
<td>FF</td>
<td>44</td>
<td>,</td>
<td>76</td>
<td>L</td>
<td>108</td>
<td>l</td>
</tr>
<tr>
<td>13</td>
<td>CR</td>
<td>45</td>
<td>-</td>
<td>77</td>
<td>M</td>
<td>109</td>
<td>m</td>
</tr>
<tr>
<td>14</td>
<td>SO</td>
<td>46</td>
<td>.</td>
<td>78</td>
<td>N</td>
<td>110</td>
<td>n</td>
</tr>
<tr>
<td>15</td>
<td>SI</td>
<td>47</td>
<td>/</td>
<td>79</td>
<td>O</td>
<td>111</td>
<td>o</td>
</tr>
<tr>
<td>16</td>
<td>DLE</td>
<td>48</td>
<td>0</td>
<td>80</td>
<td>P</td>
<td>112</td>
<td>p</td>
</tr>
<tr>
<td>17</td>
<td>DCI</td>
<td>49</td>
<td>1</td>
<td>81</td>
<td>Q</td>
<td>113</td>
<td>q</td>
</tr>
<tr>
<td>18</td>
<td>DC2</td>
<td>50</td>
<td>2</td>
<td>82</td>
<td>R</td>
<td>114</td>
<td>r</td>
</tr>
<tr>
<td>19</td>
<td>DC3</td>
<td>51</td>
<td>3</td>
<td>83</td>
<td>S</td>
<td>115</td>
<td>s</td>
</tr>
<tr>
<td>20</td>
<td>DC4</td>
<td>52</td>
<td>4</td>
<td>84</td>
<td>T</td>
<td>116</td>
<td>t</td>
</tr>
<tr>
<td>21</td>
<td>NAK</td>
<td>53</td>
<td>5</td>
<td>85</td>
<td>U</td>
<td>117</td>
<td>u</td>
</tr>
<tr>
<td>22</td>
<td>SYN</td>
<td>54</td>
<td>6</td>
<td>86</td>
<td>V</td>
<td>118</td>
<td>v</td>
</tr>
<tr>
<td>23</td>
<td>TB</td>
<td>55</td>
<td>7</td>
<td>87</td>
<td>W</td>
<td>119</td>
<td>w</td>
</tr>
<tr>
<td>24</td>
<td>CAN</td>
<td>56</td>
<td>8</td>
<td>88</td>
<td>X</td>
<td>120</td>
<td>x</td>
</tr>
<tr>
<td>25</td>
<td>EM</td>
<td>57</td>
<td>9</td>
<td>89</td>
<td>Y</td>
<td>121</td>
<td>y</td>
</tr>
<tr>
<td>26</td>
<td>SUB</td>
<td>58</td>
<td>:</td>
<td>90</td>
<td>Z</td>
<td>122</td>
<td>z</td>
</tr>
<tr>
<td>27</td>
<td>ESC</td>
<td>59</td>
<td>;</td>
<td>91</td>
<td>[</td>
<td>123</td>
<td>{</td>
</tr>
<tr>
<td>28</td>
<td>FS</td>
<td>60</td>
<td>&lt;</td>
<td>92</td>
<td>/</td>
<td>124</td>
<td>|</td>
</tr>
<tr>
<td>29</td>
<td>GS</td>
<td>61</td>
<td>=</td>
<td>93</td>
<td>]</td>
<td>125</td>
<td>}</td>
</tr>
<tr>
<td>30</td>
<td>RS</td>
<td>62</td>
<td>&gt;</td>
<td>94</td>
<td>^</td>
<td>126</td>
<td>`</td>
</tr>
<tr>
<td>31</td>
<td>US</td>
<td>63</td>
<td>?</td>
<td>95</td>
<td>_</td>
<td>127</td>
<td>DEL</td>
</tr>
</tbody>
</table>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个char类型变量，同时赋值为97，分别用%d,%c打印结果</span></span><br><span class="line">    <span class="keyword">char</span> ch = <span class="number">97</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ch);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, ch);</span><br><span class="line">    <span class="comment">// 定义一个char类型变量，同时赋值为&#x27;a&#x27;，分别用%d,%c打印结果</span></span><br><span class="line">    <span class="keyword">char</span> ch2 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ch2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, ch2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>布尔类型</p>
<p>●早期C语言没有布尔类型数据，以0代表逻辑假，非0代表逻辑真</p>
<p>●C99标准定义了新的关键字_Bool，提供了布尔类型，或者也可以使用stdbool.h中的bool</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个bool类型变量，同时赋值为true，然后打印变量的值</span></span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, flag);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改上一步变量的值为false，然后打印变量的值</span></span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, flag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数据类型长度(大小)</p>
<p>●大小单位说明</p>
<table>
<thead>
<tr>
<th>术语</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>bit(比特)</td>
<td>一个二进制代表一位，一个位只能表示0或1两种状态。数据传输是习惯以“位”（bit）为单位。</td>
</tr>
<tr>
<td>Byte(字节)</td>
<td>一个字节为8个二进制，称为8位，计算机中存储的最小单位是字节。数据存储是习惯以“字节”（Byte）为单位。</td>
</tr>
<tr>
<td>WORD(双字节)</td>
<td>2个字节，16位</td>
</tr>
<tr>
<td>DWORD</td>
<td>两个WORD，4个字节，32位</td>
</tr>
<tr>
<td>1b</td>
<td>1bit，1位</td>
</tr>
<tr>
<td>1B</td>
<td>1Byte,1字节，8位</td>
</tr>
<tr>
<td>1k，1K</td>
<td>1024</td>
</tr>
<tr>
<td>1M(1兆)</td>
<td>1024k, 1024*1024</td>
</tr>
<tr>
<td>1G</td>
<td>1024M</td>
</tr>
<tr>
<td>1T</td>
<td>1024G</td>
</tr>
<tr>
<td>1Kb(千位)</td>
<td>1024bit,1024位</td>
</tr>
<tr>
<td>1KB(千字节)</td>
<td>1024Byte，1024字节</td>
</tr>
<tr>
<td>1Mb(兆位)</td>
<td>1024Kb = 1024 * 1024bit</td>
</tr>
<tr>
<td>1MB(兆字节)</td>
<td>1024KB = 1024 * 1024Byte</td>
</tr>
</tbody>
</table>
<p>●使用sizeof查看数据长度</p>
<p>○长度在不同平台是不一样</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685599436880-83d3a811-b19a-4826-8f04-a8ea155de642.png" alt="image.png" /></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过sizeof打印各种类型的长度(大小)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;char length = %d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;short length = %d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">short</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;int length = %d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;long length = %d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;float length = %d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;double length = %d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;long double length = %d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">double</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义int类型变量，sizeof打印变量的大小</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a length = %d\n&quot;</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可移植的类型</p>
<p>●C语言程序在移植过程中可能会出现不同平台数据类型不兼容</p>
<p>●为了解决这个问题，C语言在可移植类型 stdint.h 和 inttype.h 中规定了精确宽度整数类型，以确保C语言的类型在各系统内功能相同</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 8位整型</span></span><br><span class="line">    <span class="keyword">int8_t</span> a=<span class="number">127</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 16位整型</span></span><br><span class="line">    <span class="keyword">int16_t</span> b = <span class="number">127</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// unsigned 无符号，没有符号位，数值为正数</span></span><br><span class="line">    <span class="keyword">uint8_t</span> c = <span class="number">255</span>;</span><br><span class="line">    <span class="keyword">uint16_t</span> d = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>常量</p>
<p>与变量不同，常量的值在程序运行时不会改变。</p>
<table>
<thead>
<tr>
<th>整型常量</th>
<th>100，200，-100，0</th>
</tr>
</thead>
<tbody>
<tr>
<td>实型常量</td>
<td>3.14 ， 0.125，-3.123</td>
</tr>
<tr>
<td>字符型常量</td>
<td>‘a’, ‘b’, ‘1’</td>
</tr>
<tr>
<td>字符串常量</td>
<td>“a”, “ab”，“12356”</td>
</tr>
</tbody>
</table>
<p>自定义的常量</p>
<p>常量的定义方式有两种:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 预处理常量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi2 = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 预处理常量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// const常量</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> pi2 = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常量不能修改，以下代码是错误的</span></span><br><span class="line">    PI = <span class="number">3.33</span>;</span><br><span class="line">    pi2 = <span class="number">3.33</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>系统定义的常量</p>
<p>●这些常量的值在不同平台是不一样的</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685678687413-fd40facc-51e9-4d08-93f9-e600311d9ae3.png" alt="image.png" /></p>
<p>limits.h：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685678724983-74e13b6b-bdd8-4fb7-906d-b09605c22a61.png?x-oss-process=image%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;float.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, FLT_MIN);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, FLT_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, CHAR_BIT);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, CHAR_MIN);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, CHAR_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, SHRT_MIN);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, SHRT_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, INT_MIN);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, INT_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, LONG_MIN);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, LONG_MAX);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>2.3 数值表示</title>
    <url>/2.3%20%E6%95%B0%E5%80%BC%E8%A1%A8%E7%A4%BA.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="23-数值表示"><a class="markdownIt-Anchor" href="#23-数值表示"></a> 2.3 数值表示</h1>
<p>进制</p>
<p>●进制也就是进位制，是人们规定的一种进位方法</p>
<p>●对于任何一种进制—X进制，就表示某一位置上的数运算时是逢X进一位</p>
<p>○十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，x进制就是逢x进位</p>
<table>
<thead>
<tr>
<th>十进制</th>
<th>二进制</th>
<th>八进制</th>
<th>十六进制</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>10</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>11</td>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>100</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td>101</td>
<td>5</td>
<td>5</td>
</tr>
<tr>
<td>6</td>
<td>110</td>
<td>6</td>
<td>6</td>
</tr>
<tr>
<td>7</td>
<td>111</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>8</td>
<td>1000</td>
<td>10</td>
<td>8</td>
</tr>
<tr>
<td>9</td>
<td>1001</td>
<td>11</td>
<td>9</td>
</tr>
<tr>
<td>10</td>
<td>1010</td>
<td>12</td>
<td>A</td>
</tr>
<tr>
<td>11</td>
<td>1011</td>
<td>13</td>
<td>B</td>
</tr>
<tr>
<td>12</td>
<td>1100</td>
<td>14</td>
<td>C</td>
</tr>
<tr>
<td>13</td>
<td>1101</td>
<td>15</td>
<td>D</td>
</tr>
<tr>
<td>14</td>
<td>1110</td>
<td>16</td>
<td>E</td>
</tr>
<tr>
<td>15</td>
<td>1111</td>
<td>17</td>
<td>F</td>
</tr>
<tr>
<td>16</td>
<td>10000</td>
<td>20</td>
<td>10</td>
</tr>
</tbody>
</table>
<p>二进制</p>
<p>●二进制是计算技术中广泛采用的一种数制。二进制数据是用0和1两个数码来表示的数</p>
<p>○它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”</p>
<p>●当前的计算机系统使用的基本上是二进制系统，数据在计算机中主要是以补码的形式存储的</p>
<p>●十进制转化二进制的方法：</p>
<p>○用十进制数除以2，分别取余数和商数，商数为0的时候，将余数倒着数就是转化后的结果</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685691437159-f2865750-8036-418a-bb70-993af3968209.png" alt="image.png" /></p>
<p>八进制</p>
<p>●八进制，Octal，缩写OCT或O，一种以8为基数的计数法，采用0，1，2，3，4，5，6，7八个数字，逢八进1</p>
<p>○一些编程语言中常常以数字0开始表明该数字是八进制</p>
<p>●八进制的数和二进制数可以按位对应（八进制一位对应二进制三位），因此常应用在计算机语言中</p>
<p>●八进制和二进制互转：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685691711372-7aa3dead-e71a-4398-852a-ee52e1b6401d.png" alt="image.png" /></p>
<p>●十进制转化八进制的方法：</p>
<p>○用十进制数除以8，分别取余数和商数，商数为0的时候，将余数倒着数就是转化后的结果</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685691930932-7804a968-96b8-48b0-9ebf-256e7cbf4da2.png" alt="image.png" /></p>
<p>十六进制</p>
<p>●十六进制（英文名称：Hexadecimal），同我们日常生活中的表示法不一样，它由0-9，A-F组成，字母不区分大小写</p>
<p>○与10进制的对应关系是：0-9对应0-9，A-F(或a-f)对应10-15</p>
<p>●十六进制的数和二进制数可以按位对应（十六进制一位对应二进制四位），因此常应用在计算机语言中</p>
<p>●十六进制和二进制互转：</p>
<p>二进制转十六进制:</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685692193473-8677053e-a8a0-4825-9eaa-b976a9d62950.png" alt="image.png" /></p>
<p>●十进制转化十六进制的方法：</p>
<p>○用十进制数除以16，分别取余数和商数，商数为0的时候，将余数倒着数就是转化后的结果</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685692264841-5af6fb80-b372-4134-a968-4bef7a7e54a9.png" alt="image.png" /></p>
<p>C语言如何表示相应进制数</p>
<table>
<thead>
<tr>
<th>十进制</th>
<th>以正常数字1-9开头，如15</th>
</tr>
</thead>
<tbody>
<tr>
<td>八进制</td>
<td>以数字0开头，如017</td>
</tr>
<tr>
<td>十六进制</td>
<td>以0x或0X开头，如0xf</td>
</tr>
<tr>
<td>二进制</td>
<td>以0b或0B开头，如0b1111</td>
</tr>
</tbody>
</table>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 十进制方式赋值</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">15</span>;</span><br><span class="line">    <span class="comment">// 八进制方式赋值</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">017</span>;</span><br><span class="line">    <span class="comment">// 十六进制方式赋值</span></span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0xf</span>;</span><br><span class="line">    <span class="comment">// 二进制方式赋值</span></span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">0b1111</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d\n&quot;</span>, a, b, c, d);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数值存储方式</p>
<p>原码</p>
<p>●最高位做为符号位，0表示正，为1表示负</p>
<p>●其它数值部分就是数值本身绝对值的二进制数</p>
<p>●负数的原码是在其绝对值的基础上，最高位变为1</p>
<p>●下面数值以1字节的大小描述</p>
<table>
<thead>
<tr>
<th>十进制数</th>
<th>原码</th>
</tr>
</thead>
<tbody>
<tr>
<td>+15</td>
<td>0000 1111</td>
</tr>
<tr>
<td>-15</td>
<td>1000 1111</td>
</tr>
<tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1000 0000</td>
</tr>
</tbody>
</table>
<p>○原码存在减法运算问题及两个0问题</p>
<p>反码</p>
<p>●对于正数，反码与原码相同</p>
<p>●对于负数，符号位不变，其它部分取反(1变0,0变1)</p>
<p>●下面数值以1字节的大小描述</p>
<table>
<thead>
<tr>
<th>十进制数</th>
<th>反码</th>
</tr>
</thead>
<tbody>
<tr>
<td>+15</td>
<td>0000 1111</td>
</tr>
<tr>
<td>-15</td>
<td>1111 0000</td>
</tr>
<tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1111 1111</td>
</tr>
</tbody>
</table>
<p>○反码运算也不方便，通常用来作为求补码的中间过渡。</p>
<p>补码</p>
<p>●在计算机系统中，数值一律用补码来存储</p>
<p>●对于正数，原码、反码、补码相同</p>
<p>●对于负数，其补码为它的反码加1</p>
<p>○负数的补码符号位不动，其他位求反，最后整个数加1，得到原码</p>
<p>●下面数值以1字节的大小描述</p>
<table>
<thead>
<tr>
<th>十进制数</th>
<th>补码</th>
</tr>
</thead>
<tbody>
<tr>
<td>+15</td>
<td>0000 1111</td>
</tr>
<tr>
<td>-15</td>
<td>1111 0001</td>
</tr>
<tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>0000 0000</td>
</tr>
</tbody>
</table>
<p>移码</p>
<p>●补码符号位取反就是移码，主要用来比较数的大小</p>
<p>●下面数值以1字节的大小描述</p>
<table>
<thead>
<tr>
<th>十进制数</th>
<th>补码</th>
</tr>
</thead>
<tbody>
<tr>
<td>+15</td>
<td>1000 1111</td>
</tr>
<tr>
<td>-15</td>
<td>0111 0001</td>
</tr>
<tr>
<td>+0</td>
<td>1000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1000 0000</td>
</tr>
</tbody>
</table>
]]></content>
  </entry>
  <entry>
    <title>2.4 输出和输入</title>
    <url>/2.4%20%E8%BE%93%E5%87%BA%E5%92%8C%E8%BE%93%E5%85%A5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="24-输出和输入"><a class="markdownIt-Anchor" href="#24-输出和输入"></a> 2.4 输出和输入</h1>
<p>输出</p>
<p>●输出：将程序的运行结果输出到控制台或终端窗口中</p>
<p>●printf语法格式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br></pre></td></tr></table></figure>
<p>○format参数是一个格式化字符串，包含了输出的格式控制信息</p>
<p>○后面的参数是要输出的数据</p>
<p>●格式化占位符</p>
<table>
<thead>
<tr>
<th>打印格式</th>
<th>对应数据类型</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>%d</td>
<td>int</td>
<td>接受整数值并将它表示为有符号的十进制整数</td>
</tr>
<tr>
<td>%ld</td>
<td>long</td>
<td>接受长整数值并将它表示为有符号的十进制整数</td>
</tr>
<tr>
<td>%hd</td>
<td>short int</td>
<td>短整数</td>
</tr>
<tr>
<td>%hu</td>
<td>unsigned short</td>
<td>无符号短整数</td>
</tr>
<tr>
<td>%o</td>
<td>unsigned int</td>
<td>无符号8进制整数</td>
</tr>
<tr>
<td>%u</td>
<td>unsigned int</td>
<td>无符号10进制整数</td>
</tr>
<tr>
<td>%x,%X</td>
<td>unsigned int</td>
<td>无符号16进制整数，x对应的是abcdef，X对应的是ABCDEF</td>
</tr>
<tr>
<td>%f</td>
<td>float</td>
<td>单精度浮点数</td>
</tr>
<tr>
<td>%lf</td>
<td>double</td>
<td>双精度浮点数</td>
</tr>
<tr>
<td>%e,%E</td>
<td>double</td>
<td>科学计数法表示的数，此处&quot;e&quot;的大小写代表在输出时用的&quot;e&quot;的大小写</td>
</tr>
<tr>
<td>%c</td>
<td>char</td>
<td>字符型。可以把输入的数字按照ASCII码相应转换为对应的字符</td>
</tr>
<tr>
<td>%s</td>
<td>char *</td>
<td>字符串。输出字符串中的字符直至字符串中的空字符（字符串以’\0‘结尾，这个’\0’即空字符）</td>
</tr>
<tr>
<td>%p</td>
<td>void *</td>
<td>以16进制形式输出指针</td>
</tr>
</tbody>
</table>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">long</span> l = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">1.123456789123456789</span>;</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">1.123456789123456789</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ui = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">char</span> *name = <span class="string">&quot;bill&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 格式化输出</span></span><br><span class="line">    <span class="comment">// 整型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c=%d\n&quot;</span>, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s=%hd\n&quot;</span>, s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i=%d\n&quot;</span>, i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;l=%ld\n&quot;</span>, l);</span><br><span class="line">    <span class="comment">// 浮点类型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;f=%.10f\n&quot;</span>, f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;d=%.20lf\n&quot;</span>, d);</span><br><span class="line">    <span class="comment">// 无符号数据</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;u=%u\n&quot;</span>, ui);</span><br><span class="line">    <span class="comment">// 八进制和十六进制 可以加上前缀# 自动输出八进制和十六进制0或0x</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;o=%#o\n&quot;</span>, <span class="number">120</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x=%#x\n&quot;</span>, <span class="number">120</span>);</span><br><span class="line">    <span class="comment">// 字符串类型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s=%s\n&quot;</span>, name);</span><br><span class="line">    <span class="comment">// 内存地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ps=%p\n&quot;</span>, &amp;s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入</p>
<p>●输入：接收用户输入的数据的过程</p>
<p>●scanf语法格式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;格式化字符串&quot;</span>, &amp;变量<span class="number">1</span>, &amp;变量<span class="number">2</span>，...);</span><br></pre></td></tr></table></figure>
<p>○格式化字符串用于指定输入的数据类型及其格式</p>
<p>○变量1、变量2等是要读入的变量的地址</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义int类型变量age，通过scanf输入内容，然后打印内容</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入年龄：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;age = %d\n&quot;</span>, age);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>案例</p>
<p>●从键盘输入一个圆形的半径，输出圆的周长和面积</p>
<p>●思路步骤</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>定义常量pi</span><br><span class="line"><span class="number">2.</span>定义半径变量r</span><br><span class="line"><span class="number">3.</span>输入半径</span><br><span class="line"><span class="number">4.</span>求周长和面积, * 为乘以运算符</span><br><span class="line"><span class="number">5.</span>输出周长和面积</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义常量pi</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.1415</span>;</span><br><span class="line">    <span class="comment">// 2.定义半径变量r</span></span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    <span class="comment">// 3.输入半径</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入半径：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;r);</span><br><span class="line">    <span class="comment">// 4.求周长和面积, * 为乘以运算符</span></span><br><span class="line">    <span class="keyword">double</span> len = <span class="number">2</span> * pi * r;</span><br><span class="line">    <span class="keyword">double</span> area = pi * r * r;</span><br><span class="line">    <span class="comment">// 5.输出周长和面积</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;周长len = %lf, 面积area = %lf\n&quot;</span>, len, area);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>2.6 类型转换</title>
    <url>/2.6%20%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="26-类型转换"><a class="markdownIt-Anchor" href="#26-类型转换"></a> 2.6 类型转换</h1>
<p>数据有不同的类型，不同类型数据之间进行混合运算时涉及到类型的转换问题。</p>
<p>●转换的方法有两种：</p>
<p>○自动转换(隐式转换)：遵循一定的规则，由编译系统自动完成</p>
<p>○强制类型转换：把表达式的运算结果强制转换成所需的数据类型</p>
<p>■语法格式： (类型)变量或常量</p>
<p>●类型转换的原则：</p>
<p>○占用内存字节数少(值域小)的类型，向占用内存字节数多(值域大)的类型转换，以保证精度不降低。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685870042949-e6638cc6-04bd-4f41-a7ed-9d7c660c538c.png" alt="image.png" /></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 隐式转换（自动转换）：编译器自动转换</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">11</span>;</span><br><span class="line">	<span class="keyword">double</span> b = a; <span class="comment">//将a的值，11，转换为11.0000，再给b赋值 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b = %lf\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 强制类型转换，用户转换， (类型)变量或常量</span></span><br><span class="line">	<span class="keyword">int</span> m = <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">2</span>;</span><br><span class="line">	b = (<span class="keyword">double</span>)m/n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b = %lf\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	b = (<span class="keyword">double</span>)<span class="number">3</span>/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;b = %lf\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 类型转换原则：数据类型小的往数据类型大的转</span></span><br><span class="line">	<span class="keyword">int</span> c = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">char</span> d = (<span class="keyword">char</span>)c; <span class="comment">//没有问题</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;d = %d\n&quot;</span>, d);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 大的往小的转，数据可能会丢失</span></span><br><span class="line">	c = <span class="number">129</span>;</span><br><span class="line">	d = (<span class="keyword">char</span>)c;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;d = %d\n&quot;</span>, d);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 小的往大的转</span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> big = (<span class="keyword">int</span>)c;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;big = %lld\n&quot;</span>, big);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">b = <span class="number">11.000000</span></span><br><span class="line">a = <span class="number">11</span></span><br><span class="line">b = <span class="number">1.500000</span></span><br><span class="line">b = <span class="number">1.500000</span></span><br><span class="line">d = <span class="number">100</span></span><br><span class="line">d = <span class="number">-127</span></span><br><span class="line">big = <span class="number">129</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>2.5 运算符</title>
    <url>/2.5%20%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="25-运算符"><a class="markdownIt-Anchor" href="#25-运算符"></a> 2.5 运算符</h1>
<p>算术运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>正号</td>
<td>+3</td>
<td>3</td>
</tr>
<tr>
<td>-</td>
<td>负号</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr>
<td>+</td>
<td>加</td>
<td>10 + 5</td>
<td>15</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>10 - 5</td>
<td>5</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>10 * 5</td>
<td>50</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>10 / 5</td>
<td>2</td>
</tr>
<tr>
<td>%</td>
<td>取模(取余)</td>
<td>10 % 3</td>
<td>1</td>
</tr>
<tr>
<td>++</td>
<td>前自增</td>
<td>a=2; b=++a;</td>
<td>a=3; b=3;</td>
</tr>
<tr>
<td>++</td>
<td>后自增</td>
<td>a=2; b=a++;</td>
<td>a=3; b=2;</td>
</tr>
<tr>
<td>–</td>
<td>前自减</td>
<td>a=2; b=–a;</td>
<td>a=1; b=1;</td>
</tr>
<tr>
<td>–</td>
<td>后自减</td>
<td>a=2; b=a–;</td>
<td>a=1; b=2;</td>
</tr>
</tbody>
</table>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2数相除，要想得到小数的结果，分子分母必须有一个数是小数</span></span><br><span class="line">    <span class="keyword">double</span> c = <span class="number">5</span>/<span class="number">2</span>; <span class="comment">// 5, 2个都是整数，只会取整</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c1 = %lf\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    c = <span class="number">5.0</span>/<span class="number">2</span>; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c2 = %lf\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    c = <span class="number">5</span>/<span class="number">2.0</span>; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c3 = %lf\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 前置++</span></span><br><span class="line">    <span class="comment">// 先加后用</span></span><br><span class="line">    <span class="keyword">int</span> b = ++i; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;前置：b = %d, i = %d\n&quot;</span>, b, i);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置++</span></span><br><span class="line">    <span class="comment">// 先用后加</span></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    b = i++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;后置：b = %d, i = %d\n&quot;</span>, b, i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">c1 = 2.000000</span><br><span class="line">c2 = 2.500000</span><br><span class="line">c3 = 2.500000</span><br><span class="line">前置：b = 1, i = 1</span><br><span class="line">后置：b = 0, i = 1</span><br></pre></td></tr></table></figure>
<p>赋值运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>赋值</td>
<td>a=2; b=3;</td>
<td>a=2; b=3;</td>
</tr>
<tr>
<td>+=</td>
<td>加等于</td>
<td>a=0; a+=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>-=</td>
<td>减等于</td>
<td>a=5; a-=3;</td>
<td>a=2;</td>
</tr>
<tr>
<td>*=</td>
<td>乘等于</td>
<td>a=2; a*=2;</td>
<td>a=4;</td>
</tr>
<tr>
<td>/=</td>
<td>除等于</td>
<td>a=4; a/=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>%=</td>
<td>模等于</td>
<td>a=3; a%2;</td>
<td>a=1;</td>
</tr>
</tbody>
</table>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    a += <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a = 15</span><br></pre></td></tr></table></figure>
<p>比较运算符</p>
<p>C 语言的比较运算中， “真”用数字“1”来表示， “假”用数字“0”来表示。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>==</td>
<td>相等于</td>
<td>4 == 3</td>
<td>0</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>4 != 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>4 &lt; 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>4 &gt; 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>4 &lt;= 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td>4 &gt;= 1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a == b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a != b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a &gt; b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a &lt; b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a &gt;= b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a &lt;= b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>逻辑运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>!</td>
<td>非</td>
<td>!a</td>
<td>如果a为假，则!a为真； 如果a为真，则!a为假。</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>a &amp;&amp; b</td>
<td>如果a和b都为真，则结果为真，否则为假。</td>
</tr>
<tr>
<td>||</td>
<td>或</td>
<td>a || b</td>
<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>
</tr>
</tbody>
</table>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 非0就是真，0就是假</span></span><br><span class="line">    <span class="comment">// &amp;&amp;, 并且，左右2边结果为真，才为真</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">-1</span> &amp;&amp; <span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">-1</span> &amp;&amp; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// || 或者， 左边或右边有1个为真，就是真，2个都为假才为假</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">-10</span> || <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">0</span> || <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ! 取反</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, !(<span class="number">0</span> || <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 短路规则</span></span><br><span class="line">    <span class="comment">// &amp;&amp; 左边为假，右边执行不到</span></span><br><span class="line">    <span class="number">0</span> &amp;&amp; <span class="built_in">printf</span>(<span class="string">&quot;我执行不到\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// || 左边为真，右边执行不到</span></span><br><span class="line">	<span class="number">1</span> || <span class="built_in">printf</span>(<span class="string">&quot;我执行不到到\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>位运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;</td>
<td>按位与</td>
<td>011 &amp; 101</td>
<td>2个都为1才为1，结果为001</td>
</tr>
<tr>
<td>|</td>
<td>按位或</td>
<td>011 | 101</td>
<td>有1个为1就为1，结果为111</td>
</tr>
<tr>
<td>^</td>
<td>按位异或</td>
<td>011 ^ 101</td>
<td>不同的为1，结果为110</td>
</tr>
<tr>
<td>~</td>
<td>取反</td>
<td>011</td>
<td>100</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移</td>
<td>1010 &lt;&lt; 1</td>
<td>10100</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移</td>
<td>1010 &gt;&gt; 1</td>
<td>0101</td>
</tr>
</tbody>
</table>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> a = <span class="number">3</span>;          <span class="comment">// 0000 0011</span></span><br><span class="line">    <span class="keyword">uint8_t</span> b = <span class="number">10</span>;         <span class="comment">// 0000 1010</span></span><br><span class="line">    <span class="comment">// 打印显示2个字符，个数不够，左边补0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x\n&quot;</span>, a &amp; b); <span class="comment">// 0000 0010，16进制为02</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x\n&quot;</span>, a | b); <span class="comment">// 0000 1011，16进制为0b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x\n&quot;</span>, a ^ b); <span class="comment">// 0000 1001，16进制为09</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint8_t</span> c = <span class="number">10</span>;          <span class="comment">// 0000 1010</span></span><br><span class="line">    <span class="keyword">uint8_t</span> temp = ~c;       <span class="comment">// 1111 0101</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x\n&quot;</span>, temp);   <span class="comment">// 1111 0101，16进制为f5</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x\n&quot;</span>, c &lt;&lt; <span class="number">1</span>); <span class="comment">// 0001 0100，16进制为14</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x\n&quot;</span>, c &gt;&gt; <span class="number">1</span>); <span class="comment">// 0000 0101，16进制为05</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">02</span><br><span class="line">0b</span><br><span class="line">09</span><br><span class="line">f5</span><br><span class="line">14</span><br><span class="line">05</span><br></pre></td></tr></table></figure>
<p>案例需求：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将变量a的第2位设置为1，其他位保持不变</span></span><br><span class="line"><span class="keyword">uint8_t</span> a = <span class="number">0b10110011</span>; <span class="comment">// 0xb3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将变量b的第2位、第6位设置为1，其他位保持不变</span></span><br><span class="line"><span class="keyword">uint8_t</span> b = <span class="number">0b10110011</span>; <span class="comment">// 0xb3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将变量c的第5位设置为0，其他位保持不变</span></span><br><span class="line"><span class="keyword">uint8_t</span> c = <span class="number">0b10110011</span>;  <span class="comment">// 0xb3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将变量d的第0~3位设置为0，其他位保持不变</span></span><br><span class="line"><span class="keyword">uint8_t</span> d = <span class="number">0b11111111</span>;  <span class="comment">// 0xff;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将变量e的第2位取反，其他位保持不变</span></span><br><span class="line"><span class="keyword">uint8_t</span> e = <span class="number">0b10110011</span>;  <span class="comment">// 0xb3;</span></span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将变量a的第2位设置为1，其他位保持不变</span></span><br><span class="line">    <span class="keyword">uint8_t</span> a = <span class="number">0b10110011</span>; <span class="comment">// 0xb3;</span></span><br><span class="line">    a |= (<span class="number">1</span> &lt;&lt; <span class="number">2</span>);          <span class="comment">// 或者 x = x | (1 &lt;&lt; 2);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x\n&quot;</span>, a);    <span class="comment">// b7,  10110111</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将变量b的第2位、第6位设置为1，其他位保持不变</span></span><br><span class="line">    <span class="keyword">uint8_t</span> b = <span class="number">0b10110011</span>; <span class="comment">// 0xb3;</span></span><br><span class="line">    b |= (<span class="number">1</span> &lt;&lt; <span class="number">2</span> | <span class="number">1</span> &lt;&lt; <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x\n&quot;</span>, b);    <span class="comment">// f7，11110111</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将变量c的第5位设置为0，其他位保持不变</span></span><br><span class="line">    <span class="keyword">uint8_t</span> c = <span class="number">0b10110011</span>;  <span class="comment">// 0xb3;</span></span><br><span class="line">    c &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x\n&quot;</span>, c);    <span class="comment">// 93，10010011</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将变量d的第0~3位设置为0，其他位保持不变</span></span><br><span class="line">    <span class="keyword">uint8_t</span> d = <span class="number">0b11111111</span>;  <span class="comment">// 0xff;</span></span><br><span class="line">    d &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">0</span> | <span class="number">1</span> &lt;&lt; <span class="number">1</span> | <span class="number">1</span> &lt;&lt; <span class="number">2</span> | <span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x\n&quot;</span>, d);    <span class="comment">// f0，11110000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将变量e的第2位取反，其他位保持不变</span></span><br><span class="line">    <span class="keyword">uint8_t</span> e = <span class="number">0b10110011</span>;  <span class="comment">// 0xb3;</span></span><br><span class="line">    e ^= (<span class="number">1</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x\n&quot;</span>, e);    <span class="comment">// b7,  10110111</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运算符优先级</p>
<p>●不同的运算符默认具备不同的优先级</p>
<p>●想把所有的运算符优先级都记住确实没必要，现用现查</p>
<p>●当无法确定谁的优先级高时，加一个小括号就解决了</p>
<table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>名称或含义</th>
<th>使用形式</th>
<th>结合方向</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>[]</td>
<td>数组下标</td>
<td>数组名[常量表达式]</td>
<td>左到右</td>
<td>–</td>
</tr>
<tr>
<td>()</td>
<td>圆括号</td>
<td>(表达式）/函数名(形参表)</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>.</td>
<td>成员选择（对象）</td>
<td>对象.成员名</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>-&gt;</td>
<td>成员选择（指针）</td>
<td>对象指针-&gt;成员名</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>-</td>
<td>负号运算符</td>
<td>-表达式</td>
<td>右到左</td>
<td>单目运算符</td>
</tr>
<tr>
<td>~</td>
<td>按位取反运算符</td>
<td>~表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>++</td>
<td>自增运算符</td>
<td><ins>变量名/变量名</ins></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>–</td>
<td>自减运算符</td>
<td>–变量名/变量名–</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>*</td>
<td>取值运算符</td>
<td>*指针变量</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&amp;</td>
<td>取地址运算符</td>
<td>&amp;变量名</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>!</td>
<td>逻辑非运算符</td>
<td>!表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>(类型)</td>
<td>强制类型转换</td>
<td>(数据类型)表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>sizeof</td>
<td>长度运算符</td>
<td>sizeof(表达式)</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>/</td>
<td>除</td>
<td>表达式/表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>表达式*表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>%</td>
<td>余数（取模）</td>
<td>整型表达式%整型表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>+</td>
<td>加</td>
<td>表达式+表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>表达式-表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>&lt;&lt;</td>
<td>左移</td>
<td>变量&lt;&lt;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移</td>
<td>变量&gt;&gt;表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>&gt;</td>
<td>大于</td>
<td>表达式&gt;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td>表达式&gt;=表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>表达式&lt;表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>表达式&lt;=表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>==</td>
<td>等于</td>
<td>表达式==表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td>！=</td>
<td>不等于</td>
<td>表达式!= 表达式</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>&amp;</td>
<td>按位与</td>
<td>表达式&amp;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td>9</td>
<td>^</td>
<td>按位异或</td>
<td>表达式^表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td>10</td>
<td>|</td>
<td>按位或</td>
<td>表达式|表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td>11</td>
<td>&amp;&amp;</td>
<td>逻辑与</td>
<td>表达式&amp;&amp;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td>12</td>
<td>||</td>
<td>逻辑或</td>
<td>表达式||表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td>13</td>
<td>?:</td>
<td>条件运算符</td>
<td>表达式1? 表达式2: 表达式3</td>
<td>右到左</td>
<td>三目运算符</td>
</tr>
<tr>
<td>14</td>
<td>=</td>
<td>赋值运算符</td>
<td>变量=表达式</td>
<td>右到左</td>
<td>–</td>
</tr>
<tr>
<td>/=</td>
<td>除后赋值</td>
<td>变量/=表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>*=</td>
<td>乘后赋值</td>
<td>变量*=表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>%=</td>
<td>取模后赋值</td>
<td>变量%=表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>+=</td>
<td>加后赋值</td>
<td>变量+=表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>-=</td>
<td>减后赋值</td>
<td>变量-=表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;&lt;=</td>
<td>左移后赋值</td>
<td>变量&lt;&lt;=表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>&gt;&gt;=</td>
<td>右移后赋值</td>
<td>变量&gt;&gt;=表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>&amp;=</td>
<td>按位与后赋值</td>
<td>变量&amp;=表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>^=</td>
<td>按位异或后赋值</td>
<td>变量^=表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>|=</td>
<td>按位或后赋值</td>
<td>变量|=表达式</td>
<td>–</td>
<td></td>
<td></td>
</tr>
<tr>
<td>15</td>
<td>，</td>
<td>逗号运算符</td>
<td>表达式,表达式,…</td>
<td>左到右</td>
<td>–</td>
</tr>
</tbody>
</table>
]]></content>
  </entry>
  <entry>
    <title>3.1 程序执行的三大流程</title>
    <url>/3.1%20%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%89%E5%A4%A7%E6%B5%81%E7%A8%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="31-程序执行的三大流程"><a class="markdownIt-Anchor" href="#31-程序执行的三大流程"></a> 3.1 程序执行的三大流程</h1>
<p>●顺序 : 从上向下， 顺序执行代码</p>
<p>●分支 : 根据条件判断， 决定执行代码的分支</p>
<p>●循环 : 让特定代码重复的执行</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685972881760-b121507b-6608-4e7a-9dab-f92fe87d5ac4.png?x-oss-process=image%2Fresize%2Cw_711%2Climit_0" alt="image.png" /></p>
]]></content>
  </entry>
  <entry>
    <title>3.2 分支语句</title>
    <url>/3.2%20%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="32-分支语句"><a class="markdownIt-Anchor" href="#32-分支语句"></a> 3.2 分支语句</h1>
<p>条件语句用来根据不同的条件来执行不同的语句，C语言中常用的条件语句包括if语句和switch语句。</p>
<p>if 语句</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685973407897-7154be45-2005-42e6-b29e-8c26148aa6a7.png?x-oss-process=image%2Fresize%2Cw_240%2Climit_0" alt="Picture1.png" /></p>
<p>语法格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    条件成立时，要做的事</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>案例需求：</p>
<p>●定义一个整数变量记录年龄</p>
<p>●判断是否满 18 岁 （&gt;=）</p>
<p>●如果满 18 岁，允许进网吧嗨皮</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个整数变量记录年龄</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入年龄：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age);</span><br><span class="line">    <span class="comment">// 判断是否满 18 岁 （&gt;=）</span></span><br><span class="line">    <span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果满 18 岁，允许进网吧嗨皮</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;允许进网吧嗨皮\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if…else 语句</p>
<p>基本语法</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685973883665-e4b0548d-8961-4179-ad71-78e9cd46a4eb.png?x-oss-process=image%2Fresize%2Cw_281%2Climit_0" alt="Picture2.png" /></p>
<p>语法格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    条件成立时，要做的事</span><br><span class="line">    ……</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	条件不成立时，要做的事 </span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>案例需求：</p>
<p>●定义一个整数变量记录年龄</p>
<p>●判断是否满 18 岁 （&gt;=）</p>
<p>●如果满 18 岁，允许进网吧嗨皮</p>
<p>●否则，提示回家写作业</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个整数变量记录年龄</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入年龄：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age);</span><br><span class="line">    <span class="comment">// 判断是否满 18 岁 （&gt;=）</span></span><br><span class="line">    <span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果满 18 岁，允许进网吧嗨皮</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;允许进网吧嗨皮\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则，提示回家写作业</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;回家写作业\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>三目运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>术语</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>?:</td>
<td>三目运算符</td>
<td>a&gt;b?a:b;</td>
<td>如果a&gt;b，整体为结果a，否则整体结果为b</td>
</tr>
</tbody>
</table>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过三目运算符求2个数的最大值</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> c = a &gt; b ? a : b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大值：%d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if…else if…else语句</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1685974299432-a190b8e6-d13b-4ac9-abc5-e92505fa5c97.png?x-oss-process=image%2Fresize%2Cw_506%2Climit_0" alt="Picture3.png" /></p>
<p>语法格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">    条件<span class="number">1</span>成立时，要做的事</span><br><span class="line">    ……</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>) &#123;</span><br><span class="line">	条件<span class="number">2</span>成立时，要做的事 </span><br><span class="line">    ……</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	条件不成立时，要做的事 </span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>案例需求：</p>
<p>●天猫超市双 11 推出以下优惠促销活动：</p>
<p>○购物满 50 元，打 9 折；</p>
<p>○购物满 100 元，打 8 折；</p>
<p>○购物满 200 元，打 7 折；</p>
<p>○购物满 300 元，打 6 折；</p>
<p>●编程计算当购物满 s 元时，实际付费多少？</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义变量记录购买金额 定义变量记录实际费用</span></span><br><span class="line">    <span class="keyword">float</span> money, real_money;</span><br><span class="line">    <span class="comment">// 2.输入购买金额</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入购买金额：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;money);</span><br><span class="line">    <span class="comment">// 3.根据购买金额判断折扣</span></span><br><span class="line">    <span class="keyword">if</span> (money &gt;= <span class="number">50</span> &amp;&amp; money &lt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="comment">// 购物满 50 元，打 9 折；</span></span><br><span class="line">        real_money = money * <span class="number">0.9</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (money &gt;= <span class="number">100</span> &amp;&amp; money &lt; <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// 购物满 100 元，打 8 折；</span></span><br><span class="line">        real_money = money * <span class="number">0.8</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (money &gt;= <span class="number">200</span> &amp;&amp; money &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="comment">// 购物满 200 元，打 7 折；</span></span><br><span class="line">        real_money = money * <span class="number">0.7</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (money &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="comment">// 购物满 300 元，打 6 折；</span></span><br><span class="line">        real_money = money * <span class="number">0.6</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 不满50 原价</span></span><br><span class="line">        real_money = money;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;购买金额: %f  实际价格: %f\n&quot;</span>, money, real_money);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优化后的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义变量记录购买金额 定义变量记录实际费用</span></span><br><span class="line">    <span class="keyword">float</span> money, real_money;</span><br><span class="line">    <span class="comment">// 2.输入购买金额</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入购买金额：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;money);</span><br><span class="line">    <span class="comment">// 3.根据购买金额判断折扣   </span></span><br><span class="line">    <span class="keyword">if</span> (money &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="comment">// 购物满 300 元，打 6 折；</span></span><br><span class="line">        real_money = money * <span class="number">0.6</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (money &gt;= <span class="number">200</span>) &#123;   </span><br><span class="line">        <span class="comment">// 购物满 200 元，打 7 折；</span></span><br><span class="line">        real_money = money * <span class="number">0.7</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (money &gt;= <span class="number">100</span>) &#123; </span><br><span class="line">        <span class="comment">// 购物满 100 元，打 8 折；</span></span><br><span class="line">        real_money = money * <span class="number">0.8</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (money &gt;= <span class="number">50</span>) &#123; </span><br><span class="line">        <span class="comment">// 购物满 50 元，打 9 折；  </span></span><br><span class="line">        real_money = money * <span class="number">0.9</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 不满50 原价</span></span><br><span class="line">        real_money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;购买金额: %f  实际价格: %f\n&quot;</span>, money, real_money);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>switch语句</p>
<p>●测试一个表达式是否等于一些可能的值，并根据表达式的值执行相应的代码块，可以使用switch语言实现</p>
<p>●switch可以支持数据类型：</p>
<p>○int</p>
<p>○枚举类型</p>
<p>○char类型</p>
<p>●switch和if区别：</p>
<p>○需要根据布尔条件来执行不同的代码块，则应使用if语句</p>
<p>○需要根据表达式的值来执行不同的代码块，则应使用switch语句</p>
<p>语法格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        <span class="comment">// 代码块1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">        <span class="comment">// 代码块2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    	<span class="comment">// 代码块3</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>案例需求：</p>
<p>●输入int类型的数据,根据结果输出不同的内容</p>
<p>○输入1：输出Monday</p>
<p>○输入2：输出Tuesday</p>
<p>○输入3：输出Wednesday</p>
<p>○输入4：输出Thursday</p>
<p>○输入5：输出Friday</p>
<p>○输入6：输出Saturday</p>
<p>○输入7：输出Sunday</p>
<p>○输入其它：输出error</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 定义变量保存数据</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">// 2. 输入数据</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入1~7的数字：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">    <span class="comment">// 3. 使用switch根据数据不同输出不同的结果</span></span><br><span class="line">    <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Monday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Tuesday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Wednesday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Thursday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Friday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Saturday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Sunday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;error\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分支综合案例</p>
<p>案例需求：</p>
<p>●输入：年份（整数）和月份（整数）</p>
<p>●输出：该月份的天数（整数）</p>
<p>思路分析：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>定义变量保存年份、月份、天数</span><br><span class="line"><span class="number">2.</span>输入年份和月份</span><br><span class="line"><span class="number">3.</span>根据月份输出天数</span><br><span class="line">	<span class="number">1</span>、<span class="number">3</span>、<span class="number">5</span>、<span class="number">7</span>、<span class="number">8</span>、<span class="number">10</span>、<span class="number">12</span>月  <span class="number">31</span>天</span><br><span class="line">    <span class="number">4</span>、<span class="number">6</span>、<span class="number">9</span>、<span class="number">11</span>月			<span class="number">30</span>天</span><br><span class="line">    <span class="number">2</span>月 	非闰年 <span class="number">28</span>天  闰年 <span class="number">29</span>天</span><br><span class="line">	闰年判断：能被<span class="number">4</span>整除，但不能被<span class="number">100</span>整除的；或者能被<span class="number">400</span>整除的年份</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义变量保存年份、月份、天数</span></span><br><span class="line">    <span class="keyword">int</span> year, month, day;</span><br><span class="line">    <span class="comment">// 2.输入年份和月份</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;year, &amp;month);</span><br><span class="line">    <span class="comment">// 3.根据月份输出天数</span></span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            day = <span class="number">31</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            day = <span class="number">30</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="comment">// 2月   非闰年 28天  闰年 29天</span></span><br><span class="line">            <span class="comment">// 闰年判断：能被4整除，但不能被100整除的；或者能被400整除的年份</span></span><br><span class="line">            <span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">                day = <span class="number">29</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                day = <span class="number">28</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            day = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d 年 %d 月 有 %d 天\n&quot;</span>, year, month, day);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>3.3 循环语句</title>
    <url>/3.3%20%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="33-循环语句"><a class="markdownIt-Anchor" href="#33-循环语句"></a> 3.3 循环语句</h1>
<p>●什么是循环</p>
<p>○重复执行代码</p>
<p>●为什么需要循环</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686029149023-8f736032-e2d8-41c5-b532-dabf5d614566.png" alt="image.png" /></p>
<p>●循环的实现方式</p>
<p>○while</p>
<p>○do…while</p>
<p>○for</p>
<p>while语句</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686029371068-03013a1a-354a-4fd3-b360-dde6ecba0614.png?x-oss-process=image%2Fresize%2Cw_237%2Climit_0" alt="图片1.png" /></p>
<p>语法格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件) &#123;</span><br><span class="line">    循环体</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需求：跑步5圈</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需求跑步5圈</span></span><br><span class="line">    <span class="comment">// 1. 条件变量的定义</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 2. while 控制重复的次数</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="comment">// 3. 打印跑步第几圈</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;跑步第 %d 圈\n&quot;</span>, i);</span><br><span class="line">        <span class="comment">// 4. 条件改变</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>do…while语句</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686048185567-b355d7e2-6c2a-4d93-a615-3d7416876a30.png?x-oss-process=image%2Fresize%2Cw_254%2Climit_0" alt="图片1.png" /></p>
<p>语法格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    循环体</span><br><span class="line">    ……</span><br><span class="line">&#125; <span class="keyword">while</span> (条件);</span><br></pre></td></tr></table></figure>
<p>●do-while 循环语句是在执行循环体之后才检查 条件 表达式的值</p>
<p>●所以 do-while 语句的循环体至少执行一次，do…while也被称为直到型循环</p>
<p>需求：跑步5圈</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需求跑步5圈</span></span><br><span class="line">    <span class="comment">// 1. 条件变量的定义</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 2.1 打印跑步第几圈</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;跑步第 %d 圈\n&quot;</span>, i);</span><br><span class="line">        <span class="comment">// 2.2 条件改变</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">while</span> ( i &lt;= <span class="number">5</span> ); <span class="comment">// 3. 控制重复的次数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>for语句</p>
<p>语法格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( init; condition; increment ) &#123;</span><br><span class="line">	循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●init会首先被执行，且只会执行一次</p>
<p>●接下来，会判断 condition，如果条件condition为真</p>
<p>●在执行完 for 循环主体后，控制流会跳回上面的 increment 语句</p>
<p>●条件再次被判断</p>
<p>需求：跑步5圈</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需求跑步5圈</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;跑步第 %d 圈\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>死循环</p>
<p>●条件永远为真的循环就是死循环</p>
<p>●示例代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// while (1) &#123;</span></span><br><span class="line">    <span class="comment">//     printf(&quot;根本停不下来\n&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;根本停不下来\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>循环案例</p>
<p>实现1+2+3……100所有数字的累加</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需求：实现1+2+3……100所有数字的累加</span></span><br><span class="line">    <span class="comment">// 定义条件变量初始值为1</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 定义累加变量，初始值为0</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 循环控制100次</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="comment">// 累加</span></span><br><span class="line">        sum += i;</span><br><span class="line">        <span class="comment">// 条件改变</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环外面，打印最终的累加和</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for循环实现</span></span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        temp += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;temp = %d\n&quot;</span>, temp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>循环嵌套</p>
<p>需求如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">通过<span class="keyword">for</span>循环嵌套打印内容：</span><br><span class="line">* * * * * </span><br><span class="line">* * * * * </span><br><span class="line">* * * * * </span><br><span class="line">* * * * * </span><br><span class="line">* * * * * </span><br><span class="line">说明：</span><br><span class="line"><span class="number">1</span>）每行有<span class="number">5</span>个*，总共有<span class="number">5</span>行</span><br><span class="line"><span class="number">2</span>）*之间有空格隔开</span><br><span class="line"><span class="number">3</span>）<span class="built_in">printf</span>()<span class="number">1</span>次只能打印<span class="number">1</span>个*</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>3.4 跳转关键字</title>
    <url>/3.4%20%E8%B7%B3%E8%BD%AC%E5%85%B3%E9%94%AE%E5%AD%97.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="34-跳转关键字"><a class="markdownIt-Anchor" href="#34-跳转关键字"></a> 3.4 跳转关键字</h1>
<p>●循环和switch专属的跳转：break</p>
<p>●循环专属的跳转：continue</p>
<p>●无条件跳转：goto</p>
<p>break</p>
<p>●循环的break说明</p>
<p>○某一条件满足时，不再执行循环体中后续重复的代码，并退出循环</p>
<p>●需求：一共吃5碗饭, 吃到第3碗吃饱了, 结束吃饭动作</p>
<p>●示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需求: 一共吃5碗饭, 吃到第3碗吃饱了, 结束吃饭动作</span></span><br><span class="line">    <span class="comment">// 1. 定义条件变量，为了查看方便, 计数器从 1 开始</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">5</span>) &#123; <span class="comment">// 2. 控制条件</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;吃饱了，不吃了\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 结束循环，退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;吃第 %d 碗饭\n&quot;</span>, i);</span><br><span class="line">        <span class="comment">// 3. 条件变量改变</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>continue</p>
<p>●某一条件满足时，不再执行本次循环体中后续重复的代码，但进入下一次循环判断</p>
<p>○while循环，continue 之前一定要修改计数器(条件变量)，否则，导致死循环</p>
<p>●需求：一共吃5个苹果，吃到第3个遇到虫子，这个跳过不吃，下一个继续</p>
<p>●示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需求: 一共吃5个苹果，吃到第3个遇到虫子，这个跳过不吃，下一个继续</span></span><br><span class="line">    <span class="comment">// 1. 定义条件变量，为了查看方便, 计数器从 1 开始</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">5</span>) &#123; <span class="comment">// 2. 控制条件</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;这个有虫子，不吃了\n&quot;</span>);</span><br><span class="line">            i++;    <span class="comment">// continue 之前一定要修改计数器(条件变量)，否则，导致死循环</span></span><br><span class="line">            <span class="keyword">continue</span>;; <span class="comment">// 跳过本次循环，下次继续</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;吃第 %d 个苹果\n&quot;</span>, i);</span><br><span class="line">        <span class="comment">// 3. 条件变量改变</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>goto</p>
<p>●goto用于无条件跳转</p>
<p>○在一种情况下可以使用goto语句：从一组嵌套的循环中跳出</p>
<p>●goto语句可以导致代码不易理解和维护，并且容易引入不必要的错误。因此，除非必要，最好不要使用goto语句</p>
<p>●示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">goto</span> End; <span class="comment">//无条件跳转到End的标识</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;aaaaaaaaa\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">End:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bbbbbbbb\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>4.1 概述</title>
    <url>/4.1%20%E6%A6%82%E8%BF%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="41-概述"><a class="markdownIt-Anchor" href="#41-概述"></a> 4.1 概述</h1>
<p>●函数是一种可重用的代码块，用于执行特定任务或完成特定功能</p>
<p>●函数作用：对具备相同逻辑的代码进行封装，提高代码的编写效率，实现对代码的重用</p>
<p>●函数作用演示代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                            _ooOoo_  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                           o8888888o  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                           88  .  88  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                           (| -_- |)  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                            O\\ = /O  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                        ____/`---&#x27;\\____  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                      .   &#x27; \\| |// `.  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                       / \\||| : |||// \\  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                     / _||||| -:- |||||- \\  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                       | | \\\\\\ - /// | |  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                     | \\_| &#x27;&#x27;\\---/&#x27;&#x27; | |  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                      \\ .-\\__ `-` ___/-. /  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                   ___`. .&#x27; /--.--\\ `. . __  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                .&quot;</span><span class="string">&quot; &#x27;&lt; `.___\\_&lt;|&gt;_/___.&#x27; &gt;&#x27;&quot;</span><span class="string">&quot;.  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;               | | : `- \\`.;`\\ _ /`;.`/ - ` : | |  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                 \\ \\ `-. \\_ __\\ /__ _/ .-` / /  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;         ======`-.____`-.___\\_____/___.-`____.-&#x27;======  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                            `=---=&#x27;  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;         .............................................  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                  佛祖镇楼                  BUG辟易  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;          佛曰:  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                  写字楼里写字间，写字间里程序员；  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                  程序人员写程序，又拿程序换酒钱。  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                  酒醒只在网上坐，酒醉还来网下眠；  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                  酒醉酒醒日复日，网上网下年复年。  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                  但愿老死电脑间，不愿鞠躬老板前；  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                  奔驰宝马贵者趣，公交自行程序员。  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                  别人笑我忒疯癫，我笑自己命太贱；  \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;                  不见满街漂亮妹，哪个归得程序员？\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数调用</span></span><br><span class="line">    func();</span><br><span class="line">    func();</span><br><span class="line">    func();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●函数使用步骤</p>
<p>○定义函数</p>
<p>■理解为制作工具，工具只需要制作1次即可</p>
<p>○调用函数</p>
<p>■理解为使用工具</p>
<p>●函数分类</p>
<p>○系统函数，即库函数：这是由编译系统提供的，用户不必自己定义这些函数，可以直接使用它们，如我们常用的打印函数printf()。</p>
<p>○自定义函数：用以解决用户的专门需要。</p>
]]></content>
  </entry>
  <entry>
    <title>4.2 函数的使用</title>
    <url>/4.2%20%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="42-函数的使用"><a class="markdownIt-Anchor" href="#42-函数的使用"></a> 4.2 函数的使用</h1>
<p>无参无返回值</p>
<p>●语法格式如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="keyword">void</span> 函数名() &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line">函数名();</span><br></pre></td></tr></table></figure>
<p>○函数名是标识符的一种，需要遵循规则</p>
<p>○函数只需要定义一次，反复调用</p>
<p>○只定义函数, 不调用函数, 函数永远不会被执行</p>
<p>●案例需求：</p>
<p>○编写一个函数，里面实现2个数字相加，并打印相加后的结果</p>
<p>●示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实现2个数字相加，并打印相加后的结果</span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;res = %d\n&quot;</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 函数调用</span></span><br><span class="line">    my_add();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●执行流程</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686119393717-ac957066-ecf8-44be-b701-70f50b4ce20f.png" alt="image.png" /></p>
<p>有参无返回值</p>
<p>●函数参数的作用：增加函数的灵活性</p>
<p>○可以根据需求在调用函数时, 通过参数传入不同的数据</p>
<p>●语法格式如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="keyword">void</span> 函数名(形参列表) &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line">函数名(实参列表);</span><br></pre></td></tr></table></figure>
<p>○实参和形参的关系：从左往右，一一对应</p>
<p>●案例需求：</p>
<p>○编写一个函数，实现2个数相加，2个数通过参数传递</p>
<p>●示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实现2个形参相加，并打印相加后的结果</span></span><br><span class="line">    <span class="keyword">int</span> res = a + b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d + %d = %d\n&quot;</span>, a, b, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 函数调用</span></span><br><span class="line">    my_add(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●执行流程</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686120295838-e7030ce9-fe19-4179-9bc6-809f2bc88009.png" alt="image.png" /></p>
<p>有参有返回值</p>
<p>返回值基本语法</p>
<p>●函数返回值的作用：函数外部想使用函数内部的数据</p>
<p>●语法格式如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line">返回类型 函数名(形参列表) &#123;</span><br><span class="line">    函数体</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> 和返回类型一致的数据(或变量);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line">和返回类型一致的变量 = 函数名(实参列表);</span><br></pre></td></tr></table></figure>
<p>○return是函数的专属关键字，只能用在函数内容</p>
<p>●案例需求：</p>
<p>○编写一个函数，实现2个数相加，2个数通过参数传递，返回累加结果给外部使用</p>
<p>●示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实现2个形参相加，并返回累加的结果</span></span><br><span class="line">    <span class="keyword">int</span> res = a + b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 函数调用</span></span><br><span class="line">    <span class="keyword">int</span> temp = my_add(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;temp  = %d\n&quot;</span>, temp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●执行流程</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686121613269-b7f7ebf7-8d72-488a-9a99-767a4dc9cd0b.png" alt="image.png" /></p>
<p>返回值注意点</p>
<p>●return的作用是结束函数</p>
<p>○函数内，return后面的代码不会执行</p>
<p>●示例代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;11111111111111111\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// 结束函数，函数内后面代码不会执行</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;222222222222222222\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 函数调用</span></span><br><span class="line">    func();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数的声明</p>
<p>●如果函数定义代码没有放在函数调用的前面，这时候需要先做函数的声明</p>
<p>●所谓函数声明，相当于告诉编译器，函数是有定义的，再别的地方定义，以便使编译能正常进行</p>
<p>●注意：一个函数只能被定义一次，但可以声明多次</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的声明，分号不能省略</span></span><br><span class="line"><span class="comment">// 函数声明的前面可以加extern关键字，也可以不加</span></span><br><span class="line"><span class="comment">// extern int my_add(int a, int b);</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">// 另一种方式，形参名可以不写</span></span><br><span class="line"><span class="comment">// int my_add(int, int );</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 函数调用</span></span><br><span class="line">    <span class="keyword">int</span> temp = my_add(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;temp  = %d\n&quot;</span>, temp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实现2个形参相加，并返回累加的结果</span></span><br><span class="line">    <span class="keyword">int</span> res = a + b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数案例</p>
<p>●需求：自定义一个函数，返回2个整数的最大值</p>
<p>●示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 函数调用</span></span><br><span class="line">    <span class="keyword">int</span> res = my_max(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;res = %d\n&quot;</span>, res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>4.3 局部和全局变量</title>
    <url>/4.3%20%E5%B1%80%E9%83%A8%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="43-局部和全局变量"><a class="markdownIt-Anchor" href="#43-局部和全局变量"></a> 4.3 局部和全局变量</h1>
<p>局部变量</p>
<p>●定义在函数内部的变量称为局部变量（Local Variable）</p>
<p>●局部变量的作用域(作用范围)仅限于函数内部， 离开该函数后是无效的</p>
<p>○离开该函数后，局部变量自动释放</p>
<p>●示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// a, b, res是局部变量，只能在my_add内部使用</span></span><br><span class="line">    <span class="keyword">int</span> res = a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 函数调用</span></span><br><span class="line">    my_add(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 函数外部无法使用函数内的局部变量，下面代码是错误的</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d\n&quot;</span>, a, b, res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>全局变量</p>
<p>●在所有函数外部定义的变量称为全局变量（Global Variable），它的作用域默认是整个程序，也就是所有的源文件</p>
<p>●示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数外定义的变量为全局变量，定义完，所有地方都能使用</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用全局变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>4.4 多文件编程</title>
    <url>/4.4%20%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E7%A8%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="44-多文件编程"><a class="markdownIt-Anchor" href="#44-多文件编程"></a> 4.4 多文件编程</h1>
<p>多文件编程</p>
<p>●把函数声明放在头文件xxx.h中，在主函数中包含相应头文件</p>
<p>●在头文件对应的xxx.c中实现xxx.h声明的函数</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686128761991-9bc1ff41-01f2-49f1-bdff-6a9b29dd7acf.png" alt="image.png" /></p>
<p>防止头文件重复包含</p>
<p>●当一个项目比较大时，往往都是分文件，这时候有可能不小心把同一个头文件 include 多次，或者头文件嵌套包含。</p>
<p>●为了避免同一个文件被include多次，C/C++中有两种方式。</p>
<p>●方法一：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SOMEFILE_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SOMEFILE_H__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明语句</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>●方法二：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明语句</span></span><br></pre></td></tr></table></figure>
<p>头文件包含的区别</p>
<p>●&lt;&gt; 表示系统直接按系统指定的目录检索</p>
<p>●&quot;&quot; 表示系统先在 “” 指定的路径(没写路径代表当前路径)查找头文件，如果找不到，再按系统指定的目录检索</p>
]]></content>
  </entry>
  <entry>
    <title>5.1 指针基本语法</title>
    <url>/5.1%20%E6%8C%87%E9%92%88%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="51-指针基本语法"><a class="markdownIt-Anchor" href="#51-指针基本语法"></a> 5.1 指针基本语法</h1>
<p>概述</p>
<p>●内存地址</p>
<p>○在计算机内存中，每个存储单元都有一个唯一的地址(内存编号)。</p>
<p>■通俗理解，内存就是房间，地址就是门牌号</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686131609877-7db5c826-b83f-4c6e-b03e-9e64d236674a.png" alt="image.png" /></p>
<p>●指针和指针变量</p>
<p>○指针（Pointer）是一种特殊的变量类型，它用于存储内存地址。</p>
<p>■指针的实质就是内存“地址”</p>
<p>○指针变量就是存储这个地址的变量。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686131839031-4ba7205e-f660-4091-b76c-5eb512131e71.png" alt="image.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1687957884548-4e1e4172-e3d5-4799-9838-f2b8b3ad08ba.png" alt="image.png" /></p>
<p>●指针作用</p>
<p>○可间接修改变量的值</p>
<p>指针变量的定义和使用</p>
<p>●指针也是一种数据类型，指针变量也是一种变量</p>
<p>●指针变量指向谁，就把谁的地址赋值给指针变量</p>
<p>●语法格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">类型 变量;</span><br><span class="line">类型 * 指针变量 = &amp;变量;</span><br></pre></td></tr></table></figure>
<p>○&amp; 叫取地址，返回操作数的内存地址</p>
<p>○* 叫解引用，指操作指针所指向的变量的值</p>
<p>○在定义变量时，* 号表示所声明的变量为指针类型</p>
<p>■指针变量要保存某个变量的地址，指针变量的类型比这个变量的类型多一个*</p>
<p>○在指针使用时，* 号表示操作指针所指向的内存空间</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个int类型的变量，同时赋值为10</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 打印变量的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a = %p\n&quot;</span>, &amp;a);</span><br><span class="line">    <span class="comment">// 定义一个指针变量，int *保存int的地址</span></span><br><span class="line">    <span class="comment">// int *代表是一种数据类型，int *指针类型，p才是变量名</span></span><br><span class="line">    <span class="keyword">int</span>* p;</span><br><span class="line">    <span class="comment">// 指针指向谁，就把谁的地址赋值给这个指针变量</span></span><br><span class="line">    p = &amp;a;</span><br><span class="line">    <span class="comment">// 打印p, *p, p指向了a的地址，*p就是a的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p = %p, *p = %d\n&quot;</span>, p, *p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686135103214-17e14d0d-0790-497a-840e-738bb16aaf57.png" alt="image.png" /></p>
<p>通过指针间接修改变量的值</p>
<p>●指针变量指向谁，就把谁的地址赋值给指针变量</p>
<p>●通过 *指针变量 间接修改变量的值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个int类型变量a，同时赋值为0</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 定义int *指针变量，同时赋值a的地址</span></span><br><span class="line">    <span class="keyword">int</span> *p = &amp;a;</span><br><span class="line">    <span class="comment">// 通过指针间接修改a的值</span></span><br><span class="line">    *p = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">    <span class="comment">// 定义一个int类型变量b，同时赋值为5</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// p 保存 b的地址</span></span><br><span class="line">    p = &amp;b;</span><br><span class="line">    <span class="comment">// 通过指针间接修改b的值</span></span><br><span class="line">    *p = <span class="number">250</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>const修饰的指针变量</p>
<p>●语法格式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p1 = &amp;a;	<span class="comment">// 等价于 int const *p1 = &amp;a;</span></span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p3 = &amp;a;</span><br></pre></td></tr></table></figure>
<p>○从左往右看，跳过类型，看修饰哪个字符</p>
<p>■如果是*， 说明指针指向的内存不能改变</p>
<p>■如果是指针变量，说明指针的指向不能改变，指针的值不能修改</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// p1 可以改，*p1不能改</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *p1 = &amp;a; <span class="comment">// 等价于 int const *p1 = &amp;a;</span></span><br><span class="line">    <span class="comment">// p1 = &amp;b;    // ok</span></span><br><span class="line">    <span class="comment">// *p1 = 555;  // err</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// p2 不能修改，*p2可以修改</span></span><br><span class="line">    <span class="keyword">int</span> *<span class="keyword">const</span> p2 = &amp;a;</span><br><span class="line">    <span class="comment">// p2 = &amp;b;    //err</span></span><br><span class="line">    <span class="comment">// *p2 = 555;  // ok</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// p3 和 *p 都不能改</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> p3 = &amp;a;</span><br><span class="line">    <span class="comment">// p3 = &amp;b;    // err</span></span><br><span class="line">    <span class="comment">// *p3 = 555;  // err</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指针大小</p>
<p>●使用sizeof()测量指针的大小，得到的总是：4或8</p>
<p>●sizeof()测的是指针变量指向存储地址的大小</p>
<p>○在32位平台，所有的指针（地址）都是32位(4字节)</p>
<p>○在64位平台，所有的指针（地址）都是64位(8字节)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p1;</span><br><span class="line">	<span class="keyword">int</span> **p2;</span><br><span class="line">	<span class="keyword">char</span> *p3;</span><br><span class="line">	<span class="keyword">char</span> **p4;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sizeof(p1) = %llu\n&quot;</span>, <span class="keyword">sizeof</span>(p1));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sizeof(p2) = %llu\n&quot;</span>, <span class="keyword">sizeof</span>(p2));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sizeof(p3) = %llu\n&quot;</span>, <span class="keyword">sizeof</span>(p3));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sizeof(p4) = %llu\n&quot;</span>, <span class="keyword">sizeof</span>(p4));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sizeof(double *) = %llu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">double</span> *));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指针步长</p>
<p>●指针步长指的是通过指针进行递增或递减操作时，指针所指向的内存地址相对于当前地址的偏移量。</p>
<p>●指针的步长取决于所指向的数据类型。</p>
<p>○指针加n等于指针地址加上 n 个 sizeof(type) 的长度</p>
<p>○指针减n等于指针地址减去 n 个 sizeof(type)  的长度</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">char</span> *p1 = &amp;ch;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p1:%p, p1+1: %p\n&quot;</span>, p1, p1 + <span class="number">1</span>); <span class="comment">// 步长为1字节</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> *p2 = &amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p2:%p, p2+1: %p\n&quot;</span>, p2, p2 + <span class="number">1</span>); <span class="comment">// 步长为4字节</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">    <span class="keyword">double</span> *p3 = &amp;d;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p3:%p, p3+1: %p\n&quot;</span>, p3, p3 + <span class="number">1</span>); <span class="comment">// 步长为8字节</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>野指针和空指针</p>
<p>●指针变量也是变量，是变量就可以任意赋值</p>
<p>●任意数值赋值给指针变量没有意义，因为这样的指针就成了野指针</p>
<p>○此指针指向的区域是未知(操作系统不允许操作此指针指向的内存区域)</p>
<p>●野指针不会直接引发错误，操作野指针指向的内存区域才会出问题</p>
<p>●为了标志某个指针变量没有任何指向，可赋值为NULL</p>
<p>○NULL是一个值为0的宏常量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p;</span><br><span class="line">    p = <span class="number">0x12345678</span>; <span class="comment">// 给指针变量p赋值，p为野指针， ok，不会有问题，但没有意义</span></span><br><span class="line">    <span class="comment">// *p = 1000;      // 操作野指针指向未知区域，内存出问题，err</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;111111111111111111\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *q = <span class="literal">NULL</span>;  <span class="comment">// 空指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多级指针</p>
<p>●C语言允许有多级指针存在，在实际的程序中一级指针最常用，其次是二级指针。</p>
<p>●二级指针就是指向一个一级指针变量地址的指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = &amp;a; <span class="comment">// 一级指针</span></span><br><span class="line">    *p = <span class="number">100</span>;    <span class="comment">//*p就是a</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> **q = &amp;p;</span><br><span class="line">    <span class="comment">// *q就是p</span></span><br><span class="line">    <span class="comment">// **q就是a</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ***t = &amp;q;</span><br><span class="line">    <span class="comment">// *t就是q</span></span><br><span class="line">    <span class="comment">// **t就是p</span></span><br><span class="line">    <span class="comment">// ***t就是a</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d\n&quot;</span>, *p, **q, ***t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>5.2 指针和函数</title>
    <url>/5.2%20%E6%8C%87%E9%92%88%E5%92%8C%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="52-指针和函数"><a class="markdownIt-Anchor" href="#52-指针和函数"></a> 5.2 指针和函数</h1>
<p>函数参数传值</p>
<p>●传值是指将参数的值拷贝一份传递给函数，函数内部对该参数的修改不会影响到原来的变量</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数参数传值，函数内部交换2个变量的值，验证函数外部的变量有没有改变</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 函数内部交换2个变量的值</span></span><br><span class="line">    <span class="keyword">int</span> temp = m;</span><br><span class="line">    m = n;</span><br><span class="line">    n = temp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;函数内部 m = %d, n = %d\n&quot;</span>, m, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">// 调用函数，值传递</span></span><br><span class="line">    func(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;函数外部 a = %d, b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">函数内部 m = 20, n = 10</span><br><span class="line">函数外部 a = 10, b = 20</span><br></pre></td></tr></table></figure>
<p>函数参数传址</p>
<p>●传址是指将参数的地址传递给函数，函数内部可以通过该地址来访问原变量，并对其进行修改。</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数参数传地址，函数内部交换2个指针指向内存的值，验证函数外部的变量有没有改变</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> *m, <span class="keyword">int</span> *n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 函数内部交换2个指针指向内存的值</span></span><br><span class="line">    <span class="keyword">int</span> temp = *m;</span><br><span class="line">    *m = *n;</span><br><span class="line">    *n = temp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;函数内部 *m = %d, *n = %d\n&quot;</span>, *m, *n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">// 调用函数，地址传递</span></span><br><span class="line">    func(&amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;函数外部 a = %d, b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">函数内部 *m = 20, *n = 10</span><br><span class="line">函数外部 a = 20, b = 10</span><br></pre></td></tr></table></figure>
<p>函数指针</p>
<p>函数名</p>
<p>●一个函数在编译时被分配一个入口地址，这个地址就称为函数的指针，函数名代表函数的入口地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;func a = %d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 函数名字，就是代表函数的入口地址，函数地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p, %p, %p\n&quot;</span>, func, &amp;func, *func);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3种调用方法都可以</span></span><br><span class="line">    func(<span class="number">1</span>); <span class="comment">// 最简便，最常用</span></span><br><span class="line">    (&amp;func)(<span class="number">2</span>);</span><br><span class="line">    (*func)(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数指针</p>
<p>●函数指针：它是指针，指向函数的指针</p>
<p>●语法格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">返回值 (*函数指针变量)(形参列表);</span><br></pre></td></tr></table></figure>
<p>○函数指针变量的定义，其中返回值、形参列表需要和指向的函数匹配</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 函数指针变量的定义，同时初始化</span></span><br><span class="line">    <span class="keyword">void</span> (*p1)(<span class="keyword">int</span> a) = func;</span><br><span class="line">    <span class="comment">// 通过函数指针变量调用函数</span></span><br><span class="line">    p1(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先定义函数指针变量，后面再赋值</span></span><br><span class="line">    <span class="keyword">void</span> (*p2)(<span class="keyword">int</span>);</span><br><span class="line">    p2 = func;</span><br><span class="line">    <span class="comment">// 通过函数指针变量调用函数</span></span><br><span class="line">    p2(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回调函数</p>
<p>●函数指针变量做函数参数，这个函数指针变量指向的函数就是回调函数</p>
<p>●回调函数可以增加函数的通用性</p>
<p>○在不改变原函数的前提下，增加新功能</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数，函数指针做形参</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> (*p)(<span class="keyword">int</span>, <span class="keyword">int</span>))</span></span>&#123;</span><br><span class="line">    <span class="comment">// 通过函数指针变量调用函数，获取返回值</span></span><br><span class="line">    <span class="keyword">int</span> res = p(a, b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义加法函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义减法函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调加法函数</span></span><br><span class="line">    result = calc(<span class="number">1</span>, <span class="number">2</span>, add);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result = %d\n&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调减法函数</span></span><br><span class="line">    result = calc(<span class="number">10</span>, <span class="number">5</span>, sub);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result = %d\n&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>6.1 数组基本语法</title>
    <url>/6.1%20%E6%95%B0%E7%BB%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="61-数组基本语法"><a class="markdownIt-Anchor" href="#61-数组基本语法"></a> 6.1 数组基本语法</h1>
<p>什么是数组</p>
<p>●数组是 C 语言中的一种数据结构，用于存储一组具有相同数据类型的数据。</p>
<p>●数组中的每个元素可以通过一个索引（下标）来访问，索引从 0 开始，最大值为数组长度减 1。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686190655644-846fac09-e68e-4122-9ce2-fe182e33ad31.png" alt="image.png" /></p>
<p>一维数组</p>
<p>数组的使用</p>
<p>●定义语法格式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">类型 数组名[元素个数];</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>
<p>○数组名不能与其它变量名相同，同一作用域内是唯一的</p>
<p>○其下标从0开始计算，因此5个元素分别为arr[0]，arr[1]，arr[2]，arr[3]，arr[4]</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义了一个数组，名字叫a，有10个成员，每个成员都是int类型</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>]; </span><br><span class="line">    <span class="comment">// a[0]…… a[9]，没有a[10]</span></span><br><span class="line">    <span class="comment">// 没有a这个变量，a是数组的名字，但不是变量名，它是常量</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">    a[<span class="number">9</span>] = <span class="number">9</span>;</span><br><span class="line">    <span class="comment">// 数据越界，超出范围，错误</span></span><br><span class="line">    <span class="comment">// a[10] = 10;  // err</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        a[i] = i; <span class="comment">// 给数组赋值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历数组，并输出每个成员的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数组的初始化</p>
<p>●在定义数组的同时进行赋值，称为初始化</p>
<p>●全局数组若不初始化，编译器将其初始化为零</p>
<p>●局部数组若不初始化，内容为随机值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a1[<span class="number">10</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;; <span class="comment">// 定义一个数组，同时初始化所有成员变量</span></span><br><span class="line"><span class="keyword">int</span> a2[<span class="number">10</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;; <span class="comment">// 初始化前三个成员，后面所有元素都设置为0</span></span><br><span class="line"><span class="keyword">int</span> a3[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// 所有的成员都设置为0</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// []中不定义元素个数，定义时必须初始化</span></span><br><span class="line"><span class="keyword">int</span> a4[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;; <span class="comment">// 定义了一个数组，有5个成员</span></span><br></pre></td></tr></table></figure>
<p>数组名</p>
<p>●数组名是一个地址的常量，代表数组中首元素的地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个数组，同时初始化所有成员变量</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组名是一个地址的常量，代表数组中首元素的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %p\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a[0] = %p\n&quot;</span>, &amp;a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(a);     <span class="comment">// 数组占用内存的大小，10个int类型，10 * 4  = 40</span></span><br><span class="line">    <span class="keyword">int</span> n0 = <span class="keyword">sizeof</span>(a[<span class="number">0</span>]); <span class="comment">// 数组第0个元素占用内存大小，第0个元素为int，4</span></span><br><span class="line">    <span class="keyword">int</span> num = n / n0;      <span class="comment">// 元素个数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n = %d, n0 = %d, num = %d\n&quot;</span>, n, n0, num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>6.2 数组案例</title>
    <url>/6.2%20%E6%95%B0%E7%BB%84%E6%A1%88%E4%BE%8B.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="62-数组案例"><a class="markdownIt-Anchor" href="#62-数组案例"></a> 6.2 数组案例</h1>
<p>一维数组的最大值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个数组，同时初始化所有成员变量</span></span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">-2</span>, <span class="number">3</span>, <span class="number">-4</span>, <span class="number">5</span>, <span class="number">-6</span>, <span class="number">7</span>, <span class="number">-8</span>, <span class="number">-9</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假设第0个元素就是最大值</span></span><br><span class="line">    <span class="keyword">int</span> temp = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]); i++) &#123;</span><br><span class="line">        <span class="comment">// 如果有元素比临时的最大值大，就交换值</span></span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; temp) &#123;</span><br><span class="line">            temp = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组中最大值为：%d\n&quot;</span>, temp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一维数组的逆置</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个数组，同时初始化所有成员变量</span></span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;  <span class="comment">// 首元素下标</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]) - <span class="number">1</span>;   <span class="comment">// 尾元素下标</span></span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="comment">// 元素交换值</span></span><br><span class="line">        temp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">        <span class="comment">// 位置移动</span></span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]); i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>6.3 数组和指针</title>
    <url>/6.3%20%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="63-数组和指针"><a class="markdownIt-Anchor" href="#63-数组和指针"></a> 6.3 数组和指针</h1>
<p>通过指针操作数组元素</p>
<p>●数组名字是数组的首元素地址，但它是一个常量</p>
<p>●* 和 [] 效果一样，都是操作指针所指向的内存</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// * 和 [] 效果一样，都是操作指针所指向的内存</span></span><br><span class="line">        <span class="comment">// printf(&quot;%d, &quot;, a[i]);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, *(a + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个指针变量保存a的地址</span></span><br><span class="line">    <span class="keyword">int</span> *p = a; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// printf(&quot;%d, &quot;, p[i]);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, *(p + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指针数组</p>
<p>●指针数组，它是数组，数组的每个元素都是指针类型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// * 和 [] 效果一样，都是操作指针所指向的内存</span></span><br><span class="line">        <span class="comment">// printf(&quot;%d, &quot;, a[i]);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, *(a + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个指针变量保存a的地址</span></span><br><span class="line">    <span class="keyword">int</span> *p = a; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// printf(&quot;%d, &quot;, p[i]);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, *(p + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数组名做函数参数</p>
<p>●数组名做函数参数，函数的形参本质上就是指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面3种写法完全等价</span></span><br><span class="line"><span class="comment">// void print_arr(int a[10], int n)</span></span><br><span class="line"><span class="comment">// void print_arr(int a[], int n)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组名做函数参数</span></span><br><span class="line">    print_arr(a, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>6.4 字符数组与字符串</title>
    <url>/6.4%20%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="64-字符数组与字符串"><a class="markdownIt-Anchor" href="#64-字符数组与字符串"></a> 6.4 字符数组与字符串</h1>
<p>字符数组与字符串区别</p>
<p>●C语言中没有字符串这种数据类型，可以通过char的数组来替代</p>
<p>●数字0(和字符 ‘\0’ 等价)结尾的char数组就是一个字符串，字符串是一种特殊的char的数组</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686194355556-d969a9ab-71f0-4c82-8784-fbf7c5136577.png" alt="image.png" /></p>
<p>●如果char数组没有以数字0结尾，那么就不是一个字符串，只是普通字符数组</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c1[] = &#123;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;; <span class="comment">// 普通字符数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c1 = %s\n&quot;</span>, c1);                    <span class="comment">// 有可能乱码，因为没有&#x27;\0&#x27;结束符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以&#x27;\0&#x27;(&#x27;\0&#x27;就是数字0)结尾的字符数组是字符串</span></span><br><span class="line">    <span class="keyword">char</span> c2[] = &#123;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c2 = %s\n&quot;</span>, c2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串处理以&#x27;\0&#x27;(数字0)作为结束符，后面的&#x27;h&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;e&#x27;, &#x27;o&#x27;不会输出</span></span><br><span class="line">    <span class="keyword">char</span> c3[] = &#123;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c3 = %s\n&quot;</span>, c3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用字符串初始化，编译器自动在后面补0，常用</span></span><br><span class="line">	<span class="keyword">char</span> c4[] = <span class="string">&quot;c prog&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c4 = %s\n&quot;</span>, c4);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串的输入输出</p>
<p>●由于字符串采用了’\0’标志，字符串的输入输出将变得简单方便</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;input string1: &quot;</span>);</span><br><span class="line">    <span class="comment">// scanf(&quot;%s&quot;,str) 默认以空格分隔</span></span><br><span class="line">    <span class="comment">// 可以输入空格</span></span><br><span class="line">    gets(str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;output: %s\n&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符指针</p>
<p>●字符指针可直接赋值为字符串，保存的实际上是字符串的首地址</p>
<p>○这时候，字符串指针所指向的内存不能修改，指针变量本身可以修改</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p = <span class="string">&quot;hello&quot;</span>;  <span class="comment">// 和 const char *p = &#x27;hello&#x27; 等价，有没有const都一样</span></span><br><span class="line">    <span class="comment">// 指针变量所指向的内存不能修改</span></span><br><span class="line">    <span class="comment">// *p = &#x27;a&#x27;;    // err</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p = %s\n&quot;</span>, p);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指针变量可以修改</span></span><br><span class="line">    p = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p = %s\n&quot;</span>, p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串常用库函数</p>
<p>strlen</p>
<p>函数说明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">strlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;</span><br><span class="line">功能：计算指定指定字符串s的长度，不包含字符串结束符‘\<span class="number">0</span>’</span><br><span class="line">参数：</span><br><span class="line">	s：字符串首地址</span><br><span class="line">返回值：字符串s的长度，<span class="keyword">size_t</span>为<span class="keyword">unsigned</span> <span class="keyword">int</span>类型，不同平台会不一样</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n = %d\n&quot;</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n = 7</span><br></pre></td></tr></table></figure>
<p>strcpy</p>
<p>函数说明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strcpy</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src)</span></span>;</span><br><span class="line">功能：把src所指向的字符串复制到dest所指向的空间中，<span class="string">&#x27;\0&#x27;</span>也会拷贝过去</span><br><span class="line">参数：</span><br><span class="line">	dest：目的字符串首地址，如果参数dest所指的内存空间不够大，可能会造成缓冲溢出的错误情况</span><br><span class="line">	src：源字符首地址</span><br><span class="line">返回值：</span><br><span class="line">	成功：返回dest字符串的首地址</span><br><span class="line">	失败：<span class="literal">NULL</span></span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> dest[<span class="number">20</span>] = <span class="string">&quot;123456789&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> src[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, dest);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure>
<p>strcat</p>
<p>函数说明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strcat</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src)</span></span>;</span><br><span class="line">功能：将src字符串连接到dest的尾部，‘\<span class="number">0</span>’也会追加过去</span><br><span class="line">参数：</span><br><span class="line">	dest：目的字符串首地址</span><br><span class="line">	src：源字符首地址</span><br><span class="line">返回值：</span><br><span class="line">	成功：返回dest字符串的首地址</span><br><span class="line">	失败：<span class="literal">NULL</span></span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>] = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> *src = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="built_in">strcat</span>(str, src);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">123hello world</span><br></pre></td></tr></table></figure>
<p>strcmp</p>
<p>函数说明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s1, <span class="keyword">const</span> <span class="keyword">char</span> *s2)</span></span>;</span><br><span class="line">功能：比较 s1 和 s2 的大小，比较的是字符ASCII码大小。</span><br><span class="line">参数：</span><br><span class="line">	s1：字符串<span class="number">1</span>首地址</span><br><span class="line">	s2：字符串<span class="number">2</span>首地址</span><br><span class="line">返回值：</span><br><span class="line">	相等：<span class="number">0</span></span><br><span class="line">	大于：&gt;<span class="number">0</span></span><br><span class="line">	小于：&lt;<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> *str2 = <span class="string">&quot;hello mike&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str1, str2) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;str1==str2\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str1, str2) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;str1&gt;str2\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;str1&lt;str2\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">str1&gt;</span><span class="bash">str2</span></span><br></pre></td></tr></table></figure>
<p>字符串案例</p>
<p>●需求：自定义一个函数my_strlen()，实现的功能和strlen一样</p>
<p>●示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strlen</span><span class="params">(<span class="keyword">char</span> * temp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个累加个数的变量，初始值为0</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 循环遍历每一个字符，如果是&#x27;\0&#x27;跳出循环</span></span><br><span class="line">    <span class="keyword">while</span> (temp[i] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 下标累加</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="comment">// 函数调用</span></span><br><span class="line">    <span class="keyword">int</span> n = my_strlen(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n = %d\n&quot;</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>7.1 结构体</title>
    <url>/7.1%20%E7%BB%93%E6%9E%84%E4%BD%93.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="71-结构体"><a class="markdownIt-Anchor" href="#71-结构体"></a> 7.1 结构体</h1>
<p>概述</p>
<p>●有时我们需要将不同类型的数据组合成一个有机的整体，如：一个学生有学号/姓名/性别/年龄/地址等属性</p>
<p>○这时候可通过结构体实现</p>
<p>●结构体(struct)可以理解为用户自定义的特殊的复合的“数据类型”</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686219268011-1928f828-9498-40f6-b54b-3b3e1fd8223f.png" alt="image.png" /></p>
<p>结构体变量的定义和初始化</p>
<p>●定义结构体变量的方式：</p>
<p>○先声明结构体类型再定义变量名</p>
<p>○在声明类型的同时定义变量</p>
<p>●语法格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先声明结构体类型再定义变量名</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名 &#123;</span></span><br><span class="line">    成员列表</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名 变量名;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在声明类型的同时定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名 &#123;</span></span><br><span class="line">    成员列表</span><br><span class="line">&#125;变量名;</span><br></pre></td></tr></table></figure>
<p>●示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构体类型的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">50</span>];</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义类型，再定义变量（常用）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s1</span> =</span> &#123;<span class="string">&quot;mike&quot;</span>, <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类型同时定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu2</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">50</span>];</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;s2 = &#123;<span class="string">&quot;yoyo&quot;</span>, <span class="number">19</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>结构体成员的使用</p>
<p>●如果是结构体变量，通过 . 操作成员</p>
<p>●如果是结构体指针变量，通过 -&gt; 操作成功</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体类型的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义结构体变量，同时初始化</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span> =</span> &#123;<span class="string">&quot;mike&quot;</span>, <span class="number">18</span>&#125;;</span><br><span class="line">    <span class="comment">// 打印成员变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s, %d\n&quot;</span>, s.name, (&amp;s)-&gt;age);</span><br><span class="line">    <span class="comment">// 修改成功变量的内容</span></span><br><span class="line">    <span class="built_in">strcpy</span>(s.name, <span class="string">&quot;yoyo&quot;</span>);</span><br><span class="line">    s.age = <span class="number">19</span>;</span><br><span class="line">    <span class="comment">// 打印成员变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s, %d\n&quot;</span>, s.name, (&amp;s)-&gt;age);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结构体做函数参数</p>
<p>结构体值传参</p>
<p>●传值是指将参数的值拷贝一份传递给函数，函数内部对该参数的修改不会影响到原来的变量</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体类型的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(struct stu temp)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(temp.name, <span class="string">&quot;yoyo&quot;</span>);</span><br><span class="line">    temp.age = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;函数内部：%s, %d\n&quot;</span>, temp.name, temp.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义结构体变量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span> =</span> &#123;<span class="string">&quot;mike&quot;</span>, <span class="number">18</span>&#125;;</span><br><span class="line">    <span class="comment">// 调用函数，值传递</span></span><br><span class="line">    func(s);</span><br><span class="line">    <span class="comment">// 打印成员变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;函数外部：%s, %d\n&quot;</span>, s.name, (&amp;s)-&gt;age);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">函数内部：yoyo, 20</span><br><span class="line">函数外部：mike, 18</span><br></pre></td></tr></table></figure>
<p>结构体地址传递</p>
<p>●传址是指将参数的地址传递给函数，函数内部可以通过该地址来访问原变量，并对其进行修改。</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体类型的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(struct stu *p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(p-&gt;name, <span class="string">&quot;yoyo&quot;</span>);</span><br><span class="line">    p-&gt;age = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;函数内部：%s, %d\n&quot;</span>, p-&gt;name, p-&gt;age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义结构体变量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span> =</span> &#123;<span class="string">&quot;mike&quot;</span>, <span class="number">18</span>&#125;;</span><br><span class="line">    <span class="comment">// 调用函数，地址传递</span></span><br><span class="line">    func(&amp;s);</span><br><span class="line">    <span class="comment">// 打印成员变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;函数外部：%s, %d\n&quot;</span>, s.name, (&amp;s)-&gt;age);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">函数内部：yoyo, <span class="number">20</span></span><br><span class="line">函数外部：yoyo, <span class="number">20</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>7.2 共用体（联合体）</title>
    <url>/7.2%20%E5%85%B1%E7%94%A8%E4%BD%93%EF%BC%88%E8%81%94%E5%90%88%E4%BD%93%EF%BC%89.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="72-共用体联合体"><a class="markdownIt-Anchor" href="#72-共用体联合体"></a> 7.2 共用体(联合体)</h1>
<p>共用体的语法</p>
<p>●共用体union是一个能在同一个存储空间存储不同类型数据的类型</p>
<p>●共用体所占的内存长度等于其最长成员的长度，也有叫做共用体</p>
<p>●同一内存段可以用来存放几种不同类型的成员，但每一瞬时只有一种起作用</p>
<p>●共用体变量中起作用的成员是最后一次存放的成员，在存入一个新的成员后原有的成员的值会被覆盖</p>
<p>●共用体变量的地址和它的各成员的地址都是同一地址</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 共用体也叫联合体</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义共用体变量</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">Test</span> <span class="title">tmp</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、所有成员的首地址是一样的</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p, %p, %p\n&quot;</span>, &amp;(tmp.a), &amp;(tmp.b), &amp;(tmp.c));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、共用体大小为最大成员类型的大小</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%llu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">union</span> Test));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、一个成员赋值，会影响另外的成员</span></span><br><span class="line">    tmp.b = <span class="number">0x44332211</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, tmp.a); <span class="comment">// 11</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, tmp.c); <span class="comment">// 2211</span></span><br><span class="line"></span><br><span class="line">    tmp.a = <span class="number">0x00</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;short: %x\n&quot;</span>, tmp.c); <span class="comment">// 2200</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;int: %x\n&quot;</span>, tmp.b);   <span class="comment">// 44332200</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686222608886-807d750a-4783-43e4-b2a9-864b1a2d76c5.png" alt="image.png" /></p>
<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">000000b7b47ffc2c, 000000b7b47ffc2c, 000000b7b47ffc2c</span><br><span class="line">4</span><br><span class="line">11</span><br><span class="line">2211</span><br><span class="line">short: 2200</span><br><span class="line">int: 44332200</span><br></pre></td></tr></table></figure>
<p>共用体和结构体区别</p>
<p>●存储方式：</p>
<p>○结构体：结构体中的每个成员都占据独立的内存空间，成员之间按照定义的顺序依次存储</p>
<p>○共用体：共用体中的所有成员共享同一块内存空间，不同成员可以存储在同一个地址上</p>
<p>●内存占用：</p>
<p>○结构体：结构体的内存占用是成员变量占用空间之和，每个成员变量都有自己的内存地址</p>
<p>○共用体：共用体的内存占用是最大成员变量所占用的空间大小，不同成员变量共享同一块内存地址</p>
]]></content>
  </entry>
  <entry>
    <title>7.3 枚举</title>
    <url>/7.3%20%E6%9E%9A%E4%B8%BE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="73-枚举"><a class="markdownIt-Anchor" href="#73-枚举"></a> 7.3 枚举</h1>
<p>●枚举：将变量的值一一列举出来，变量的值只限于列举出来的值的范围内</p>
<p>●语法格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span>  枚举名 &#123;</span></span><br><span class="line">	枚举值表</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>○在枚举值表中应列出所有可用值，也称为枚举元素</p>
<p>○枚举值是常量，不能在程序中用赋值语句再对它赋值</p>
<p>○枚举元素本身由系统定义了一个表示序号的数值从0开始顺序定义为0，1，2 …</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">weekday</span> &#123;</span></span><br><span class="line">    sun = <span class="number">2</span>, mon, tue, wed, thu, fri, sat</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">bool</span> &#123;</span></span><br><span class="line">    flase, <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">weekday</span> <span class="title">a</span>, <span class="title">b</span>, <span class="title">c</span>;</span></span><br><span class="line">    a = sun;</span><br><span class="line">    b = mon;</span><br><span class="line">    c = tue;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d\n&quot;</span>, a, b, c);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">bool</span> <span class="title">flag</span>;</span></span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;flag为真\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>7.4 typedef</title>
    <url>/7.4%20typedef.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="74-typedef"><a class="markdownIt-Anchor" href="#74-typedef"></a> 7.4 typedef</h1>
<p>●typedef为C语言的关键字，作用是为一种数据类型(基本类型或自定义数据类型)定义一个新名字，不能创建新类型。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型起别名</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> INT;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> BYTE;</span><br><span class="line"><span class="keyword">typedef</span> BYTE T_BYTE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> UBYTE;</span><br><span class="line"></span><br><span class="line"><span class="comment">// struct type 起别名 </span></span><br><span class="line"><span class="comment">// TYPE为普通结构体类型，PTYPE为结构体指针类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">type</span> &#123;</span></span><br><span class="line">    UBYTE a;</span><br><span class="line">    INT b;</span><br><span class="line">    T_BYTE c;</span><br><span class="line">&#125; TYPE, *PTYPE;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TYPE t;</span><br><span class="line">    t.a = <span class="number">254</span>;</span><br><span class="line">    t.b = <span class="number">10</span>;</span><br><span class="line">    t.c = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    PTYPE p = &amp;t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u, %d, %c\n&quot;</span>, p-&gt;a, p-&gt;b, p-&gt;c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>8.1 内存分布</title>
    <url>/8.1%20%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="81-内存分布"><a class="markdownIt-Anchor" href="#81-内存分布"></a> 8.1 内存分布</h1>
<p>C代码编译过程</p>
<p>●预处理</p>
<p>○宏定义展开、头文件展开、条件编译，这里并不会检查语法</p>
<p>●编译</p>
<p>○检查语法，将预处理后文件编译生成汇编文件</p>
<p>●汇编</p>
<p>○将汇编文件生成目标文件(二进制文件)</p>
<p>●链接</p>
<p>○将目标文件链接为可执行程序</p>
<p>进程的内存分布</p>
<p>●程序运行起来(没有结束前)就是一个进程</p>
<p>●对于一个C语言程序而言，内存空间主要由五个部分组成 代码区(text)、数据区(data)、未初始化数据区(bss)，堆(heap) 和 栈(stack) 组成</p>
<p>○有些人直接把data和bss合起来叫做静态区或全局区</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686274652394-123d4f8e-6c09-4c80-86fb-7114e341a281.png?x-oss-process=image%2Fresize%2Cw_1027%2Climit_0" alt="image.png" /></p>
<p>●代码区（text segment）</p>
<p>○加载的是可执行文件代码段，所有的可执行代码都加载到代码区，这块内存是不可以在运行期间修改的。</p>
<p>●未初始化数据区（BSS）</p>
<p>○加载的是可执行文件BSS段，位置可以分开亦可以紧靠数据段，存储于数据段的数据（全局未初始化，静态未初始化数据）的生存周期为整个程序运行过程。</p>
<p>●全局初始化数据区/静态数据区（data segment）</p>
<p>○加载的是可执行文件数据段，存储于数据段（全局初始化，静态初始化数据，文字常量(只读)）的数据的生存周期为整个程序运行过程。</p>
<p>●栈区（stack）</p>
<p>○栈是一种先进后出的内存结构，由编译器自动分配释放，存放函数的参数值、返回值、局部变量等。在程序运行过程中实时加载和释放，因此，局部变量的生存周期为申请到释放该段栈空间。</p>
<p>●堆区（heap）</p>
<p>○堆是一个大容器，它的容量要远远大于栈，但没有栈那样先进后出的顺序。用于动态内存分配。堆在内存中位于BSS区和栈区之间。一般由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。</p>
]]></content>
  </entry>
  <entry>
    <title>8.2 堆区内存的使用</title>
    <url>/8.2%20%E5%A0%86%E5%8C%BA%E5%86%85%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="82-堆区内存的使用"><a class="markdownIt-Anchor" href="#82-堆区内存的使用"></a> 8.2 堆区内存的使用</h1>
<p>malloc函数说明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line">功能：在内存的动态存储区(堆区)中分配一块长度为size字节的连续区域，用来存放类型说明符指定的类型。</span><br><span class="line">	分配的内存空间内容不确定。</span><br><span class="line">参数：</span><br><span class="line">	size：需要分配内存大小(单位：字节)</span><br><span class="line">返回值：</span><br><span class="line">    成功：分配空间的起始地址</span><br><span class="line">    失败：<span class="literal">NULL</span></span><br></pre></td></tr></table></figure>
<p>free函数说明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span>;</span><br><span class="line">功能：释放ptr所指向的一块内存空间，ptr是一个任意类型的指针变量，指向被释放区域的首地址。</span><br><span class="line">	对同一内存空间多次释放会出错。</span><br><span class="line">参数：</span><br><span class="line">	ptr：需要释放空间的首地址，被释放区应是由<span class="built_in">malloc</span>函数所分配的区域。</span><br><span class="line">返回值：无</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, *arr, n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要申请数组的个数: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 堆区申请 n * sizeof(int) 空间，等价int arr[n]</span></span><br><span class="line">    arr = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123; <span class="comment">// 如果申请失败，提前中断函数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;申请空间失败!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="comment">// 给数组赋值</span></span><br><span class="line">        arr[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 输出数组每个元素的值</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, *(arr+i));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放堆区空间</span></span><br><span class="line">    <span class="built_in">free</span>(arr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>8.3 内存分布代码分析</title>
    <url>/8.3%20%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="83-内存分布代码分析"><a class="markdownIt-Anchor" href="#83-内存分布代码分析"></a> 8.3 内存分布代码分析</h1>
<p>返回栈区地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> &amp;a; <span class="comment">// 函数调用完毕，因为a是局部变量，a释放</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    p = func();</span><br><span class="line">    *p = <span class="number">100</span>; <span class="comment">// 操作野指针指向的内存,err</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;11111111111111111\n&quot;</span>); <span class="comment">// 这句话可能执行不到，因为上一句话报错</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回data区地址</p>
<p>●在函数内部使用static修饰的变量称为静态局部变量</p>
<p>●它在程序运行期间只被初始化一次，并且在函数调用结束后也不会被销毁</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态局部变量，只会初始化一次</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> &amp;a; <span class="comment">// 函数调用完毕，a不释放</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    p = func();</span><br><span class="line">    *p = <span class="number">100</span>; <span class="comment">// ok</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*p = %d\n&quot;</span>, *p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●普通局部变量和静态局部变量区别</p>
<p>○存储位置：</p>
<p>■普通局部变量存储在栈上</p>
<p>■静态局部变量存储在静态存储区</p>
<p>○生命周期：</p>
<p>■当函数执行完毕时，普通局部变量会被销毁</p>
<p>■静态局部变量的生命周期则是整个程序运行期间，即使函数调用结束，静态局部变量的值也会被保留</p>
<p>○初始值：</p>
<p>■普通局部变量在每次函数调用时都会被初始化，它们的初始值是不确定的，除非显式地进行初始化</p>
<p>■静态局部变量在第一次函数调用时会被初始化，然后保持其值不变，直到程序结束</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">normal_func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;局部变量 i = %d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">static_func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    j++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;static局部变量 j = %d\n&quot;</span>, j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用3次normal_func()</span></span><br><span class="line">    normal_func();</span><br><span class="line">    normal_func();</span><br><span class="line">    normal_func();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用3次static_func()</span></span><br><span class="line">    static_func();</span><br><span class="line">    static_func();</span><br><span class="line">    static_func();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">局部变量 i = <span class="number">1</span></span><br><span class="line">局部变量 i = <span class="number">1</span></span><br><span class="line">局部变量 i = <span class="number">1</span></span><br><span class="line"><span class="keyword">static</span>局部变量 j = <span class="number">1</span></span><br><span class="line"><span class="keyword">static</span>局部变量 j = <span class="number">2</span></span><br><span class="line"><span class="keyword">static</span>局部变量 j = <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>返回堆区地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *tmp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 堆区申请空间</span></span><br><span class="line">    tmp = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    *tmp = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> tmp; <span class="comment">// 返回堆区地址，函数调用完毕，不释放</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    p = func();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*p = %d\n&quot;</span>, *p); <span class="comment">// ok</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 堆区空间，使用完毕，手动释放</span></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>9.1 学生信息管理系统</title>
    <url>/9.1%20%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="91-学生信息管理系统"><a class="markdownIt-Anchor" href="#91-学生信息管理系统"></a> 9.1 学生信息管理系统</h1>
<p>●学员管理系统可以实现对学员的添加、全部显示、查询、修改、删除功能</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/29103019/1686294598946-e689a1df-2fbf-43a7-ba3f-6ef1fe39b7f9.png" alt="image.png" /></p>
<p>●数据存储格式说明</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宏定义的常量，代表学生的最大个数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体类型 struct stu 别名为 STU</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">30</span>];  <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">int</span> age;        <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">char</span> sex[<span class="number">5</span>];    <span class="comment">// 性别</span></span><br><span class="line">&#125;STU;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量定义</span></span><br><span class="line"><span class="comment">// 结构体数组</span></span><br><span class="line">STU s[NUM];  </span><br><span class="line"><span class="comment">// 标志学生的个数，刚好为数组的下标，从0开始</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;   </span><br></pre></td></tr></table></figure>
<p>●示例代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 宏定义的常量，代表学生的最大个数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体类型 struct stu 别名为 STU</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">30</span>];  <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">int</span> age;        <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">char</span> sex[<span class="number">5</span>];    <span class="comment">// 性别</span></span><br><span class="line">&#125;STU;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量定义</span></span><br><span class="line"><span class="comment">// 结构体数组，默认有5个学生</span></span><br><span class="line">STU s[NUM] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;mike&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;yoyo&quot;</span>, <span class="number">19</span>, <span class="string">&quot;女&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;lily&quot;</span>, <span class="number">17</span>, <span class="string">&quot;女&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;rock&quot;</span>, <span class="number">21</span>, <span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;mary&quot;</span>, <span class="number">19</span>, <span class="string">&quot;女&quot;</span>&#125;</span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">// 标志学生的个数，刚好为数组的下标</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">5</span>;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 帮助菜单显示函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">help_menu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;     欢迎使用本学生信息管理系统\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;* ================================ *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;* 1. 添加                          *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;* 2. 显示                          *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;* 3. 查询                          *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;* 4. 修改                          *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;* 5. 删除                          *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;* 6. 退出                          *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;* ================================ *\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示所有学生函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_all_stu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;学生信息如下：\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 遍历每一个结构体数组元素，打印元素的成员</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s    %d    %s\n&quot;</span>, s[i].name, s[i].age, s[i].sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加学生函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_stu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断学生个数有没有超过最大值</span></span><br><span class="line">    <span class="keyword">if</span> (n &gt;= NUM) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;存储空间不够\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 提前终止函数，不能往下操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印请输入第n+1个学生提示信息</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;准备输入第%d个学生的信息\n&quot;</span>, n+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 输入学生信息</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[n].name); <span class="comment">// name为数组名，代表数组首元素地址，无需加&amp;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入年龄：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s[n].age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入性别(男或女)：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[n].sex);  <span class="comment">// sex为数组名，代表数组首元素地址，无需加&amp;</span></span><br><span class="line">    <span class="comment">// 学生个数+1</span></span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询学生所在的下标位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_stu_index</span><span class="params">(<span class="keyword">char</span> *p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过姓名查询某个学生，返回这个学生的下标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 判断姓名是否相等</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(s[i].name, p) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;   <span class="comment">// 返回找到学生的下标</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 程序能执行到，说明没有找到，返回-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印找到学生的信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_one_stu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 输入需要找的学生</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入需要找的学生姓名：&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">30</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">    <span class="comment">// 获取学生下标</span></span><br><span class="line">    <span class="keyword">int</span> i = find_stu_index(name);</span><br><span class="line">    <span class="comment">// 如果不为-1，则打印学生信息</span></span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s 信息如下\n&quot;</span>, name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s    %d    %s\n&quot;</span>, s[i].name, s[i].age, s[i].sex);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没有 %s 相关信息\n&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改某个学生的信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_one_stu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 输入需要找的学生</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入需要修改的学生姓名：&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">30</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">    <span class="comment">// 获取学生下标</span></span><br><span class="line">    <span class="keyword">int</span> i = find_stu_index(name);</span><br><span class="line">    <span class="comment">// 如果不为-1，则修改学生信息</span></span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;学生原来的信息：\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s    %d    %s\n&quot;</span>, s[i].name, s[i].age, s[i].sex);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入新的学生信息：\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 输入学生信息</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i].name); <span class="comment">// name为数组名，代表数组首元素地址，无需加&amp;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入年龄：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s[i].age);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入性别(男或女)：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i].sex);  <span class="comment">// sex为数组名，代表数组首元素地址，无需加&amp;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;信息更新成功，新信息如下：\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s    %d    %s\n&quot;</span>, s[i].name, s[i].age, s[i].sex);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没有 %s 相关信息\n&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除某个学生</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del_one_stu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 输入需要找的学生</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入需要删除的学生姓名：&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">30</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">    <span class="comment">// 获取学生下标</span></span><br><span class="line">    <span class="keyword">int</span> i = find_stu_index(name);</span><br><span class="line">    <span class="comment">// 如果不为-1，则删除</span></span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果删除不是最后一个元素，把最后一个元素的位置替换到删除元素那个位置</span></span><br><span class="line">        <span class="keyword">if</span> (i != n<span class="number">-1</span>) &#123;</span><br><span class="line">            s[i] = s[n<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// n需要-1</span></span><br><span class="line">        n--;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s 删除成功\n&quot;</span>, name);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没有 %s 相关信息\n&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 死循环</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 帮助菜单显示</span></span><br><span class="line">        help_menu();</span><br><span class="line">        <span class="comment">// 输入操作数字</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入指令数字：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> cmd;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cmd);</span><br><span class="line">        <span class="comment">// printf(&quot;cmd = %d\n&quot;, cmd);</span></span><br><span class="line">        <span class="comment">// 选择判断</span></span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;添加学生\n&quot;</span>);</span><br><span class="line">            add_stu();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( cmd == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;显示学生\n&quot;</span>);</span><br><span class="line">            show_all_stu();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( cmd == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;查询学生\n&quot;</span>);</span><br><span class="line">            show_one_stu();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( cmd == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;修改学生\n&quot;</span>);</span><br><span class="line">            modify_one_stu();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( cmd == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;删除学生\n&quot;</span>);</span><br><span class="line">            del_one_stu();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( cmd == <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;退出系统\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;指令数字错误，请重新输入\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>AStyle格式化工具</title>
    <url>/AStyle%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B7%A5%E5%85%B7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="astyle格式化工具"><a class="markdownIt-Anchor" href="#astyle格式化工具"></a> AStyle格式化工具</h1>
<p>AStyle（Artistic Style）是一个开源的代码自动格式化工具，可以用于自动化代码风格的修改。它支持多种编程语言，包括C、C++、C#、Objective-C、Java、Objective-C++、Pike和汇编语言等。AStyle可以在命令行中使用，也可以通过与许多IDE和文本编辑器集成来使用。</p>
<p>使用AStyle可以遵循特定的代码风格规范，并且可以提高代码的可读性和可维护性。AStyle支持多种自定义选项，可以根据需要进行定制。例如，可以调整缩进、括号位置、代码块风格、空格使用等等。</p>
<p>总之，AStyle是一款方便易用的代码自动格式化工具，适用于许多不同的编程语言和开发环境。</p>
<p><a href="https://www.yuque.com/attachments/yuque/0/2023/zip/27903758/1688628753886-27ce56ed-33a9-4b6c-929d-1962f47634c2.zip">astyle-3.4-x64.zip</a></p>
<p>(718 KB)</p>
<p>keil配置</p>
<p>1解压 AStyle 压缩包，放到指定位置。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681019681165-213ccf18-3abf-4573-9ad9-abe5a9854c7c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_16%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="99.png" /></p>
<p>2在Tools目录下选择 Customize Tools Menu</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681019340463-acd53587-f8f1-4893-8d3c-ff120110827b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_27%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="98.png" /></p>
<p>3添加格式化当前文件命令</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681019890896-31e61b4e-438d-46bc-88eb-7a5555a3b1f7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="100.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681019911642-29342971-f0be-453e-b18b-34ea4cc8fcc7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="101.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681019933031-85d1c868-ab48-47a8-bad6-fe8b421465d1.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="102.png" /></p>
<p>在Command中填入 D:\softwares\AStyle\bin\AStyle.exe</p>
<p>在Arguments中填入 !E</p>
<p>4添加格式化所有文件命令</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681019979554-814a0145-9fab-47b7-b786-306588f78e9c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="103.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681019989924-639f8608-ffa1-4c1e-98ba-87b42f530ae8.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="104.png" /></p>
<p>在Command中填入 D:\softwares\AStyle\bin\AStyle.exe</p>
<p>在Arguments中填入 “<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>∗</mo><mi mathvariant="normal">.</mi><mi>c</mi><mi mathvariant="normal">&quot;</mi><mi mathvariant="normal">&quot;</mi></mrow><annotation encoding="application/x-tex">E*.c&quot; &quot;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord mathdefault">c</span><span class="mord">&quot;</span><span class="mord">&quot;</span></span></span></span>E*.h”</p>
<p>每次格式化时，为了安全，AStyle会为文件创建一个备份，.orig结尾的原文件，如 xxx.c.orig 。<br />
如果不需要创建，可以在配置Arguments时，末尾追加个 -n参数。</p>
<p>快捷键配置</p>
<p>Edit-&gt; Configuration… -&gt; Shortcut Keys，配置以下几个快捷键：</p>
<p>●Tools：格式化当前文件 -&gt; Alt + Shift + F</p>
<p>●Edit:Advanced:Comment Selection -&gt; Ctrl + /</p>
<p>●Edit:Advanced:Uncomment Selection -&gt; Ctrl + Shift + /</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1687670748330-e10df175-32ff-4e2b-8455-54836508add4.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_22%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
]]></content>
  </entry>
  <entry>
    <title>C51版本Keil环境搭建</title>
    <url>/C51%E7%89%88%E6%9C%ACKeil%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="c51版本keil环境搭建"><a class="markdownIt-Anchor" href="#c51版本keil环境搭建"></a> C51版本Keil环境搭建</h1>
<p>目标</p>
<p>●了解C51版本Keil开发环境的概念和用途</p>
<p>●掌握C51版本Keil环境的安装和配置方法</p>
<p>●熟悉C51版本Keil开发环境的使用</p>
<p>准备工作</p>
<p>●Windows 操作系统</p>
<p>●Keil C51 安装包（可以从Keil官网下载）</p>
<p>●一款8051单片机开发板</p>
<p>搭建流程</p>
<p>环境搭建的基本流程：</p>
<p>1从官方网站下载并安装Keil软件。</p>
<p>2选择安装的软件中的C51工具集并运行。</p>
<p>3通过从“文件”菜单中选择“项目”来创建新项目。</p>
<p>4输入项目名称并选择您正在使用的设备。</p>
<p>5通过从“项目”菜单中选择“添加文件到组”来添加源文件。</p>
<p>6通过从“项目”菜单中选择“目标选项”来配置项目。</p>
<p>7设置目标选项，例如振荡器频率、内存模型和启动代码。</p>
<p>8通过从“项目”菜单中选择“生成目标”来构建项目。</p>
<p>9使用适当的编程器/调试器将生成的代码下载到目标设备。</p>
<p>10运行程序并在必要时调试。</p>
<p>下载与安装</p>
<p>下载地址是 <a href="https://www.keil.com/download/product/">https://www.keil.com/download/product/</a></p>
<p>选择C51进行下载：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675736328157-ebf18b7d-b92b-47dc-9ed1-6a431b189d67.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_28%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20230207101834.png" /></p>
<p>安装步骤如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675752387128-05d51de5-33e1-4670-8d23-410e0aa9b8fe.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_24%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="01.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675752398382-987f98c0-27f6-431b-89b4-4c46d6f52390.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_24%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="02.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675752410832-9305193c-eeca-4a11-8780-57bc30da6064.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_24%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="03.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675752420934-6d716764-f8f5-4da3-9c5d-05194af58581.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_24%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="04.png" /></p>
<p>安装完成即可</p>
<p>激活</p>
<p>&gt;&gt;&gt; 以管理员身份打开下载好的 keil软件。&lt;&lt;&lt;</p>
<p>重要的事情说三遍：<br />
一定要用管理员身份打开Keil！<br />
一定要用管理员身份打开Keil！<br />
一定要用管理员身份打开Keil！</p>
<p>打开 File 下的 证书管理</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675753110895-b7531064-03d3-4633-883c-d33106360481.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_16%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="05.png" /></p>
<p>查看CID，用于生成证书</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675753146844-c4a87351-0242-4bad-b4ba-7d4ad7f43bb4.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_27%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="06.png" /></p>
<p>将生成的证书输入，点击添加</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675753158110-83fa8533-1b87-4e21-adc2-dd9962bfa7a9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_27%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="07.png" /></p>
<p>添加完成后，激活时效显示如下，说明成功</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675753165574-663b0674-95c6-4496-b0ae-4dbdc9cd6037.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_27%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="08.png" /></p>
<p>STC环境添加</p>
<p>STC-ISP下载</p>
<p>进入stc官网 <a href="http://www.stcmcudata.com/">http://www.stcmcudata.com/</a></p>
<p>CTRL + F搜索关键字 STC-ISP下载</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675753631106-88a267cf-7da5-4503-abbc-584f6673c28e.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_15%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="01.png" /></p>
<p>下载最新版本。</p>
<p>将STC添加到Keil中</p>
<p>1打开stc-isp工具</p>
<p>2按照图例点击按钮</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675754862844-f5e3e2d5-ebb5-4eb7-80be-3c131a485816.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_42%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1476%2Climit_0" alt="02.png" /></p>
<p>3选择keil的安装目录，以实际安装目录为准</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675755127174-b4c65a3e-81ce-4d29-a2b5-621798513710.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_16%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="03.png" /></p>
<p>成功后会弹出提示框</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675755155745-f937f585-2b16-4f4f-a062-202dada95039.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_15%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="04.png" /></p>
<p>校验是否导入STC环境</p>
<p>1打开keil软件，新建一个keil项目，选择合适的目录</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675755554117-66bbb659-d00f-4297-91fd-93115beaa53d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_37%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="05.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675755590774-49f51f03-15fa-4f60-a3ad-884b0d632022.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_36%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="06.png" /></p>
<p>2点击下拉框中，如果出现STC MCU Database，说明环境导入成功</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675755620298-50919175-d652-4ebd-8de4-595aa718cce8.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_27%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="07.png" /></p>
<p>3可通过搜索框搜索到stc相关芯片信息</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675755678580-6f04bea8-57d2-4085-bf42-ffaaab04e6ed.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_27%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="08.png" /></p>
]]></content>
  </entry>
  <entry>
    <title>C语言</title>
    <url>/C%E8%AF%AD%E8%A8%80.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>C语言</strong></p>
<p>C语言的应用极其广泛，从网站后台，到底层操作系统，从多媒体应用到大型网络游戏，均可使用C语言来开发。<br />
●C语言可以写网站后台程序<br />
●C语言可以专门针对某个主题写出功能强大的程序库<br />
●C语言可以写出大型游戏的引擎<br />
●C语言可以写出另一个语言来<br />
●C语言可以写操作系统和驱动程序，几乎都能用C语言编写<br />
●任何设备只要配置了微处理器，几乎都支持C语言</p>
<p>配套单词表：<a href="https://doc.weixin.qq.com/sheet/e3_AHcA_gZbAKcOPyccs4xRsuxOrwI10">https://doc.weixin.qq.com/sheet/e3_AHcA_gZbAKcOPyccs4xRsuxOrwI10</a></p>
<p>\1. C语言前言</p>
<p><a href="https://www.yuque.com/icheima/cprogram/gb5opg8w5ysv63i3">1.1 C语言概述06-27 09:57</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/pt7xkqohhoptsgez">1.2 编程环境06-15 19:21</a></p>
<p>\2. 基础语法</p>
<p><a href="https://www.yuque.com/icheima/cprogram/ilbpv8qtulhvo4bx">2.1 第一个C语言程序：HelloWorld06-15 19:21</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/op1g4v06982agf05">2.2 数据类型06-27 14:19</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/yqwtxhpczsiz5cat">2.3 数值表示06-27 14:21</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/yd9wny0x3reqadw0">2.4 输出和输入06-15 19:21</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/gq9qegcvfn70e5h1">2.5 运算符06-27 16:33</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/px7cnggzh2dp1hk8">2.6 类型转换06-27 16:39</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/px7cnggzh2dp1hk8">https://www.yuque.com/icheima/cprogram/px7cnggzh2dp1hk8</a>)</p>
<p>\3. 控制语句</p>
<p><a href="https://www.yuque.com/icheima/cprogram/ad18dfocrxm7ng9o">3.1 程序执行的三大流程06-15 19:22</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/ygec1agsxg7qv62a">3.2 分支语句06-30 11:20</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/hgvhqz73mq4y302g">3.3 循环语句06-15 19:22</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/gvo08yrqma2xf9fi">3.4 跳转关键字06-27 17:45</a></p>
<p>\4. 函数</p>
<p><a href="https://www.yuque.com/icheima/cprogram/gm859nvrz26p4ea2">4.1 概述06-15 19:22</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/hpurfc9ihrbg7h9c">4.2 函数的使用06-28 21:16</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/el5xb73zcgo176vl">4.3 局部和全局变量06-15 19:22</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/hf4vwxi5qgzgm2og">4.4 多文件编程06-15 19:22</a></p>
<p>\5. 指针</p>
<p><a href="https://www.yuque.com/icheima/cprogram/wocor38rkxbkoyq9">5.1 指针基本语法06-29 17:32</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/wuu03nb0mnqeoe1h">5.2 指针和函数06-15 19:22</a></p>
<p>\5. 指针</p>
<p><a href="https://www.yuque.com/icheima/cprogram/wocor38rkxbkoyq9">5.1 指针基本语法06-29 17:32</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/wuu03nb0mnqeoe1h">5.2 指针和函数06-15 19:22</a></p>
<p>\6. 数组</p>
<p><a href="https://www.yuque.com/icheima/cprogram/btwp26gdppgaowdf">6.1 数组基本语法06-15 19:22</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/rgu83hxfy9gulgpc">6.2 数组案例06-15 19:22</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/hzopmqfsiaenzfbn">6.3 数组和指针06-15 19:22</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/rvkuswmga7evrg1a">6.4 字符数组与字符串06-30 19:52</a></p>
<p>\7. 复合类型(自定义类型)</p>
<p><a href="https://www.yuque.com/icheima/cprogram/uyhmsrzu39b4q50l">7.1 结构体06-15 19:22</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/du9icl4m3oqmehlu">7.2 共用体(联合体)06-15 19:22</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/ogcccxh5qr2qecgx">7.3 枚举06-15 19:22</a></p>
<p>\8. 内存管理</p>
<p><a href="https://www.yuque.com/icheima/cprogram/fsuabicglgk6tl14">8.1 内存分布06-15 19:22</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/rleu5g97dqbosnwo">8.2 堆区内存的使用06-15 19:22</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/uq0go5z3rl9ih88k">8.3 内存分布代码分析06-15 19:22</a></p>
<p>\9. 综合案例</p>
<p><a href="https://www.yuque.com/icheima/cprogram/ugocvg6y81dqa7kq">9.1 学生信息管理系统07-02 10:47</a></p>
<p>\10. 配套练习</p>
<p><a href="https://www.yuque.com/icheima/cprogram/okywuz1pyikggvdg">第01天练习06-15 19:22</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/fr5nfxgopwhirlk5">第02天练习06-15 19:22</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/tge5asvv2bh9sgpq">第03天练习07-01 18:12</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/zc2pn4dtebcta7vs">第04天练习06-15 19:22</a></p>
<p>\11. 代码步骤</p>
<p><a href="https://www.yuque.com/icheima/cprogram/ov4fde06tf8gvxth">第01天06-29 17:22</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/kb3n6652sa6qgx8x">第02天06-28 20:57</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/fq9m5gmzf8ukwvbr">第03天06-29 17:32</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/xx0raagvxdzqo2d8">第04天07-02 10:10</a></p>
<p><a href="https://www.yuque.com/icheima/cprogram/va3dfhdpdfkkn300">第05天07-02 10:41</a></p>
]]></content>
  </entry>
  <entry>
    <title>GPIO的理解</title>
    <url>/GPIO%E7%9A%84%E7%90%86%E8%A7%A3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="gpio的理解"><a class="markdownIt-Anchor" href="#gpio的理解"></a> GPIO的理解</h1>
<p>学习目标</p>
<p>1了解C51的GPIO的模式</p>
<p>2熟悉芯片手册的阅读</p>
<p>3了解如何将手册中的要求变为代码实现</p>
<p>学习内容</p>
<p>理解电灯案例的代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;STC8H.H&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    P5M0 = <span class="number">0x00</span>;</span><br><span class="line">    P5M1 = <span class="number">0x00</span>;</span><br><span class="line">	</span><br><span class="line">    P53 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●#include “STC8H.H” 引入头文件</p>
<p>●P5M0 = 0x00;P5M1 = 0x00;配置引脚模式</p>
<p>●P53=1;配置IO引脚的电平</p>
<p>头文件STC8H.H</p>
<p>针对 STC8H 系列芯片的头文件，如果Keil软件没有配置STC8环境，此处是无法导入的。</p>
<p>STC8H.H文件的存储目录，在Keil安装目录下的 C51\INC\STC文件夹下。内部有其他STC芯片的头文件，如果你用的是其他芯片，则include对应的头文件。</p>
<p>引脚工作模式</p>
<p>1STC8H文档下载。通过STC-ISP软件进行资料下载。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678948347496-24a5dcf2-cf57-4c88-a178-422efb58968c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_38%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1333%2Climit_0" alt="14.png" /></p>
<p>2打开STC8H用户手册。跳转到<code>I/O</code>口</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678948606932-e4f8979a-5384-4354-bee7-fc4917a83b10.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_16%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="15.png" /></p>
<p>其中我们可以通过手册获得一些信息：</p>
<p>○1个端口对应8个引脚</p>
<p>○每个端口都由一个寄存器控制</p>
<p>○系列不同，端口数量不同</p>
<p>○每个引脚可配置4种不同的工作模式</p>
<p>IO口的工作模式：</p>
<table>
<thead>
<tr>
<th>工作模式</th>
<th>PnM1</th>
<th>PnM0</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>准双向口</td>
<td>0</td>
<td>0</td>
<td>弱上拉。灌电流可达20mA，拉电流为270~150uA</td>
</tr>
<tr>
<td>推挽输出</td>
<td>0</td>
<td>1</td>
<td>强上拉输出。可达20mA，要加限流电阻</td>
</tr>
<tr>
<td>高阻输入</td>
<td>1</td>
<td>0</td>
<td>电流既不能流入也不能流出</td>
</tr>
<tr>
<td>开漏输出</td>
<td>1</td>
<td>1</td>
<td>内部上拉电阻断开。开漏模式既可读外部状态也可对外输出(高电平或低电平)。如要正确读外部状态或需要对外输出高电平，需外加上拉电阻，否则读不到外部状态，也对外输不出高电平。</td>
</tr>
</tbody>
</table>
<p>代码中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">P5M0 = <span class="number">0x00</span>;</span><br><span class="line">P5M1 = <span class="number">0x00</span>;</span><br></pre></td></tr></table></figure>
<p>指的是P5端口所有的引脚为准双向口输出，如果想设置为其他模式，可以根据实际需求进行配置。</p>
<p>当前我们电灯是要控制P5端口的3号引脚，也就是P53这个引脚。理论上只需要设置这个引脚的工作模式即可。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">P5M1 &amp;= ~<span class="number">0x08</span>,	P5M0 &amp;= ~<span class="number">0x08</span>; <span class="comment">//准双向口</span></span><br><span class="line">P5M1 &amp;= ~<span class="number">0x08</span>,	P5M0 |=  <span class="number">0x08</span>; <span class="comment">//推挽输出</span></span><br><span class="line">P5M1 |=  <span class="number">0x08</span>,	P5M0 &amp;= ~<span class="number">0x08</span>; <span class="comment">//高阻输入</span></span><br><span class="line">P5M1 |=  <span class="number">0x08</span>,	P5M0 |=  <span class="number">0x08</span>; <span class="comment">//开漏输出</span></span><br></pre></td></tr></table></figure>
<p>●P5表示的是5号端口</p>
<p>●0x08表示的是3号引脚</p>
<p>引脚编号和值的对应关系</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0x01</td>
</tr>
<tr>
<td>1</td>
<td>0x02</td>
</tr>
<tr>
<td>2</td>
<td>0x04</td>
</tr>
<tr>
<td>3</td>
<td>0x08</td>
</tr>
<tr>
<td>4</td>
<td>0x10</td>
</tr>
<tr>
<td>5</td>
<td>0x20</td>
</tr>
<tr>
<td>6</td>
<td>0x40</td>
</tr>
<tr>
<td>7</td>
<td>0x80</td>
</tr>
</tbody>
</table>
<p>如果想配置任意端口的任意引脚的工作模式，可以通过上面的方式类比出来。</p>
<p>软延时操作</p>
<p>软延时指的是通过代码来进行延时睡眠操作。我们可以借助工具来提供软延时的代码。</p>
<p>打开STC-ISP工具，进行如下操作：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678953132965-9204945e-cd7f-4423-a83e-df993f8342c5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="16.png" /></p>
<p>如图所示我们关注几个点：</p>
<p>●系统频率</p>
<p>●睡眠时长</p>
<p>●指令集</p>
<p>指令集主要针对的是芯片型号，选择不同型号，旁边会提示是否包含你所开发的芯片，我们在此使用STC-Y6，因为我吗使用的是STC8H的系列。</p>
<p>睡眠时长，是你希望提供的睡眠时间长度，根据实际情况而定。</p>
<p>系统频率，需要注意的是需要和烧录频率一致，否则会出现时间不匹配问题。</p>
<p>根据以上操作我们可以实现，LED每隔一秒钟闪烁的逻辑。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;STC8H.H&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay1000ms</span><span class="params">()</span>		<span class="comment">//@11.0592MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">	i = <span class="number">57</span>;</span><br><span class="line">	j = <span class="number">27</span>;</span><br><span class="line">	k = <span class="number">112</span>;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span> (--k);</span><br><span class="line">		&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">	&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	P5M1 &amp;= ~<span class="number">0x08</span>,	P5M0 &amp;= ~<span class="number">0x08</span>; <span class="comment">//准双向口</span></span><br><span class="line">	<span class="comment">//P5M1 &amp;= ~0x08,	P5M0 |=  0x08; //推挽输出</span></span><br><span class="line">	<span class="comment">//P5M1 |=  0x08,	P5M0 &amp;= ~0x08; //高阻输入</span></span><br><span class="line">	<span class="comment">//P5M1 |=  0x08,	P5M0 |=  0x08; //开漏输出</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">		P53 = <span class="number">1</span>;<span class="comment">//开</span></span><br><span class="line">		Delay1000ms();</span><br><span class="line">		P53 = <span class="number">0</span>;<span class="comment">//关</span></span><br><span class="line">		Delay1000ms();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果感兴趣，可以为P53引脚设置不同工作模式，来观察效果。</p>
<p>练习题</p>
<p>1实现点灯</p>
<p>2实现闪烁</p>
<p>3尝试不同模式下点灯，得出结论。</p>
]]></content>
  </entry>
  <entry>
    <title>I2C总线</title>
    <url>/I2C%E6%80%BB%E7%BA%BF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="i2c总线"><a class="markdownIt-Anchor" href="#i2c总线"></a> I2C总线</h1>
<p>学习目标</p>
<p>1了解I2C通讯协议</p>
<p>2理解I2C工作原理</p>
<p>3理解I2C原理图的设计</p>
<p>学习内容</p>
<p>基本原理</p>
<p>I2C（Inter-Integrated Circuit）是一种串行通信协议，用于在集成电路之间进行数据交换。它最初由飞利浦公司（Philips）开发，现已成为一种通用的串行通信协议，被广泛应用于各种电子设备和嵌入式系统中。</p>
<p>总线结构</p>
<p>I2C总线包括两根信号线：SDA（串行数据线）和SCL（串行时钟线）。这两根信号线共用一个总线，因此在总线上可以连接多个设备。在I2C总线上，每个设备都有一个唯一的地址，用于标识设备。</p>
<p>SCL线是时钟线，用于控制数据传输的速度和时序；SDA线是数据线，用于传输实际的数据.</p>
<p>设备的地址通常是由设备制造商确定的，并在设备的数据手册中公布。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679811945777-9da28b2d-414f-43af-bc02-77fdf78aaa18.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_46%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="78.png" /></p>
<p>总之我们搞明白几个关键名词就可以：</p>
<p>1Master: 主设备。通常是主控MCU</p>
<p>2Slave：从设备。通常是功能芯片，例如RTC时钟，陀螺仪，温湿度等等。</p>
<p>3SCL：时钟线，控制数据传输的速度和时序。</p>
<p>4SDA：数据线。传输数据的。</p>
<p>5地址：从设备地址。主设备通过地址进行访问。在总线中，每个从设备地址唯一。</p>
<p>上拉电阻</p>
<p>在I2C总线中，上拉电阻的大小通常是由以下几个因素决定的：</p>
<p>1总线长度：总线长度越长，上拉电阻的阻值就应该越小，以保证信号的稳定性。这是因为，总线长度越长，线路上的电容就越大，需要更多的电流来充电和放电，因此上拉电阻的阻值也应该相应地减小。</p>
<p>2总线上的设备数量：总线上连接的设备数量越多，需要更大的电流来充电和放电，以确保信号的稳定性。因此，当总线上连接的设备数量增加时，上拉电阻的阻值也应该相应地减小。</p>
<p>3总线上设备的最高工作频率：I2C总线的时钟频率通常在100kHz到400kHz之间。如果总线上的设备需要使用更高的时钟频率，则上拉电阻的阻值应该相应地减小，以确保设备能够在规定的时间内完成数据的传输。</p>
<p>总的来说，I2C总线中上拉电阻的大小需要根据具体的情况来确定，以保证总线的稳定性和可靠性。一般来说，上拉电阻的阻值应该在1kΩ到10kΩ之间。</p>
<p>信号电平</p>
<p>I2C总线的信号电平是基于器件的供电电压而定的，通常为3.3V或5V。在I2C总线上，SDA和SCL信号线都是开漏模式，因此需要外接上拉电阻，以确保信号电平的不确定性。</p>
<p>速度</p>
<p>I2C总线的速度是由其时钟频率决定的。I2C总线的时钟频率通常在100kHz到400kHz之间，其中100kHz是标准模式（Standard Mode），400kHz是快速模式（Fast Mode）。</p>
<p>●在标准模式下，I2C总线的时钟频率为100kHz，数据传输速率最高可以达到每秒约10kbps。标准模式适用于大多数的应用场景，可以满足许多设备的数据传输需求。</p>
<p>●在快速模式下，I2C总线的时钟频率为400kHz，数据传输速率最高可以达到每秒约40kbps。快速模式适用于一些需要更高速度的应用场景，例如传感器数据采集等。</p>
<p>此外，I2C总线还支持更高速度的高速模式（High Speed Mode）和超高速模式（Ultra-Fast Mode），它们的时钟频率分别为1MHz和5MHz。这些高速模式通常用于一些需要非常高速数据传输的应用场景。</p>
<p>需要注意的是，总线的速度不仅受时钟频率的影响，还受到总线长度、电容负载、上拉电阻大小等因素的影响。因此，在实际应用中，需要根据具体情况来确定总线的速度以确保数据传输的稳定性和可靠性。</p>
<p>STC8H芯片I2C引脚</p>
<p>STC8H内置了一组I2C接口。</p>
<table>
<thead>
<tr>
<th>I2C接口</th>
<th>功能</th>
<th>引脚</th>
</tr>
</thead>
<tbody>
<tr>
<td>I2C1</td>
<td>SCL</td>
<td>P1.4</td>
</tr>
<tr>
<td>SDA</td>
<td>P1.5</td>
<td></td>
</tr>
<tr>
<td>SCL</td>
<td>P2.4</td>
<td></td>
</tr>
<tr>
<td>SDA</td>
<td>P2.5</td>
<td></td>
</tr>
<tr>
<td>SCL</td>
<td>P3.2</td>
<td></td>
</tr>
<tr>
<td>SDA</td>
<td>P3.3</td>
<td></td>
</tr>
</tbody>
</table>
<p>I2C开发流程</p>
<p>总结起来，I2C总线编程开发步骤为以下：</p>
<p>1引脚功能配置</p>
<p>2I2C配置</p>
<p>3总线数据读取或写入</p>
<p>I2C引脚配置为开漏（OD）模式。</p>
<p>基本上所有的芯片平台都是这种流程，具体的代码写法可能有所差异，但是道理相通。</p>
<p>STC8H的I2C配置</p>
<p>以下是STC8H的I2C配置代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">I2C_config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	I2C_InitTypeDef		I2C_InitStructure;</span><br><span class="line">	I2C_InitStructure.I2C_Mode      = I2C_Mode_Master;	<span class="comment">//主从选择   I2C_Mode_Master, I2C_Mode_Slave</span></span><br><span class="line">	I2C_InitStructure.I2C_Enable    = ENABLE;						<span class="comment">//I2C功能使能,   ENABLE, DISABLE</span></span><br><span class="line">	I2C_InitStructure.I2C_MS_WDTA   = DISABLE;					<span class="comment">//主机使能自动发送,  ENABLE, DISABLE</span></span><br><span class="line">	I2C_InitStructure.I2C_MS_Interrupt = DISABLE;				<span class="comment">//使能主机模式中断,  ENABLE, DISABLE</span></span><br><span class="line">	I2C_InitStructure.I2C_Speed     = <span class="number">13</span>;								<span class="comment">//总线速度=Fosc/2/(Speed*2+4),      0~63</span></span><br><span class="line">	I2C_InitStructure.I2C_IoUse     = I2C_P33_P32;			<span class="comment">//IO口切换   I2C_P14_P15, I2C_P24_P25, I2C_P33_P32</span></span><br><span class="line"></span><br><span class="line">	I2C_Init(&amp;I2C_InitStructure);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●I2C_MODE：模式，当前是Master还是Slave。</p>
<p>●I2C_Speed: 速度。100k或者400k，通过总线速度=Fosc/2/(Speed*2+4)公式计算。</p>
<p>STC8H的I2C读取与写入</p>
<p>stc8h提供了库函数，对I2C进行读取和写入。</p>
<p>读取 ReadNbyte</p>
<p>写入 WriteNbyte</p>
<p>由于库函数设计问题，这两个函数设计得不是很合理。因此，我们对两个函数进行扩展。</p>
<p>I2C_WriteNbyte</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">I2C_WriteNbyte</span><span class="params">(u8 addr, u8 reg, u8 *p, u8 number)</span> </span>&#123;</span><br><span class="line">	EAXSFR();		<span class="comment">/* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展SFR(XSFR) */</span></span><br><span class="line">	Start();                                <span class="comment">//发送起始命令</span></span><br><span class="line">	SendData((addr &lt;&lt; <span class="number">1</span>));                         <span class="comment">//发送设备地址+写命令</span></span><br><span class="line">	RecvACK();</span><br><span class="line">	SendData(reg);                         <span class="comment">//发送存储地址</span></span><br><span class="line">	RecvACK();</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		SendData(*p++);</span><br><span class="line">		RecvACK();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(--number);</span><br><span class="line">	Stop();                                 <span class="comment">//发送停止命令</span></span><br><span class="line">	EAXRAM();		<span class="comment">/* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展RAM(XRAM) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>I2C_ReadNbyte</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">I2C_ReadNbyte</span><span class="params">( u8 addr, u8 reg, u8 *p, u8 number)</span> </span>&#123;</span><br><span class="line">	EAXSFR();		<span class="comment">/* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展SFR(XSFR) */</span></span><br><span class="line">	Start();                                <span class="comment">//发送起始命令</span></span><br><span class="line">	SendData((addr &lt;&lt; <span class="number">1</span>));                         <span class="comment">//发送设备地址+写命令</span></span><br><span class="line">	RecvACK();</span><br><span class="line">	SendData(reg);                         <span class="comment">//发送存储地址</span></span><br><span class="line">	RecvACK();</span><br><span class="line">	Start();                                <span class="comment">//发送起始命令</span></span><br><span class="line">	SendData((addr &lt;&lt; <span class="number">1</span>) | <span class="number">0x01</span>);           <span class="comment">//发送设备地址+读命令</span></span><br><span class="line">	RecvACK();</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		*p = RecvData();</span><br><span class="line">		p++;</span><br><span class="line">		<span class="keyword">if</span>(number != <span class="number">1</span>) SendACK();          <span class="comment">//send ACK</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(--number);</span><br><span class="line">	SendNAK();                              <span class="comment">//send no ACK	</span></span><br><span class="line">	Stop();                                 <span class="comment">//发送停止命令</span></span><br><span class="line">	EAXRAM();		<span class="comment">/* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展RAM(XRAM) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>I2C地址问题</p>
<p>开发过程中，经常有address问题。由于翻译问题，和一些程序员编码命名问题，导致我们经常把address概念混淆。</p>
<p>通常我们关心的地址有:</p>
<p>1设备地址：具体说法就是从设备的访问地址。</p>
<p>2设备中要访问的地址：从设备中的寄存器地址。</p>
<p>设备地址</p>
<p>设备地址其实包含了两个地址，一个是读取从设备时的地址，一个是向从设备写入数据时的地址。这两个地址还不一样。这两个地址的来源需要翻看从设备的芯片手册，进行查看。</p>
<p>设备地址是8个位的，最后一位表示读还是写，1表示读，0表示写。(1读0写这个是默认的，但也不排除一些奇葩厂商芯片设计自定义反向操作，一切以实际为准)</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679823291931-040af461-30dd-4b91-84f9-e50112310499.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_39%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="80.png" /></p>
<p>上图中，就是一个I2C的从设备地址，最后一位决定是读还是写。</p>
<p>我们在查询用户手册的过程中，必须确认这个地址，但通常会碰到一些问题：</p>
<p>1只提供一个地址。</p>
<p>通常会明确说是读地址还是写地址，一定要查阅清楚。还有就是只提供了一个地址，没有明确说明通常是前七位组成的地址。</p>
<p>21种类型的从设备多个串联。一种类型的芯片通常地址是相同的，但是要访问具体的从设备需要唯一地址，否则不能正常工作。这个时候需要芯片支持地址扩展。</p>
<p>3多种类型的从设备地址相同。这个就需要从设备可以配置改地址的方式。</p>
<p>从设备寄存器地址</p>
<p>通常我们通过I2C总线要去写入或者读取的就是这些寄存器地址。对于寄存器地址数据含义，需要阅读芯片手册。</p>
<p>I2C通讯流程</p>
<p>对于一些已经提供了库函数的芯片平台，对于如何去使用I2C问题不大，因为有良好的API支持。</p>
<p>但是对于没有支持的，或者是需要清楚的了解过程的，需要去理解这个流程。</p>
<p>I2C通信流程如下：</p>
<p>1主设备发送起始信号（Start）。</p>
<p>2主设备发送从设备地址和读/写位，请求与从设备建立通信。</p>
<p>3从设备返回应答信号（ACK）。</p>
<p>4主设备发送要读/写的数据。</p>
<p>5从设备返回应答信号（ACK）。</p>
<p>6通信结束时，主设备发送停止信号（Stop）。</p>
<p>下面是每个步骤的详细说明：</p>
<p>1起始信号（Start）：主设备通过拉低SDA线而将SDA线从高电平转换成低电平，同时将SCL线拉高。这表示通信开始了。</p>
<p>2从设备地址和读/写位：主设备发送从设备地址和读/写位，告诉从设备要进行读或写操作。I2C总线支持多个从设备，因此地址是从设备的标识符。地址的最低位表示通信模式，0表示写模式，1表示读模式。</p>
<p>3应答信号（ACK）：从设备接收到地址后，会发送应答信号（ACK）表示已经准备好接收或发送数据。如果没有设备响应主设备发送的地址，则通信失败。</p>
<p>4发送数据：主设备向从设备发送要写入的数据。</p>
<p>5应答信号（ACK）：从设备接收到数据后，发送应答信号（ACK）表示已经成功接收数据。如果从设备没有成功接收到数据，将发送非应答信号（NACK）。</p>
<p>6停止信号（Stop）：通信结束后，主设备发送停止信号（Stop），将SDA线从低电平拉到高电平，同时将SCL线拉高。这表示通信结束了。</p>
<p>需要注意的是，在步骤2和步骤4中，如果主设备发送的数据超过了从设备的缓存，从设备将发送非应答信号（NACK）表示数据传输失败。主设备在收到非应答信号（NACK）后将终止通信。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679831622894-0972f077-0cc3-427c-b975-299cfaaeb1ed.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_28%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="81.png" /></p>
]]></content>
  </entry>
  <entry>
    <title>LED呼吸灯(PWM)</title>
    <url>/LED%E5%91%BC%E5%90%B8%E7%81%AF(PWM).html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="led呼吸灯pwm"><a class="markdownIt-Anchor" href="#led呼吸灯pwm"></a> LED呼吸灯(PWM)</h1>
<p>学习目标</p>
<p>1了解PWM基础概念和工作原理</p>
<p>2学习如何在STC8H上配置PWMA</p>
<p>3掌握PWMA的各个配置</p>
<p>4学习如何使用PWMA控制LED亮度</p>
<p>5掌握调试PWM的方法</p>
<p>学习内容</p>
<p>PWM基础概念</p>
<p>PWM全称是脉宽调制（Pulse Width Modulation），是一种通过改变信号的脉冲宽度来控制电路输出的技术。PWM技术在工业自动化、电机控制、LED调光等领域广泛应用。</p>
<p>PWM是一种将数字信号转换为模拟信号的技术，它通过改变信号的占空比来控制输出的电平。在STC8H中，PWM输出的频率和占空比可以由程序控制，因此可以用来控制各种电机、灯光和其他设备的亮度、速度等参数。</p>
<p>STC8H芯片</p>
<p>STC8H 系列的单片机内部集成了8 通道 16 位高级PWM 定时器，分成两周期可不同的 PWM，分别命名为 PWMA 和PWMB ，可分别单独设置。</p>
<p>第一组 PWMA 可配置成4 组互补/对称/死区控制的PWM 或捕捉外部信号。</p>
<p>第二组 PWMB 可配置成4 路PWM 输出或捕捉外部信号。</p>
<p>两组 PWM 的时钟频率可分别独立设置。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1670377764709-be571a2a-e358-486a-934a-6450bee9e4cd.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_31%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="微信截图_20221207094909.png" /></p>
<p>PWM与引脚对应关系如下图：</p>
<table>
<thead>
<tr>
<th>PWM</th>
<th>PWM通道</th>
<th>对应引脚</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td>PWMxP</td>
<td>PWMxN</td>
</tr>
<tr>
<td>PWMA</td>
<td>PWM1P &amp; PWM1N</td>
<td>P1.0</td>
<td>P1.1</td>
</tr>
<tr>
<td>P2.0</td>
<td>P2.1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>PWM2P &amp; PWM2N</td>
<td>P5.4</td>
<td>P1.3</td>
<td></td>
</tr>
<tr>
<td>P2.2</td>
<td>P2.3</td>
<td></td>
<td></td>
</tr>
<tr>
<td>PWM3P &amp; PWM3N</td>
<td>P1.4</td>
<td>P1.5</td>
<td></td>
</tr>
<tr>
<td>P2.4</td>
<td>P2.5</td>
<td></td>
<td></td>
</tr>
<tr>
<td>PWM4P &amp; PWM4N</td>
<td>P1.6</td>
<td>P1.7</td>
<td></td>
</tr>
<tr>
<td>P2.6</td>
<td>P2.7</td>
<td></td>
<td></td>
</tr>
<tr>
<td>P3.4</td>
<td>P3.3</td>
<td></td>
<td></td>
</tr>
<tr>
<td>PWMB</td>
<td>PWM5</td>
<td>P0.0</td>
<td></td>
</tr>
<tr>
<td>P1.7</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>P2.0</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>PWM6</td>
<td>P0.1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>P2.1</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>P5.4</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>PWM7</td>
<td>P0.2</td>
<td></td>
<td></td>
</tr>
<tr>
<td>P2.2</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>P3.3</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>PWM8</td>
<td>P0.3</td>
<td></td>
<td></td>
</tr>
<tr>
<td>P2.3</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>P3.4</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>PWMA应用</p>
<p>控制引脚P2.7实现LED灯1的呼吸效果。</p>
<p>1配置PWM</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LED呼吸灯(PWM)</span><br><span class="line">学习目标</span><br><span class="line">了解PWM基础概念和工作原理</span><br><span class="line">学习如何在STC8H上配置PWMA</span><br><span class="line">掌握PWMA的各个配置</span><br><span class="line">学习如何使用PWMA控制LED亮度</span><br><span class="line">掌握调试PWM的方法</span><br><span class="line">学习内容</span><br><span class="line">PWM基础概念</span><br><span class="line">PWM全称是脉宽调制（Pulse Width Modulation），是一种通过改变信号的脉冲宽度来控制电路输出的技术。PWM技术在工业自动化、电机控制、LED调光等领域广泛应用。</span><br><span class="line">PWM是一种将数字信号转换为模拟信号的技术，它通过改变信号的占空比来控制输出的电平。在STC8H中，PWM输出的频率和占空比可以由程序控制，因此可以用来控制各种电机、灯光和其他设备的亮度、速度等参数。</span><br><span class="line">STC8H芯片</span><br><span class="line">STC8H 系列的单片机内部集成了<span class="number">8</span> 通道 <span class="number">16</span> 位高级PWM 定时器，分成两周期可不同的 PWM，分别命名为 PWMA 和PWMB ，可分别单独设置。</span><br><span class="line">第一组 PWMA 可配置成<span class="number">4</span> 组互补/对称/死区控制的PWM 或捕捉外部信号。</span><br><span class="line">第二组 PWMB 可配置成<span class="number">4</span> 路PWM 输出或捕捉外部信号。</span><br><span class="line">两组 PWM 的时钟频率可分别独立设置。</span><br><span class="line">PWM与引脚对应关系如下图：</span><br><span class="line">PWM</span><br><span class="line">PWM通道</span><br><span class="line">对应引脚</span><br><span class="line">PWMxP</span><br><span class="line">PWMxN</span><br><span class="line">PWMA</span><br><span class="line">PWM1P &amp; PWM1N</span><br><span class="line">P1<span class="number">.0</span></span><br><span class="line">P1<span class="number">.1</span></span><br><span class="line">P2<span class="number">.0</span></span><br><span class="line">P2<span class="number">.1</span></span><br><span class="line">PWM2P &amp; PWM2N</span><br><span class="line">P5<span class="number">.4</span></span><br><span class="line">P1<span class="number">.3</span></span><br><span class="line">P2<span class="number">.2</span></span><br><span class="line">P2<span class="number">.3</span></span><br><span class="line">PWM3P &amp; PWM3N</span><br><span class="line">P1<span class="number">.4</span></span><br><span class="line">P1<span class="number">.5</span></span><br><span class="line">P2<span class="number">.4</span></span><br><span class="line">P2<span class="number">.5</span></span><br><span class="line">PWM4P &amp; PWM4N</span><br><span class="line">P1<span class="number">.6</span></span><br><span class="line">P1<span class="number">.7</span></span><br><span class="line">P2<span class="number">.6</span></span><br><span class="line">P2<span class="number">.7</span></span><br><span class="line">P3<span class="number">.4</span></span><br><span class="line">P3<span class="number">.3</span></span><br><span class="line">PWMB</span><br><span class="line">PWM5</span><br><span class="line">P0<span class="number">.0</span></span><br><span class="line">P1<span class="number">.7</span></span><br><span class="line">P2<span class="number">.0</span></span><br><span class="line">PWM6</span><br><span class="line">P0<span class="number">.1</span></span><br><span class="line">P2<span class="number">.1</span></span><br><span class="line">P5<span class="number">.4</span></span><br><span class="line">PWM7</span><br><span class="line">P0<span class="number">.2</span></span><br><span class="line">P2<span class="number">.2</span></span><br><span class="line">P3<span class="number">.3</span></span><br><span class="line">PWM8</span><br><span class="line">P0<span class="number">.3</span></span><br><span class="line">P2<span class="number">.3</span></span><br><span class="line">P3<span class="number">.4</span></span><br><span class="line">PWMA应用</span><br><span class="line">控制引脚P2<span class="number">.7</span>实现LED灯<span class="number">1</span>的呼吸效果。</span><br><span class="line">配置PWM</span><br><span class="line">动态更新占空比</span><br><span class="line">PWM配置理解</span><br><span class="line">周期</span><br><span class="line">系统主频：<span class="number">1</span>秒钟计数多少次。</span><br><span class="line">代码中的PWM周期(PWM Period)，指的是按N等份切分<span class="number">1</span>秒钟，每个等份的计数值。</span><br><span class="line">例如上图，我们按照<span class="number">8</span>等份切分<span class="number">1</span>秒钟的总计数值MAIN_Fosc（主频），每个PWM周期的计数值为：</span><br><span class="line">PWM_Period = MAIN_Fosc / <span class="number">8</span> = <span class="number">24</span>M / <span class="number">8</span> = <span class="number">3</span>M = <span class="number">3</span> <span class="number">000</span> <span class="number">000</span> 单位为次。</span><br><span class="line">即如果将这个<span class="number">3</span>M作为Period参数，可以得到PWM方波每个周期的时长为：</span><br><span class="line"><span class="number">1</span> / <span class="number">8</span> = <span class="number">0.125</span>s</span><br><span class="line">代码中的配置：</span><br><span class="line">配置的是周期中的计数值。</span><br><span class="line">我们的理解策略：通常我们不关心计数值，关心的是<span class="number">1</span>秒钟执行多少次（即频率Hz），也就是一秒钟多少个周期。</span><br><span class="line">因此在代码MAIN_Fosc / <span class="number">1000</span>中的<span class="number">1000</span>表示的是<span class="number">1</span>秒钟多少个周期（即频率Hz）。</span><br><span class="line">MAIN_Fosc / <span class="number">1000</span>表示的是每个周期的计数值。那为什么要<span class="number">-1</span>呢？因为计数器是从<span class="number">0</span>开始计数的。</span><br><span class="line">占空比</span><br><span class="line">在一个PWM的周期计数中，高电平的计数时长百分比。</span><br><span class="line">模式</span><br><span class="line">冻结: CCMRn_FREEZE</span><br><span class="line">匹配时设置通道 n 的输出为有效电平: CCMRn_MATCH_VALID</span><br><span class="line">匹配时设置通道 n 的输出为无效电平: CCMRn_MATCH_INVALID</span><br><span class="line">翻转: CCMRn_ROLLOVER </span><br><span class="line">强制为无效电平:  CCMRn_FORCE_INVALID</span><br><span class="line">强制为有效电平:  CCMRn_FORCE_VALID</span><br><span class="line">PWM 模式 <span class="number">1</span>: CCMRn_PWM_MODE1</span><br><span class="line">PWM 模式 <span class="number">2</span>: CCMRn_PWM_MODE2 </span><br><span class="line">常用的为PWM 模式 <span class="number">1</span>PWM 模式 <span class="number">2</span></span><br><span class="line">PWM 模式 <span class="number">1</span>和PWM 模式 <span class="number">2</span>是反向的，一个占空比越大越亮，一个是越小越亮。</span><br><span class="line">引脚配置</span><br><span class="line">C</span><br><span class="line">复制代码</span><br><span class="line"><span class="number">1</span></span><br><span class="line">PWMx_InitStructure.PWM_PS_SW    		=	PWM4_SW_P26_P27;<span class="comment">//切换端口</span></span><br><span class="line">配置PWM输出的引脚.</span><br><span class="line">C</span><br><span class="line">复制代码</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">	PWMx_InitStructure.PWM_CC4Enable   = ENABLE;				<span class="comment">//开启PWM4P输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line">	PWMx_InitStructure.PWM_CC4NEnable  = ENABLE;				<span class="comment">//开启PWM4N输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line">配置PWMA的某个通道输出。PWA是具有互补功能的，所以可以配置两个。PWMB则能配置互补。</span><br><span class="line">使能PWM</span><br><span class="line">C</span><br><span class="line">复制代码</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">	PWMx_InitStructure.PWM_MainOutEnable= ENABLE;				<span class="comment">//主输出使能, ENABLE,DISABLE</span></span><br><span class="line">	PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;				<span class="comment">//使能计数器, ENABLE,DISABLE</span></span><br><span class="line">使能配置成功后，pwm才能工作。</span><br><span class="line">如果运行中pwm想停止掉，也可以通过配置使能来停止。</span><br><span class="line">练习题</span><br><span class="line">使用PWMA实现<span class="number">8</span>路呼吸灯</span><br><span class="line">串口控制灯的明暗程度</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2动态更新占空比</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PWMA_Duty.PWM4_Duty = (MAIN_Fosc / <span class="number">1000</span> - <span class="number">1</span>) * <span class="number">10</span> / <span class="number">100</span>; <span class="comment">// 占空比为 10 / 100 = 0.1</span></span><br><span class="line">UpdatePwm(PWMA, &amp;PWMA_Duty);</span><br></pre></td></tr></table></figure>
<p>PWM配置理解</p>
<p>周期</p>
<p>系统主频：1秒钟计数多少次。</p>
<p>代码中的PWM周期(PWM Period)，指的是按N等份切分1秒钟，每个等份的计数值。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679389225162-842d3b09-27f5-474b-a07b-3a4d4310461a.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_68%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="55.png" /></p>
<p>例如上图，我们按照8等份切分1秒钟的总计数值MAIN_Fosc（主频），每个PWM周期的计数值为：</p>
<p>PWM_Period = MAIN_Fosc / 8 = 24M / 8 = 3M = 3 000 000 单位为次。</p>
<p>即如果将这个3M作为Period参数，可以得到PWM方波每个周期的时长为：</p>
<p>1 / 8 = 0.125s</p>
<p>代码中的配置：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PWMx_InitStructure.PWM_Period   		= MAIN_Fosc / <span class="number">1000</span> - <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>配置的是周期中的计数值。</p>
<p>我们的理解策略：通常我们不关心计数值，关心的是1秒钟执行多少次（即频率Hz），也就是一秒钟多少个周期。</p>
<p>因此在代码MAIN_Fosc / 1000中的1000表示的是1秒钟多少个周期（即频率Hz）。</p>
<p>MAIN_Fosc / 1000表示的是每个周期的计数值。那为什么要-1呢？因为计数器是从0开始计数的。</p>
<p>占空比</p>
<p>在一个PWM的周期计数中，高电平的计数时长百分比。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679390018413-da5c37c4-083f-40fd-9132-e93ef62f7e2d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_23%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="56.png" /></p>
<p>模式</p>
<p>●冻结: CCMRn_FREEZE</p>
<p>●匹配时设置通道 n 的输出为有效电平: CCMRn_MATCH_VALID</p>
<p>●匹配时设置通道 n 的输出为无效电平: CCMRn_MATCH_INVALID</p>
<p>●翻转: CCMRn_ROLLOVER</p>
<p>●强制为无效电平:  CCMRn_FORCE_INVALID</p>
<p>●强制为有效电平:  CCMRn_FORCE_VALID</p>
<p>●PWM 模式 1: CCMRn_PWM_MODE1</p>
<p>●PWM 模式 2: CCMRn_PWM_MODE2</p>
<p>常用的为PWM 模式 1PWM 模式 2</p>
<p>PWM 模式 1和PWM 模式 2是反向的，一个占空比越大越亮，一个是越小越亮。</p>
<p>引脚配置</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PWMx_InitStructure.PWM_PS_SW    		=	PWM4_SW_P26_P27;<span class="comment">//切换端口</span></span><br></pre></td></tr></table></figure>
<p>配置PWM输出的引脚.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PWMx_InitStructure.PWM_CC4Enable   = ENABLE;				<span class="comment">//开启PWM4P输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line">PWMx_InitStructure.PWM_CC4NEnable  = ENABLE;				<span class="comment">//开启PWM4N输入捕获/比较输出,  ENABLE,DISABLE</span></span><br></pre></td></tr></table></figure>
<p>配置PWMA的某个通道输出。PWA是具有互补功能的，所以可以配置两个。PWMB则能配置互补。</p>
<p>使能PWM</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PWMx_InitStructure.PWM_MainOutEnable= ENABLE;				<span class="comment">//主输出使能, ENABLE,DISABLE</span></span><br><span class="line">PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;				<span class="comment">//使能计数器, ENABLE,DISABLE</span></span><br></pre></td></tr></table></figure>
<p>使能配置成功后，pwm才能工作。</p>
<p>如果运行中pwm想停止掉，也可以通过配置使能来停止。</p>
<p>练习题</p>
<p>1使用PWMA实现8路呼吸灯</p>
<p>2串口控制灯的明暗程度</p>
]]></content>
  </entry>
  <entry>
    <title>LED灯</title>
    <url>/LED%E7%81%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="led灯"><a class="markdownIt-Anchor" href="#led灯"></a> LED灯</h1>
<p>学习目标</p>
<p>1熟悉原理图设计</p>
<p>2熟悉对应引脚功能</p>
<p>3能够使用IO控制多个LED开关</p>
<p>4能够制作流水灯</p>
<p>学习内容</p>
<p>原理图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681191278278-54e9f9d2-9aa6-4cda-8187-a0719ae3159d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="107.png" /></p>
<p>控制分析</p>
<p>S8550 PNP 特性</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1670375616121-950891db-72ee-44a0-b8e7-8150b03ef2be.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221207091323.png" /></p>
<p>B: base,  基极。（理解：基于/根据 这个条件做什么事情）</p>
<p>E: emitter, 发射极。（理解：发射端）</p>
<p>C: collector, 集电极。（理解：收集电的区域，用电的器件在这个区域）</p>
<p>PNP型三极管，E极为输入端，C极为输出端，B极为控制端</p>
<p>B极 为高电平时，E极到C极的电路截止，无法导通。</p>
<p>B极 为低电平时，E极到C极的电路打开，正常导通。</p>
<p>开关控制</p>
<p>通过引脚 LED_SW来控制 B极是否为高低电平来控制是否导通</p>
<p>LED控制</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1670377563323-98c05996-a657-41db-b531-8b8a4ec483b5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221207094546.png" /></p>
<p>通过LED的负极控制灯是否亮。如果负极为低则亮，负极为高则不亮。</p>
<p>功能设计</p>
<p>点亮LED</p>
<p>点亮灯泡1</p>
<p>几种GPIO模式</p>
<p>1准双向口，也称为弱上拉模式，可做输入和输出操作，电流小，通常作为信号功能使用</p>
<p>2推挽输出，也称为强上拉模式，作为输出操作，电流持续，作为功率输出</p>
<p>3开漏输出，可做输入和输出操作，需要外部提供上拉电阻</p>
<p>4高阻输入，电流无法输入，但是可以外部输入电平会拉高或拉低其位寄存器，用于数模转换</p>
<p>三极管特点</p>
<p>三极管是电流控制的器件，如果需要三极管导通或是关闭，需要持续给B极输入电流。（相对于mos管而言，三极管功耗较大，mos管耗电要少很多）</p>
<p>示例代码</p>
<p>点亮灯泡1代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>	<span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_7;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_PullUp;		<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P2,&amp;GPIO_InitStructure);	<span class="comment">//初始化</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_5;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_OUT_PP;		<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P4,&amp;GPIO_InitStructure);	<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//GPIO 初始化	</span></span><br><span class="line">	GPIO_config();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// led 开关打开</span></span><br><span class="line">	P45 = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">		P27 = <span class="number">1</span>;</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">		P27 = <span class="number">0</span>;</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>走马灯</p>
<p>实现灯的顺序点亮</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED1		P27</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED2		P26</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED3		P15</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED4		P14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED5		P23</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED6		P22</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED7		P21</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED8		P20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_SW	P45</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_5;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_OUT_PP;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P4, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_4 | GPIO_Pin_5;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_PullUp;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P1, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 | GPIO_Pin_7;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_PullUp;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P2, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	GPIO_config();</span><br><span class="line">	</span><br><span class="line">	EA = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	LED_SW = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">8</span>;i++) &#123;</span><br><span class="line">			LED1 = i == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			LED2 = i == <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			LED3 = i == <span class="number">2</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			LED4 = i == <span class="number">3</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			LED5 = i == <span class="number">4</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			LED6 = i == <span class="number">5</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			LED7 = i == <span class="number">6</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			LED8 = i == <span class="number">7</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			delay_ms(<span class="number">100</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">7</span>;i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line">			LED1 = i == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			LED2 = i == <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			LED3 = i == <span class="number">2</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			LED4 = i == <span class="number">3</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			LED5 = i == <span class="number">4</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			LED6 = i == <span class="number">5</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			LED7 = i == <span class="number">6</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			LED8 = i == <span class="number">7</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">			delay_ms(<span class="number">100</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>练习题</p>
<p>1实现单个LED灯的点亮</p>
<p>2实现走马灯</p>
<p>3通过串口控制，实现左转弯流水灯和右转弯流水灯效果</p>
]]></content>
  </entry>
  <entry>
    <title>RTC时钟</title>
    <url>/RTC%E6%97%B6%E9%92%9F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="rtc时钟"><a class="markdownIt-Anchor" href="#rtc时钟"></a> RTC时钟</h1>
<p>学习目标</p>
<p>1理解RTC时钟的基本原理和使用方法。</p>
<p>2学会使用STC8H单片机的RTC时钟模块进行时间的读取和设置。</p>
<p>3掌握使用RTC时钟进行定时和闹钟功能的实现，了解时钟中断的工作原理。</p>
<p>4了解I2C总线的基本原理和特点</p>
<p>5掌握I2C通讯的使用</p>
<p>6掌握中断处理</p>
<p>7熟悉从芯片手册获取有效信息</p>
<p>学习内容</p>
<p>RTC时钟</p>
<p>RTC时钟是一种实时时钟芯片，通常与微控制器或计算机等设备配合使用，提供高精度的时间和日期信息，以便于设备进行时间相关的操作，如记录数据、定时执行任务、闹钟提醒等。</p>
<p>RTC时钟的应用场景非常广泛，例如计算机主板、智能家居、物联网设备、工业自动化等领域。在这些应用中，RTC时钟可以提供高精度的时间戳、定时任务、日历功能等，从而为系统提供更加可靠的时间基准。</p>
<p>除了时间和日期信息，一些RTC时钟芯片还集成了温度传感器、电池备份等功能，以提供更加全面的服务。例如，在断电情况下，RTC时钟的备用电池可以维持时钟的运行，以保证时间和日期信息的准确性。</p>
<p>以下是几种常见的RTC时钟芯片及其特点和应用场景：</p>
<p>1DS1302：DS1302是一款低功耗时钟模块，集成了时钟、日历和时钟报警功能，能够以BCD格式存储时间和日期信息。它具有低功耗、简单易用、成本低等特点，适用于需要长时间运行且功耗要求较低的应用场景。</p>
<p>2DS3231：DS3231是一款高精度的I2C RTC时钟芯片，能够以二进制格式存储时间和日期信息，并具有时钟报警、温度补偿等功能。它具有高精度、低功耗、高可靠性等特点，适用于对时钟精度要求较高的应用场景，如电子钟、精密计时器等。</p>
<p>3PCF8563：PCF8563是一款低功耗的I2C RTC时钟芯片，能够以BCD格式存储时间和日期信息，并具有时钟报警、时钟输出等功能。它具有低功耗、集成度高、工作稳定等特点，适用于需要长时间运行且功耗要求较低的应用场景。</p>
<p>4RV-4162-C7：RV-4162-C7是一款高精度的I2C RTC时钟芯片，能够以二进制格式存储时间和日期信息，并具有时钟输出、时钟同步、时钟校准等功能。它具有高精度、低功耗、抗干扰能力强等特点，适用于对时钟精度要求较高的应用场景，如高精度计时器、高精度工控系统等。</p>
<p>5MCP7940N：MCP7940N是一款低功耗的I2C RTC时钟芯片，能够以BCD格式存储时间和日期信息，并具有时钟输出、时钟同步、时钟报警等功能。它具有低功耗、成本低等特点，适用于需要长时间运行且功耗要求较低的应用场景，如电子钟、自动售货机等。</p>
<p>我们开发板中采用的是PCF8563</p>
<p>原理图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1687663694534-36cd384f-2ca8-49bf-952b-0f2673612dd2.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_25%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679815587725-5510dd78-70ed-4e4f-b16b-f809ec7af44c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_25%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="79.png" /></p>
<p>原理图外围设计：</p>
<p>1外部电池: 确保断电后能正常工作</p>
<p>2晶振：确保震荡频率准确。</p>
<p>3肖特基二极管：防止电流倒灌。</p>
<p>引脚说明：</p>
<p>1INT： 中断引脚。当触发到定时任务时，会触发引脚高低电平变化。</p>
<p>2SCL和SDA：为I2C通讯的两个引脚。用来保证MCU和RTC时钟芯片间进行通讯的。</p>
<p>PCF8563寄存器</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681484430721-82c753f7-2b2a-43c9-bffd-d9379df85b4d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_43%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="118.png" /></p>
<p>控制与状态寄存器</p>
<p>用来配置控制和状态切换的寄存器。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681484737997-3485c5bc-05e4-4bd8-84d3-60b9acd00de0.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_43%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="119.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681484747822-d69f7cea-c0d8-4d24-9175-e328f8d15969.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_43%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="120.png" /></p>
<p>RTC寄存器数据读取</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">I2C_ReadNbyte(RTC_ADDR, <span class="number">0x02</span>, dat, <span class="number">7</span>);</span><br><span class="line">second = (dat[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">0</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x07</span>) * <span class="number">10</span>;</span><br><span class="line">minute = (dat[<span class="number">1</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x07</span>) * <span class="number">10</span>;</span><br><span class="line">hour = (dat[<span class="number">2</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">2</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x03</span>) * <span class="number">10</span>;</span><br><span class="line">day = (dat[<span class="number">3</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">3</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x03</span>) * <span class="number">10</span>;</span><br><span class="line">weekday = dat[<span class="number">4</span>] &amp; <span class="number">0x07</span>;</span><br><span class="line">month = (dat[<span class="number">5</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">5</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x01</span>) * <span class="number">10</span>;</span><br><span class="line">year = ((dat[<span class="number">6</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>) * <span class="number">10</span> + (dat[<span class="number">6</span>] &amp; <span class="number">0x0F</span>);</span><br><span class="line">year += ((dat[<span class="number">5</span>] &gt;&gt; <span class="number">7</span>) &amp; <span class="number">0x01</span>) * <span class="number">100</span> + <span class="number">1900</span>;		</span><br></pre></td></tr></table></figure>
<p>RTC寄存器数据写入</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">year = <span class="number">2023</span>;</span><br><span class="line">month = <span class="number">12</span>;</span><br><span class="line">day = <span class="number">31</span>;</span><br><span class="line">weekday = <span class="number">0</span>;</span><br><span class="line">hour = <span class="number">23</span>;</span><br><span class="line">minute = <span class="number">59</span>;</span><br><span class="line">second = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">if</span>(year &gt;= <span class="number">2000</span>) &#123;</span><br><span class="line">    c = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">tmp[<span class="number">0</span>] = ((second / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (second % <span class="number">10</span>);</span><br><span class="line">tmp[<span class="number">1</span>] = ((minute / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (minute % <span class="number">10</span>);</span><br><span class="line">tmp[<span class="number">2</span>] = ((hour / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (hour % <span class="number">10</span>);</span><br><span class="line">tmp[<span class="number">3</span>] = ((day / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (day % <span class="number">10</span>);</span><br><span class="line">tmp[<span class="number">4</span>] = weekday % <span class="number">7</span>;</span><br><span class="line">tmp[<span class="number">5</span>] = (c &lt;&lt; <span class="number">7</span>) + ((month / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (month % <span class="number">10</span>);</span><br><span class="line">tmp[<span class="number">6</span>] = (u8)(((year % <span class="number">1000</span>) / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (u8)((year % <span class="number">1000</span>) % <span class="number">10</span>);</span><br><span class="line">I2C_WriteNbyte(RTC_ADDR, <span class="number">0x02</span>, tmp, <span class="number">7</span>);	</span><br></pre></td></tr></table></figure>
<p>RTC闹钟设置</p>
<p>通过配置寄存器来配置闹钟</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681517343876-40f0bd02-b796-4f0c-b70a-bdf90d69a78e.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_40%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="122.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681517356218-896416cf-ec55-4ab9-9bf4-d62db3ed1609.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_40%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="123.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681517369649-37a549ae-e9b7-4527-b8f1-01c44854406c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_40%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="124.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681517382506-9ac3e631-de5f-48f7-9abb-193d2d821a29.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_40%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="125.png" /></p>
<p>闹钟事件触发后，通过外部中断触发，操作流程如下</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681562722017-919af022-3cc6-4f60-9b3f-368ada45dfde.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="121.png" /></p>
<p>打开alarm功能</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">u8 config;</span><br><span class="line"><span class="comment">// 先读配置</span></span><br><span class="line">I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 再去设置, 设置的时候别动别人的配置</span></span><br><span class="line">config |= <span class="number">0x02</span>;</span><br><span class="line">config &amp;= ~<span class="number">0x08</span>;<span class="comment">//clear clock标记</span></span><br><span class="line">I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>alarm的中断回调</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ext_int3_call</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	u8 tmp[<span class="number">7</span>];</span><br><span class="line">	u16 year;</span><br><span class="line">	u8 month, day, weekday, hour, minute, second, c = <span class="number">0</span>;</span><br><span class="line">	u8 config[<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;alarm \r\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 读取状态</span></span><br><span class="line">	I2C_ReadNbyte(RTC_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;config: %d\r\n&quot;</span>, (<span class="keyword">int</span>)config[<span class="number">0</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 判断闹钟是否被激活</span></span><br><span class="line">	<span class="keyword">if</span>((config[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x01</span> == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">//清除 alarm 标记</span></span><br><span class="line">		config[<span class="number">0</span>] &amp;= ~<span class="number">0x08</span>;</span><br><span class="line">		I2C_WriteNbyte(RTC_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">		I2C_ReadNbyte(RTC_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;config: %d\r\n&quot;</span>, (<span class="keyword">int</span>)config[<span class="number">0</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>RTC计数器设置</p>
<p>通过配置寄存器来配置计数器。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681560356723-92542690-9130-45e7-a4a7-994c38471d85.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_40%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="127.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681560365972-14783e60-56f0-4848-97ea-4d45e292366c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_39%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="128.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681562733608-db096cad-bab0-42fe-9967-d8de9cf5c676.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="129.png" /></p>
<p>打开timer功能</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">u8 config;</span><br><span class="line"><span class="comment">// 先读配置</span></span><br><span class="line">I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 再去设置, 设置的时候别动别人的配置</span></span><br><span class="line">config |= <span class="number">0x01</span>;</span><br><span class="line">config &amp;= ~<span class="number">0x04</span>;<span class="comment">//clear timer标记</span></span><br><span class="line">I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>timer的中断回调</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">u8 config[<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	</span><br><span class="line">I2C_ReadNbyte(RTC_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;config: %d\r\n&quot;</span>, (<span class="keyword">int</span>)config[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>((config[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x01</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;timer \r\n&quot;</span>);</span><br><span class="line">	config[<span class="number">0</span>] &amp;= ~<span class="number">0x04</span>;</span><br><span class="line">	I2C_WriteNbyte(RTC_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>驱动封装</p>
<p>头文件封装</p>
<p>PCF8563.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __PCF8563_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __PCF8563_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;I2C.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_SCL			P32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_SDA			P33</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_INT			P37</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_ADDR		0x51</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_ADDR_W	0xA2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_ADDR_R	0xA3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_SCL_INIT()	&#123;P3M1 |= 0x04, P3M0 |= 0x04;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_SDA_INIT()	&#123;P3M1 |= 0x08, P3M0 |= 0x08;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_INT_INIT()	&#123;P3M1 &amp;= ~0x80, P3M0 &amp;= ~0x80, INT_CLKO |=  (1 &lt;&lt; 5);&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//u16 year;</span></span><br><span class="line"><span class="comment">//u8 month, day, weekday, hour, minute, second</span></span><br><span class="line"><span class="comment">// 定义clock</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	u16 year;</span><br><span class="line">	u8 month;</span><br><span class="line">	u8 day;</span><br><span class="line">	u8 weekday;</span><br><span class="line">	u8 hour;</span><br><span class="line">	u8 minute;</span><br><span class="line">	u8 second;</span><br><span class="line">&#125; Clock_t;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义alarm</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	u8 hour;</span><br><span class="line">	u8 enableHour;</span><br><span class="line">	u8 minute;</span><br><span class="line">	u8 enableMinute;</span><br><span class="line">	u8 day;</span><br><span class="line">	u8 enableDay;</span><br><span class="line">	u8 weekday;</span><br><span class="line">	u8 enableWeekday;</span><br><span class="line">&#125; Alarm_t;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 国产芯片的HZ1有问题，不要使用，建议使用HZ64</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TimerFreq</span>&#123;</span> HZ4096 = <span class="number">0</span>, HZ64 = <span class="number">1</span>, HZ1 = <span class="number">2</span>, HZ1_60 = <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">PCF8563_on_alarm</span><span class="params">(<span class="keyword">void</span>)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">PCF8563_on_timer</span><span class="params">(<span class="keyword">void</span>)</span></span>; </span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_get_clock</span><span class="params">(Clock_t *c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_set_clock</span><span class="params">(Clock_t c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_enable_alarm</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_set_alarm</span><span class="params">(Alarm_t a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_disable_alarm</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_enable_timer</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_set_timer</span><span class="params">(<span class="keyword">enum</span> TimerFreq freq, u8 period)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_disable_timer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>●定义结构体Clock_t表示时间数据，通过这个结构体承载数据，方便读取和设置。</p>
<p>●定义结构体Alarm_t表示闹钟数据，通过这个结构体承载数据，方便读取和设置。</p>
<p>●定义枚举TimerFreq限定计时器设置的范围。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PCF8563.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	PCF8563_SCL_INIT();</span><br><span class="line">	PCF8563_SDA_INIT();</span><br><span class="line">	PCF8563_INT_INIT();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_get_clock</span><span class="params">(Clock_t *c)</span> </span>&#123;</span><br><span class="line">	u8 dat[<span class="number">7</span>];</span><br><span class="line">	I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x02</span>, dat, <span class="number">7</span>);</span><br><span class="line">	c-&gt;second = (dat[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">0</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x07</span>) * <span class="number">10</span>;</span><br><span class="line">	c-&gt;minute = (dat[<span class="number">1</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x07</span>) * <span class="number">10</span>;</span><br><span class="line">	c-&gt;hour = (dat[<span class="number">2</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">2</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x03</span>) * <span class="number">10</span>;</span><br><span class="line">	c-&gt;day = (dat[<span class="number">3</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">3</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x03</span>) * <span class="number">10</span>;</span><br><span class="line">	c-&gt;weekday = dat[<span class="number">4</span>] &amp; <span class="number">0x07</span>;</span><br><span class="line">	c-&gt;month = (dat[<span class="number">5</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">5</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x01</span>) * <span class="number">10</span>;</span><br><span class="line">	c-&gt;year = ((dat[<span class="number">6</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>) * <span class="number">10</span> + (dat[<span class="number">6</span>] &amp; <span class="number">0x0F</span>);</span><br><span class="line">	c-&gt;year += ((dat[<span class="number">5</span>] &gt;&gt; <span class="number">7</span>) &amp; <span class="number">0x01</span>) * <span class="number">100</span> + <span class="number">1900</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_set_clock</span><span class="params">(Clock_t clk)</span> </span>&#123;</span><br><span class="line">	u8 tmp[<span class="number">7</span>];</span><br><span class="line">	u8 c = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(clk.year &gt;= <span class="number">2000</span>) &#123;</span><br><span class="line">		c = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	tmp[<span class="number">0</span>] = ((clk.second / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (clk.second % <span class="number">10</span>);</span><br><span class="line">	tmp[<span class="number">1</span>] = ((clk.minute / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (clk.minute % <span class="number">10</span>);</span><br><span class="line">	tmp[<span class="number">2</span>] = ((clk.hour / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (clk.hour % <span class="number">10</span>);</span><br><span class="line">	tmp[<span class="number">3</span>] = ((clk.day / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (clk.day % <span class="number">10</span>);</span><br><span class="line">	tmp[<span class="number">4</span>] = clk.weekday % <span class="number">7</span>;</span><br><span class="line">	tmp[<span class="number">5</span>] = (c &lt;&lt; <span class="number">7</span>) + ((clk.month / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (clk.month % <span class="number">10</span>);</span><br><span class="line">	tmp[<span class="number">6</span>] = (u8)(((clk.year % <span class="number">1000</span>) / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (u8)((clk.year % <span class="number">1000</span>) % <span class="number">10</span>);</span><br><span class="line">	I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x02</span>, tmp, <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_enable_alarm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	u8 config;</span><br><span class="line">	<span class="comment">// 先读配置</span></span><br><span class="line">	I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line">	<span class="comment">// 再去设置, 设置的时候别动别人的配置</span></span><br><span class="line">	config |= <span class="number">0x02</span>;</span><br><span class="line">	config &amp;= ~<span class="number">0x08</span>;<span class="comment">//clear clock标记</span></span><br><span class="line">	I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_set_alarm</span><span class="params">(Alarm_t a)</span> </span>&#123;</span><br><span class="line">	u8 tmp[<span class="number">4</span>];</span><br><span class="line">	tmp[<span class="number">0</span>] = ((a.minute / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (a.minute % <span class="number">10</span>);</span><br><span class="line">	<span class="keyword">if</span>(a.enableMinute == <span class="number">0</span>) &#123;</span><br><span class="line">		tmp[<span class="number">0</span>] += (<span class="number">1</span> &lt;&lt; <span class="number">7</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	tmp[<span class="number">1</span>] = ((a.hour / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (a.hour % <span class="number">10</span>);</span><br><span class="line">	<span class="keyword">if</span>(a.enableHour == <span class="number">0</span>) &#123;</span><br><span class="line">		tmp[<span class="number">1</span>] += (<span class="number">1</span> &lt;&lt; <span class="number">7</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	tmp[<span class="number">2</span>] = ((a.day / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (a.day % <span class="number">10</span>);</span><br><span class="line">	<span class="keyword">if</span>(a.enableDay == <span class="number">0</span>) &#123;</span><br><span class="line">		tmp[<span class="number">2</span>] += (<span class="number">1</span> &lt;&lt; <span class="number">7</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	tmp[<span class="number">3</span>] = a.weekday % <span class="number">7</span>;</span><br><span class="line">	<span class="keyword">if</span>(a.enableWeekday == <span class="number">0</span>) &#123;</span><br><span class="line">		tmp[<span class="number">3</span>] += (<span class="number">1</span> &lt;&lt; <span class="number">7</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x09</span>, tmp, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_disable_alarm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	u8 config[<span class="number">1</span>];</span><br><span class="line">	<span class="comment">// 先读配置</span></span><br><span class="line">	I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line">	<span class="comment">// 再去设置, 设置的时候别动别人的配置</span></span><br><span class="line">	config[<span class="number">0</span>] &amp;= ~<span class="number">0x02</span>;</span><br><span class="line">	config[<span class="number">0</span>] &amp;= ~<span class="number">0x08</span>;<span class="comment">//clear clock标记</span></span><br><span class="line">	I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_enable_timer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	u8 config;</span><br><span class="line">	<span class="comment">// 先读配置</span></span><br><span class="line">	I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line">	<span class="comment">// 再去设置, 设置的时候别动别人的配置</span></span><br><span class="line">	config |= <span class="number">0x01</span>;</span><br><span class="line">	config &amp;= ~<span class="number">0x04</span>;<span class="comment">//clear timer标记</span></span><br><span class="line">	I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_set_timer</span><span class="params">(<span class="keyword">enum</span> TimerFreq freq, u8 period)</span> </span>&#123;</span><br><span class="line">	u8 config;</span><br><span class="line">	config = freq + (<span class="number">1</span> &lt;&lt; <span class="number">7</span>);<span class="comment">//计数频率 + timer enable</span></span><br><span class="line">	I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x0E</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	config = period; <span class="comment">// config, period</span></span><br><span class="line">	I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x0F</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_disable_timer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	u8 config[<span class="number">1</span>];</span><br><span class="line">	<span class="comment">// 先读配置</span></span><br><span class="line">	I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line">	<span class="comment">// 再去设置, 设置的时候别动别人的配置</span></span><br><span class="line">	config[<span class="number">0</span>] &amp;= ~<span class="number">0x01</span>;</span><br><span class="line">	config[<span class="number">0</span>] &amp;= ~<span class="number">0x04</span>;<span class="comment">//clear timer标记</span></span><br><span class="line">	I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ext_INT3</span> <span class="params">(<span class="keyword">void</span>)</span> interrupt INT3_VECTOR</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u8 config[<span class="number">1</span>];</span><br><span class="line">	<span class="comment">// 先读配置</span></span><br><span class="line">	I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// 判断闹钟是否被激活 Alarm Flag &amp;&amp; AIE</span></span><br><span class="line">	<span class="keyword">if</span>((config[<span class="number">0</span>] &amp; <span class="number">0x08</span>) &amp;&amp; (config[<span class="number">0</span>] &amp; <span class="number">0x02</span>)) &#123;</span><br><span class="line">		<span class="comment">//清除 alarm 标记</span></span><br><span class="line">		config[<span class="number">0</span>] &amp;= ~<span class="number">0x08</span>;</span><br><span class="line">		I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">		PCF8563_on_alarm();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 判断计时器是否被激活 Timer Flag &amp;&amp; TIE</span></span><br><span class="line">	<span class="keyword">if</span>((config[<span class="number">0</span>] &amp; <span class="number">0x04</span>) &amp;&amp; (config[<span class="number">0</span>] &amp; <span class="number">0x01</span>)) &#123;</span><br><span class="line">		<span class="comment">//清除 timer 标记</span></span><br><span class="line">		config[<span class="number">0</span>] &amp;= ~<span class="number">0x04</span>;</span><br><span class="line">		I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">		PCF8563_on_timer();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>●Ext_INT3中断函数为当前STC8H平台可用的。如果切换平台需要进行对应的移植操作。</p>
<p>BCD（Binary-Coded Decimal）</p>
<p>BCD（Binary-Coded Decimal）是一种用二进制编码表示十进制数字的格式。</p>
<p>在BCD格式中，每个十进制数位用4个二进制位来表示。BCD的目的是使得数字的编码与显示更加直观和容易处理。在BCD格式中，每个十进制数位的取值范围是0到9。</p>
<p>例如，数字5用BCD表示为0101，数字9用BCD表示为1001。这种表示方法使得每个十进制数位都独立地编码，方便在数字处理和显示设备上进行操作。</p>
<p>10进制数转BCD数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 十位取出左移4位 + 个位 (得到BCD数)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITE_BCD(val) 	((val / 10) &lt;&lt; 4) + (val % 10)</span></span><br></pre></td></tr></table></figure>
<p>BCD数转10进制数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将高4位乘以10 + 低四位 (得到10进制数)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ_BCD(val) 	(val &gt;&gt; 4) * 10 + (val &amp; 0x0F) </span></span><br></pre></td></tr></table></figure>
<p>一些状态分析</p>
<p>PCF8563的规则：</p>
<p>1通电后，就开始工作，内部可配置寄存器(时间，闹钟，定时器)</p>
<p>2如果已经有电池，但是单片机断电了，单片机重新通电后，单片机应该遵守PCF8563中已经配置的规则(时间，闹钟，定时器)</p>
<p>程序设计</p>
<p>通过串口发送指令来设置PCF8653的功能</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>指令描述</th>
<th>功能描述</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>开关指令</td>
<td>指令</td>
<td>类型</td>
<td>动作</td>
<td>无效字符</td>
<td>打开alarm规则</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x010x010x010x000x000x000x000x000x000x00</td>
<td>打开alarm示例</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>指令</td>
<td>类型</td>
<td>动作</td>
<td>无效字符</td>
<td>关闭alarm规则</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x010x010x000x000x000x000x000x000x000x00</td>
<td>关闭alarm示例</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>指令</td>
<td>类型</td>
<td>动作</td>
<td>无效字符</td>
<td>打开timer规则</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x010x020x010x000x000x000x000x000x000x00</td>
<td>打开timer示例</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>指令</td>
<td>类型</td>
<td>动作</td>
<td>无效字符</td>
<td>关闭timer规则</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x010x020x000x000x000x000x000x000x000x00</td>
<td>关闭timer示例</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>设置指令</td>
<td>指令</td>
<td>类型</td>
<td>year</td>
<td>M</td>
<td>d</td>
<td>w</td>
<td>h</td>
<td>m</td>
<td>s</td>
<td>设置clock规则</td>
</tr>
<tr>
<td>0x020x000x070xE70x040x140x040x170x3b0x37</td>
<td>设置clock示例</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>2023-04-20 4 23:59:55</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x020x000x070xE70x040x150x050x170x3b0x37</td>
<td>设置clock示例</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>2023-04-21 5 23:59:55</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>指令</td>
<td>类型</td>
<td>d</td>
<td>w</td>
<td>h</td>
<td>m</td>
<td>ed</td>
<td>ew</td>
<td>eh</td>
<td>em</td>
<td>设置Alarm规则</td>
</tr>
<tr>
<td>0x020x010x150x050x000x000x000x000x010x01</td>
<td>设置Alarm示例</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>21 5 0:0   0|0|1|1</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x020x010x150x050x000x000x000x000x010x01</td>
<td>设置Alarm示例</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>21 5 0:0   0|0|1|1</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>指令</td>
<td>类型</td>
<td>src</td>
<td>cnt</td>
<td>无效字符</td>
<td>设置Timer规则</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x020x020x020x010x000x000x000x000x000x00</td>
<td>设置Timer示例</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>2 1</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>测试策略</p>
<p>1测试时钟设置</p>
<p>●向串口发送设置时间的数据</p>
<p>2023-04-20 4 23:59:55</p>
<figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">0x02 0x00 0x07 0xE7 0x04 0x14 0x04 0x17 0x3b 0x37</span><br></pre></td></tr></table></figure>
<p>2023-04-21 5 23:59:55</p>
<figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">0x02 0x00 0x07 0xE7 0x04 0x15 0x05 0x17 0x3b 0x37</span><br></pre></td></tr></table></figure>
<p>2单独测试Alarm</p>
<p>●向串口发送设置Alarm的指令</p>
<p>21 5 0:0 0|0|1|1</p>
<figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">0x02 0x01 0x15 0x05 0x00 0x00 0x00 0x00 0x01 0x01</span><br></pre></td></tr></table></figure>
<p>○day: 21</p>
<p>○weekday: 5</p>
<p>○hour: 0</p>
<p>○minute: 0</p>
<p>○enable day: 0</p>
<p>○enable weekday: 0</p>
<p>○enable hour: 1</p>
<p>○enable minute: 1</p>
<p>●向串口发送打开Alarm的指令</p>
<p>打开Alarm</p>
<figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">0x01 0x01 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00</span><br></pre></td></tr></table></figure>
<p>●向串口发送设置时间指令，参考前面时间设置，将时间设置到alarm的前几秒，方便测试。</p>
<p>●等待Alarm时间到来，观察日志打印，如果触发alarm会有日志显示，说明触发成功。</p>
<p>●向串口发送关闭Alarm的指令</p>
<p>关闭Alarm</p>
<figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">0x01 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00</span><br></pre></td></tr></table></figure>
<p>●向串口发送设置时间指令，参考前面时间设置，将时间设置到alarm的前几秒，方便测试。</p>
<p>●等待Alarm时间到来，观察日志打印，如果到了alarm时间，不打印日志，说明关闭成功。</p>
<p>3单独测试Timer</p>
<p>●向串口发送设置Timer的指令</p>
<p>2 1</p>
<figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">0x02 0x02 0x02 0x01 0x00 0x00 0x00 0x00 0x00 0x00</span><br></pre></td></tr></table></figure>
<p>○2: hz位0x02，也就是 1 HZ，参考文档。</p>
<p>○1： 计数为1次，即countdown</p>
<p>●向串口发送打开Timer的指令</p>
<p>打开timer</p>
<figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">0x01 0x02 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00</span><br></pre></td></tr></table></figure>
<p>●观察日志打印，如果按照1秒间隔打印日志，则说明打开timer成功</p>
<p>●向串口发送关闭Timer指令</p>
<p>关闭timer</p>
<figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">0x01 0x02 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00</span><br></pre></td></tr></table></figure>
<p>●观察日志打印，如果不再打印日志，则说明关闭timer成功</p>
<p>4Alarm和Timer的联调1</p>
<p>●同时打开Alarm和Timer，指令参考前面</p>
<p>●观察日志打印，如果有Alarm日志打印，同时也有Timer日志，说明成功</p>
<p>5Alarm和Timer的联调2</p>
<p>●同时关闭Alarm和Timer，指令参考前面</p>
<p>●观察日志打印，如果没有Alarm日志打印，同时也没有Timer日志，说明成功</p>
<p>6Alarm和Timer的联调3</p>
<p>●同时打开Alarm和Timer，指令参考前面</p>
<p>●关闭Alarm，指令参考前面</p>
<p>●观察日志，如果只有timer日志，说明成功</p>
<p>7Alarm和Timer的联调4</p>
<p>●同时打开Alarm和Timer，指令参考前面</p>
<p>●关闭Timer， 指令参考前面</p>
<p>●观察日志，如果只有Alarm日志，说明成功</p>
<p>有源晶振和无源晶振</p>
<p>晶振可分为有源晶振与无源晶振。一般我们说的“晶振”指的是有源晶振，而无源晶振通常叫“晶体”，或者叫“谐振器”。两者最大的区别是：</p>
<p>●有源晶振自身即可起振</p>
<p>●无源晶振则需要外加专门的时钟电路才能起振</p>
<p>总体来看，有源晶振的精度、稳定度等方面均要好于无源晶振，尤其是在精密测量领域，大部分用的都是高档的有源晶振，以方便把各种补偿技术集成在一起，减少设计复杂性。</p>
<table>
<thead>
<tr>
<th></th>
<th>无源晶振</th>
<th>有源晶振</th>
</tr>
</thead>
<tbody>
<tr>
<td>别名</td>
<td>晶体/谐振器</td>
<td>振荡器</td>
</tr>
<tr>
<td>引脚数量</td>
<td>2个</td>
<td>4个</td>
</tr>
<tr>
<td></td>
<td>借助时钟电路产生震荡信号</td>
<td>自身可产生振荡信号</td>
</tr>
<tr>
<td>特性</td>
<td>精度较低、信号质量较差、稳定性较差</td>
<td>精度高、信号质量较好、稳定性较强</td>
</tr>
<tr>
<td>价格</td>
<td>较低</td>
<td>较高</td>
</tr>
</tbody>
</table>
<p>练习题</p>
<p>1设置时间，并在数码管显示。</p>
<p>2设置闹钟，到闹钟时间，则播放音乐或者震动。</p>
<p>3制作码表，通过独立按键控制开始或停止，通过数码管显示码表读数。</p>
]]></content>
  </entry>
  <entry>
    <title>STC8H核心板</title>
    <url>/STC8H%E6%A0%B8%E5%BF%83%E6%9D%BF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="stc8h核心板"><a class="markdownIt-Anchor" href="#stc8h核心板"></a> STC8H核心板</h1>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675757917925-3c92433d-6c8d-4e4b-80b1-87c3f3fd6163.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_40%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="3D_PCB3_2023-02-07.png" /></p>
<p>为黑马程序员自主设计的最小开发板，包含了最小系统，以及部分外设，所有引脚都已经引出，方便后续扩展使用。</p>
<p>采用的是STC8H8K64U芯片</p>
<p><a href="https://www.yuque.com/office/yuque/0/2023/pdf/27903758/1681119456482-9344d684-99fd-438d-8b05-f9c080352419.pdf?from=https%3A%2F%2Fwww.yuque.com%2Ficheima%2Fstc8h%2Fhsfp6pgneomsg96i">stc8h.pdf</a></p>
<p>(21.4 MB)</p>
<p>功能支持</p>
<p>●串口烧录</p>
<p>●HID烧录</p>
<p>●基准电压</p>
<p>●按键操作</p>
<p>●LED指示</p>
<p>●可编程LED灯</p>
<p>●外部存储拓展</p>
<p>●全部引脚扩展</p>
<p>原理图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/svg/21441195/1675757827153-e7b0983b-80b0-4d99-b1f1-6bb225d30e37.svg" alt="SCH_Schematic3_0-P1_2023-02-07.svg" /></p>
<p>STC系列产品</p>
<p><a href="https://stcmcu.com/">STC官方网站</a></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://www.stcaimcu.com/favicon.ico" alt="img" /></p>
<p><a href="https://www.stcaimcu.com/">国芯论坛 - STC全球32位8051爱好者互助交流社区</a></p>
<p>STC8系列</p>
<p>●STC8A: 字母“A”代表 ADC，是 STC 12 位 ADC 的起航产品</p>
<p>●STC8F: 无ADC、PWM 和PCA 功能，现 STC8F 的改版芯片与原始的 STC8F 管脚完全兼容，但对STC8F内部设计进行了优化和更新，用户需要修改程序，所以命名为 STC8C</p>
<p>●STC8C: 字母“C”代表改版，是 STC8F 的改版芯片</p>
<p>●STC8G: 字母“G”最初是芯片生产时打错字了，后来将错就错，定义 G 系列为“GOOD”系列，STC8G 系列简单易学</p>
<p>●STC8H: 字母“H”取自“高”的英文单词“High”的首字母，“高”表示“16 位高级 PWM”</p>
<p>目前主流的位STC8H，其他都属于过去系列</p>
<p>STC32系列</p>
<p>●STC32G: 32位8051单片机，2022年推出。</p>
<p>为新产品，32位，更高效。由于推出时间不久，通常对于应用到产品中会保留观望态度。但是，很快就会普及。对于开发而言，和STC8系列很多是类似的，会STC8，上手STC32是很简单的。</p>
<p>STC8H8K64U</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1680915254023-49d49536-00eb-4faa-946c-23af51ba31d5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_65%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_755%2Climit_0" alt="95.png" /></p>
<p>内核：</p>
<p>●超高速 8051 内核 (1T)，比传统 8051 约快 12 倍以上</p>
<p>●指令代码完全兼容传统 8051</p>
<p>●22 个中断源，4 级中断优先级</p>
<p>●支持在线仿真</p>
<p>工作电压：</p>
<p>●1.9V~5.5V</p>
<p>工作温度：</p>
<p>●-40C~85C (芯片为-40C~125C制程，超温度范围应用请参考电气特性章节说明)</p>
<p>Flash存储器:</p>
<p>●最大 64K 字节 FLASH 程序存储器 (ROM) ，用于存储用户代码</p>
<p>●支持用户配置 EEPROM 大小，512 字节单页擦除，擦写次数可达 10 万次以上</p>
<p>●支持在系统编程方式 (ISP) 更新用户应用程序，无需专用编程器</p>
<p>●支持单芯片仿真，无需专用仿真器，理论断点个数无限制</p>
<p>SRAM：</p>
<p>●128 字节内部直接访问 RAM (DATA，C 语言程序中使用 data 关键字进行声明)</p>
<p>●128 字节内部间接访问 RAM (IDATA，C 语言程序中使用 idata 关键字进行声明)</p>
<p>●8192 字节内部扩展 RAM(内部 XDATA，C 语言程序中使用 xdata 关键字进行声明)</p>
<p>●1280 字节 USB 数据 RAM</p>
<p>时钟控制：</p>
<p>●内部高精度IRC (4MHZ45MH，ISP 编程时选择或手动输入，还可以用户软件分频到较低的频率工作如 100KHz)</p>
<p>○误差士0.3% (常温下 25C )中</p>
<p>○-1.35%<sub>+1.30%温漂(全温度范围，-40C</sub>85C)</p>
<p>○-0.76%<sub>+0.98%温漂(温度范围，-20C</sub>65°C)</p>
<p>●内部 32KHz 低速 IRC (误差较大)</p>
<p>●外部晶振(4MHz~45MHZ) 和外部时钟</p>
<p>用户可自由选择上面的 3 种时钟源</p>
<p>复位:</p>
<p>●硬件复位</p>
<p>○上电复位，实测电压值为 1.69V~1.82V。 (在芯片未使能低压复位功能时有效)9上电复位电压由一个上限电压和一个下限电压组成的电压范围，当工作电压从 5V/3.3V 向下掉到上电复位的下限门槛电压时，芯片处于复位状态，当电压从 OV 上升到上电复位的上限门电压时芯片解除复位状态。</p>
<p>○复位脚复位，出厂时 P5.4 默认为 IO 口，ISP 下载时可将 P5.4管脚设置为复位脚(注意: 当设置 P5.4安管脚为复位脚时，复位电平为低由平)</p>
<p>○看门狗溢出复位</p>
<p>○低压检测复位，提供 4 级低压检测电压: 1.9V、2.3V、2.8V、3.7V。每级低乐检测电压都是由一个上限电乐和一个下限电乐组成的电压范用，当工作电压从 5V/3.3V 向下掉到低压检测的下限门槛电压时，低压检测生效，当电压从 0V 上升到低压检测的上限门槛电压时，低压检测生效。</p>
<p>●软件复位</p>
<p>○软件方式写复位触发寄存器</p>
<p>中断：</p>
<p>●提供 22 个中断源: INTO (支持上升沿和下降沿中断)、INT1 (支持上升沿和下降沿中断)、INT2(只支持下降沿中断)、INT3(只支持下降沿中断) 、INT4(只支持下降沿中断) 、定时器 0、定时器 1、定时器2、定时器3、定时器4、串口1、串口2、串口3、串口4、ADC 模数转换、LVD 低压检测、SPI、T2C比较器、PWMA、PWMB、USB</p>
<p>●提供 4 级中断优先级</p>
<p>●时钟停振模式下可以唤醒的中断:INTO(P3.2)、INT1(P3.3)、INT2P3.)、INT3(P3.7)、INT4(P3.0)、TO(P3.4)、T1(P3.5)、T2(P1.2)、T3(P0.4)、 T4(P0.6)、RXD(P3.0/P3.6/P1.6/P4.3)、RXD2(P1.0/P4.6)、RXD3(P0.0/P5.0)、RXD4(P0.2/P5.2)、I2C SDA(P1.4/P2.4/P3.3)以及比较器中断、低压检测中断、掉电唤醒定时器唤醒。</p>
<p>数字外设：</p>
<p>●5个16 位定时器: 定时器0、定时器 1、定时器 2、定时器 3、定时器 4，其中定时器 0的模式3 具有NMI(不可屏蔽中断) 功能，定时器 0 和定时器 1 的模式 0为 16 位自动重载模式4 人高速串口:串口1、串口2、串门3、串口4，波特率时钟源最快可为FOSC/48路/2 组高级 PWM，可实现带死区的控制信号，并支持外部异常检测功能，另外还支持 16 位定时器、8个外部中断、8 路外部捕获测量脉宽等功能</p>
<p>●SPI: 支持主机模式和从机模式以及主机/从机自动切换I2C:支持主机模式和从机模式</p>
<p>●MDU16: 硬件 16 位乘除法器 (支持 32 位除以 16 位、16 位除以 16 位、16 位乘 16位、数据移位以及数据规格化等运算)</p>
<p>●USB: USB2.0/USB1.1 兼容全速 USB，6 个双向端点，支持 4 种端点传输模式(控制传输、中断传输、批量传输和同步传输) ，每个端点拥有 64 字节的缓冲区</p>
<p>●I/0 口中断:所有的 I/0 均支持中断，每组 I/0 中断有独立的中断入口地址，所有的I/0 中断可支持 4种中断模式:高电平中断、低电平中断、上升沿中断、下降沿中断。提供 4 级中断优先级并支持掉电唤醒功能。(注: A 版芯片无此功能)</p>
<p>●DMA :支持 Memory-To-Memory 、 SPI 、 UART1TX/UARTIRX 、 UART2TX/UART2RXUART3TX/UART3RX、UART4TX/UART4RX、ADC (自动计算多次 ADC 结果的平均值)</p>
<p>模拟外设：</p>
<p>●超高速 ADC，支持 12 位高精度 15 通道(通道0通道 14)的模数转换，速度最快能达到 800K (每秒进行 80 万次 ADC 转换)</p>
<p>●ADC 的通道 15 用于测试内部 1.19V 参考信号源(芯片在出厂时，内部参考信号源已调整为 1.19V)</p>
<p>●比较器，一组比较器(A 版芯片: 比较器的正端可选择 CMP+和所有的 ADC 输入端口，比较器的负端可选择 CMP和内部 1.19V 的参考源: B 版芯片:比较器的正端可选择 CMP+、CMP+ 2、CMP+ 3 和所有的ADC 输入端口，比较器的负端可选择 CMP-端口和内部 1.19V 的参考源。所以比较器可当作多路比较器进行分时复用)</p>
<p>●DAC: 8 路高级 PWM 定时器可当8路DAC 使用</p>
<p>GPIO:</p>
<p>●最多可达 60 个 GPIO: P0.0P07、P1.0 P1,7 (无P1.2) 、P2.0 P2,7、P3.0 P3,7、P4.0 P47、P5.0P5.4.</p>
<p>●P6.0<sub>P6.7、P7.0</sub>P7.7所有的 GPIO 均支持如下 4 种模式: 准双向口模式、强推挽输出模式、开漏输出模式、高阻输入模式</p>
<p>●除 P3.0 和 P3.1 外，其余所有 IO 口上电后的状态均为高阻输入状态，用户在使用 IO口时必须先设置IO口模式。另外每个 IO口均可独立使能内部 4K 上拉电阻</p>
]]></content>
  </entry>
  <entry>
    <title>STC8增强型单片机开发</title>
    <url>/STC8%E5%A2%9E%E5%BC%BA%E5%9E%8B%E5%8D%95%E7%89%87%E6%9C%BA%E5%BC%80%E5%8F%91.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>STC8增强型单片机开发</strong></p>
<p>已收藏</p>
<p><strong>47</strong> 文档<strong>74714</strong> 字</p>
<p><a href="https://www.yuque.com/icheima"><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1680583926393-avatar/b597eb12-befb-4ac8-81ca-0764e1f95f22.png?x-oss-process=image%2Fresize%2Cm_fill%2Cw_56%2Ch_56%2Fformat%2Cpng" alt="集成电路与机器人应用开发" /></a></p>
<p>👋  欢迎来到黑马SCT8增强型单片机知识库</p>
<p>这里是黑马stc8的开发的相关文档，有问题欢迎留言，会统一在问题汇总中解答。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://gw.alipayobjects.com/mdn/rms_15e52e/afts/img/A*pm-hQY3BLV8AAAAAAAAAAAAAARQnAQ" alt="img" /></p>
<p>网上一些人说51单片机过时了，太LOW了，能说出这种话的一看就没做过产品研发，没上过班，对行业一无所知。</p>
<p>去boss直聘看看就知道了，大量企业招聘有STC，赛元，新唐相关开发经验的工程师，月薪8~15K。</p>
<p>​     嵌入式企业在做mcu选型的时候，成本是一个重要的考虑因素。出货量几百万的小家电设备，mcu上能便宜两毛钱就是非常客观的利润， 能用1块钱的mcu实现的功能，干嘛要买个几十块的stm32来实现？如果你把stm32实现的功能，在51单片机上实现出来，这才是真正的牛逼。</p>
<p>​     另外生态系统和开发工具也非常重要，8051架构专利已经到期，现在没有专利问题，开发工具丰富，开发简单，大多数外设都有例程，历史悠久非常的可靠和稳定。</p>
<p>​</p>
<p>​       最后一个最重要的东西就是供货周期，国产的芯片供货稳定保证。</p>
<p>stc现在有32位的单片机，但是建议入门选8位的，对于新手来讲，stc8便宜，资源丰富，各种外设都支持，学习难度不大，作为入门是最佳选择。另外因为价格便宜，在小家电，各种低价智能硬件设备上有大量应用场景，所以市场上有很多企业的招聘岗位需要有stc8的经验。</p>
<p>学习内容： 会读芯片手册，能看懂原理图，能自己绘制开发板，点灯，pwm， adc，中断系统，电位器，数码管，温湿度传感器，独立按键，矩阵键盘，rtc时钟，外部中断，IIC协议， SPI协议， USB的hid协议，uart通讯，蓝牙芯片通讯等。 学习以上内容一定要配合逻辑分析仪去学习。大量低水平的嵌入式开发工程师觉得嵌入式很难，主要原因是调试工具没听说过，或者不会用。</p>
<p>基本上上面的内容每个案例都熟悉，就差不多能找个八九千工资的单片机开发工程师的工作了。</p>
<p><a href="https://www.yuque.com/icheima/stc8h/wypvl6qv7g59sms4"><br />
STC初级考试题昨天 14:44</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/nrqlgacw7uamrzc4">问题汇总✍️07-05 22:43</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/rha5cw25afli8hk4">知识地图🗺️07-05 10:04</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/abl6co0dsqsaom5p">模板代码📝昨天 21:00</a></p>
<p>第一个程序</p>
<p><a href="https://www.yuque.com/icheima/stc8h/hsfp6pgneomsg96i">STC8H核心板07-04 15:36</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/kaxm9g9ft9riy6yz">C51版本Keil环境搭建07-05 18:58</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/eeeeh17ecg77mgeg">点亮第一盏灯04-08 16:46</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/tfht5upathln5yl6">GPIO的理解04-08 14:41</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/oxdw1ki2ggyxr3mt">库函数07-06 21:56</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/px60g8leo2saqz8r">逻辑分析仪04-08 14:41</a></p>
<p>STC基础开发</p>
<p><a href="https://www.yuque.com/icheima/stc8h/akdb6p6veb9tgch3">AStyle格式化工具07-06 15:32</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/zgfrmn8lfq8ei4mc">串口调试TTL07-06 21:58</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/yoffy6qyanqlr2fu">中断系统INT07-07 23:38</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/lsa5qivdmgqe6elm">系统时钟07-07 14:15</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/zgfrmn8lfq8ei4mc"><br />
串口调试TTL07-06 21:58</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/yoffy6qyanqlr2fu">中断系统INT07-07 23:38</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/lsa5qivdmgqe6elm">系统时钟07-07 14:15</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/rz9hmk0wolgrvz8n">extern关键字04-10 08:14</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/loaw8ggm1mgbbsmv">定时器Timer07-07 16:39</a></p>
<p>STC进阶开发</p>
<p><a href="https://www.yuque.com/icheima/stc8h/cy6z4mqechrqgn2d">黑马STC8H扩展版06-22 16:08</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/lvc54m4u4bkct5xr">LED灯07-08 09:21</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/vz2lklx0gq1mdb1v">LED呼吸灯(PWM)07-08 12:43</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/ycevzby791b987gi">震动马达04-10 00:16</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/she4ctr86xxsmq8e">震动马达PWM07-11 08:36</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/rsbqp1cogp1wtu87">电位器案例(ADC)07-10 10:57</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/im0nczn1iugwr4y4">热敏电阻昨天 20:10</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/bhne4ly8gq0e3hgg">独立按键04-10 00:16</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/zwf2dfq7gzsatpki">数码管07-11 16:48</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/kmz2mllvxs1uvdfy">数码管207-11 17:05</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/xrbq05khc2erpcau">蜂鸣器今天 12:04</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/gvl6nzzb43ig6bn6">RTC时钟今天 05:47</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/ckgwsippsg0xp1gd">I2C总线今天 00:53</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/ckgwsippsg0xp1gd">https://www.yuque.com/icheima/stc8h/ckgwsippsg0xp1gd</a>)</p>
<p><a href="https://www.yuque.com/icheima/stc8h/uxa88wumubrdgmko">外部中断(INT)06-25 21:12</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/ldy7mcegpfd5zpez">OLED显示器(SPI)04-20 17:05</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/ynizcfhlu83myq2g">矩阵键盘06-28 09:20</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/wut9r3gh2e4epn2b">HID协议06-29 11:17</a></p>
<p>STC设计与RTX51</p>
<p><a href="https://www.yuque.com/icheima/stc8h/ec73hcqlig1mt5k4">核心板设计07-01 11:29</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/yqug1viu5iupaepi">RTX51操作系统04-25 07:32</a></p>
<p>巡线小车项目</p>
<p><a href="https://www.yuque.com/icheima/stc8h/xeblz42ehepsdgd7">蓝牙智能巡线小车06-14 12:24</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/vp5nkvpny09bmzrm">常规功能实现07-03 15:05</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/ke95hro1u6pbnbg5">超声波模块04-28 07:39</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/ckn6v6zpz2rxktnp">循迹功能04-30 08:16</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/nkps02tldvkew0vc">电机控制07-09 16:40</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/nxdgd4em4cqk65ee">蓝牙通讯04-29 22:37</a></p>
<p>附录：拓展知识点</p>
<p><a href="https://www.yuque.com/icheima/stc8h/pkci1c60sl8aytmy">焊接小知识07-04 19:02</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/ou352z4txrsnn58a">拓展小知识👄今天 08:41</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/sp7vazs576dxpqef">ASCII码对照表07-05 17:24</a></p>
<p><a href="https://www.yuque.com/icheima/stc8h/ngmiq52dqk8bt06l">STC开发内联汇编04-18 12:06</a></p>
]]></content>
  </entry>
  <entry>
    <title>STC初级考试题</title>
    <url>/STC%E5%88%9D%E7%BA%A7%E8%80%83%E8%AF%95%E9%A2%98.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="stc初级考试题"><a class="markdownIt-Anchor" href="#stc初级考试题"></a> STC初级考试题</h1>
<p>每道题都编译生成一个hex文件,同学需自由发挥,主要通过编写单片机应用代码最终实现以下智能控制效果:</p>
<p>题目1（25分）</p>
<p>\1. 在酒吧、咖啡厅、演唱会、博物馆等场景经常使用多彩氛围灯，创造独特的艺术感和视觉效果，</p>
<p>要求你开发一个多彩氛围灯功能，实现led的流水灯效果。1，3，5，7号灯依次流水点亮。然后一起熄灭。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681382542123-1271b6bd-5c40-45f5-9bee-d1d73fe958ff.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_176%2Climit_0" alt="image.png" /></p>
<p>题目2（25分）</p>
<p>2.电动牙刷控制板主要通过单片机和震动马达实现，将震动马达接入单片机的PWM输出口，</p>
<p>使用单片机的PWM模块控制震动马达的震动频率和震动强度。</p>
<p>要求开发一个简单的电动牙刷控制板，实现pwm控制震动马达 , 实现震动马达的变速震动,</p>
<p>以高速震动几秒后自动切换到低速震动模式然后自动停止。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681382583669-9c9e901d-0825-4f00-bb33-70ff323bb35a.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_200%2Climit_0" alt="image.png" /></p>
<p>题目3（25分）</p>
<p>3.物联网温控报警终端可以应用于仓库、实验室等场所，实现对环境温度的实时监测，可以及时发现温度异常情况</p>
<p>●通过闪烁LED灯来报警，提高安全性。</p>
<p>●请通过串口把自己的姓名拼音和当前温度打印出来，格式如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//姓名：温度</span></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"></span><br><span class="line">zhangsan:<span class="number">26</span></span><br></pre></td></tr></table></figure>
<p>要求编写逻辑代码实现智能工厂逻辑，如当采集到的环境温度高于一定数值（高于室内当前温度2℃）时闪烁LED（8个LED灯同时亮灭）报警</p>
<p>题目4（25分）</p>
<p>4.物联网温控上报终端可以应用于工业生产过程中，实现对环境温度的实时监测和远程管理，</p>
<p>可以及时发现温度异常情况，提高生产效率和产品质量。</p>
<p>要求开发一个简单的物联网温控测试终端， 使用热敏电阻获取传感器采集到的环境温度数据并通过数码管展示。</p>
<p>提示：<br />
●采样到的温度的25度是int类型<br />
●把int类型的25除以10 可以得到int类型数字2，<br />
●把25对10取模（25%10）可以得到数字5<br />
可以把25展示在数码管的任意连续位置上。<br />
可以采用NIXIE_display函数来完成，通过快速切换来完成2和5数字的同时显示。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681382652649-98d3ce6b-74cd-4a76-be4d-11c498652bf2.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_209%2Climit_0" alt="image.png" /></p>
<p>附加题（选做）</p>
<p>附加题1（10分）</p>
<p>使用1号和2号独立按键控制两个外设，按下按键1马达震动，按键2蜂鸣器响起。</p>
<p>1号和2号按键如图所示</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681382756051-2e6658ab-ab68-41be-be57-7845085dc2d2.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_315%2Climit_0" alt="image.png" /></p>
<p>附加题2（10分）</p>
<p>实现下面的数码管跑马灯效果</p>
<p>提示用NIXIE_show方法</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/gif/27903758/1689135746492-4f62f275-3ff0-4a71-9dea-7dc97f688df0.gif" alt="a.gif" /></p>
<p>考试时间：</p>
<p>2.5个小时。 15：00~17：30</p>
<p>17:30~18:00为评分环节。</p>
<p>评分标准：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689144249524-11fd519e-3967-4600-aa0d-a434aaaa4cb3.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
]]></content>
  </entry>
  <entry>
    <title>extern关键字</title>
    <url>/extern%E5%85%B3%E9%94%AE%E5%AD%97.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="extern关键字"><a class="markdownIt-Anchor" href="#extern关键字"></a> extern关键字</h1>
<p>学习目标</p>
<p>1理解extern的作用</p>
<p>2掌握extern的用法</p>
<p>学习内容</p>
<p>extern理解</p>
<p>extern是C语言中的一个关键字，用于说明一个全局变量或函数的定义不在本文件中，而在其他文件中，告诉编译器该变量或函数已经在别的文件中定义过了。</p>
<p>在C语言中，如果要在一个源文件中使用另一个源文件中定义的全局变量或函数，需要使用extern关键字声明一下该变量或函数，这样编译器才能知道该变量或函数已经在其他文件中定义过了。</p>
<p>extern变量</p>
<p>以下是extern关键字的用法和示例：</p>
<p>在一个源文件中定义全局变量，然后在另一个源文件中使用该变量：</p>
<p>a.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> global_var = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>b.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> global_var; <span class="comment">// 声明全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, global_var); <span class="comment">// 使用全局变量</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CMakeLists.txt</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">add_executable(test b.c a.c)</span><br></pre></td></tr></table></figure>
<p>extern函数</p>
<p>在一个源文件中定义函数，然后在另一个源文件中使用该函数：</p>
<p>a.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>b.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>; <span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 使用函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CMakeLists.txt</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">add_executable(test b.c a.c)</span><br></pre></td></tr></table></figure>
<p>头文件中定义</p>
<p>需要注意的是，如果在一个源文件中定义了一个全局变量或函数，并且该变量或函数要在多个源文件中使用，那么需要将该变量或函数的定义放在一个头文件中，并在其他源文件中包含该头文件。</p>
<p>例如，将上面的global_var和add函数的定义放在一个头文件中：</p>
<p>myheader.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> global_var;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure>
<p>然后在其他源文件中包含该头文件即可使用该变量和函数：</p>
<p>myimpl.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file1.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myheader.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> global_var = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>test.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file2.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myheader.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, global_var);</span><br><span class="line">    <span class="keyword">int</span> result = add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CMakeLists.txt</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">add_executable(test test.c myimpl.c)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>中断系统INT</title>
    <url>/%E4%B8%AD%E6%96%AD%E7%B3%BB%E7%BB%9FINT.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="中断系统int"><a class="markdownIt-Anchor" href="#中断系统int"></a> 中断系统INT</h1>
<p>学习目标</p>
<p>1理解中断的概念，掌握中断的分类和优先级</p>
<p>2理解中断的响应机制和处理方法</p>
<p>学习内容</p>
<p>中断的概念</p>
<p>中断系统是为使 CPU 具有对外界紧急事件的实时处理能力而设置的。</p>
<p>当中央处理机 CPU 正在处理某件事的时候外界发生了紧急事件请求，要求 CPU 暂停当前的工作,转而去处理这个紧急事件，处理完以后，再回到原来被中断的地方，继续原来的工作，这样的过程称为中断。实现这种功能的部件称为中断系统，请示 CPU 中断的请求源称为中断源。微型机的中断系统一般允许多人中断源，当几个中新源同时向 CPU 请求中断，要求为它服务的时候，这就存在 CPU 优先响应哪一个中断源请求的问题。通常根据中断源的轻重缓急排队，优先处理最紧急事件的中断请求源，即规定每一个中断源有一个优先级别。CPU 总是先响应优先级别最高的中断请求。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681057975277-c08fe570-b2ed-4e9f-8f01-ad904051f7dd.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_48%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="105.png" /></p>
<p>当 CPU 正在处理一个中断源请求的时候(执行相应的中断服务程序)，发生了另外一个优先级比它还高的中断源请求。如果 CPU 能够暂停对原来中断源的服务程序,转而去处理优先级更高的中断请求源处理完以后，再回到原低级中断服务程序，这样的过程称为中断嵌套。这样的中断系统称为多级中新系统，没有中断嵌套功能的中断系统称为单级中断系统。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681191310061-4fcbef02-f722-49f3-b93f-33392879eea5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="106.png" /></p>
<p>用户可以用关总中断允许位(EA/IE.7)或相应中断的允许位屏蔽相应的中断请求，也可以用打开相应的中断允许位来使 CPU 响应相应的中断申请,每一个中断源可以用软件独立地控制为开中断或关中断状态，部分中断的优先级别均可用软件设置。高优先级的中断请求可以打断低优先级的中断，反之，低优先级的中断请求不可以打断高优先级的中断。当两个相同优先级的中断同时产生时，将由查询次序来决定系统先响应哪个中断。</p>
<p>中断源</p>
<p>能请示CPU中断的请求源为中断源。STC8H中的中断源如下图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679050835487-e2dab479-bc31-4e32-8f09-35b58efcacf7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_23%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="50.png" /></p>
<p>中断寄存器</p>
<p>通过STC8H的用户手册可以查询到所有的中断寄存器，以及中断请求位信息。</p>
<p><a href="https://www.yuque.com/office/yuque/0/2023/pdf/27903758/1681056971018-019e37d9-a522-41be-86d7-ff0a3db18900.pdf?from=https%3A%2F%2Fwww.yuque.com%2Ficheima%2Fstc8h%2Fyoffy6qyanqlr2fu">stc8h.pdf</a></p>
<p>(21.4 MB)</p>
<p>中断函数</p>
<p>通过 interrupt关键字定义中断函数。示例如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART1_int</span> <span class="params">(<span class="keyword">void</span>)</span> interrupt 0</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●UART1_int是中断函数的名称，可以随意取，按照自己的需求定</p>
<p>●interrupt是中断函数的标记，说明当前函数是中断函数</p>
<p>●0是中断次序，这个就需要根据自己业务，查询用户手册来定。</p>
<p>中断函数，可以理解为回调函数，就是这个函数定义出来了，在什么时机调用，不是我们做的，是系统自己调用的。而我们关心的是，某个事件触发了这个函数调用，我们可以在这个函数中写自己的逻辑。</p>
<p>验证Uart的中断函数</p>
<p>接收时亮灯，发送时灭灯</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sfr		P5M1 	= <span class="number">0xC9</span>;</span><br><span class="line">sfr		P5M0 	= <span class="number">0xCA</span>;</span><br><span class="line">sfr		P5 		= <span class="number">0xC8</span>;</span><br><span class="line">sbit	P53		= P5^<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">sfr     T2L     =   <span class="number">0xd7</span>;</span><br><span class="line">sfr     T2H     =   <span class="number">0xd6</span>;</span><br><span class="line">sfr     AUXR    =   <span class="number">0x8e</span>;</span><br><span class="line"></span><br><span class="line">sfr		IE		= <span class="number">0xA8</span>;</span><br><span class="line">sbit	EA		= IE^<span class="number">7</span>;</span><br><span class="line">sbit	ES		= IE^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">sfr		SCON	= <span class="number">0x98</span>;</span><br><span class="line">sfr		SBUF	= <span class="number">0x99</span>;</span><br><span class="line">sbit	RI		= SCON^<span class="number">0</span>;</span><br><span class="line">sbit	TI		= SCON^<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uart_hello</span><span class="params">(<span class="keyword">void</span>)</span> interrupt 4 </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(RI) &#123;</span><br><span class="line">        <span class="comment">// 如果接收寄存器RI触发了中断，打开灯</span></span><br><span class="line">		RI = <span class="number">0</span>;</span><br><span class="line">		P53 = <span class="number">1</span>;<span class="comment">//开</span></span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(TI) &#123;</span><br><span class="line">        <span class="comment">// 如果发送寄存器TI触发了中断，关掉灯</span></span><br><span class="line">		TI = <span class="number">0</span>;</span><br><span class="line">		P53 = <span class="number">0</span>;<span class="comment">//关</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay1000ms</span><span class="params">()</span>		<span class="comment">//@11.0592MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">	i = <span class="number">57</span>;</span><br><span class="line">	j = <span class="number">27</span>;</span><br><span class="line">	k = <span class="number">112</span>;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span> (--k);</span><br><span class="line">		&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">	&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	P5M1 &amp;= ~<span class="number">0x08</span>,	P5M0 |=  <span class="number">0x08</span>; <span class="comment">//推挽输出</span></span><br><span class="line">	</span><br><span class="line">	SCON = <span class="number">0x50</span>;</span><br><span class="line">	T2L = <span class="number">0xe8</span>; <span class="comment">//65536-11059200/115200/4=0FFE8H</span></span><br><span class="line">	T2H = <span class="number">0xff</span>;</span><br><span class="line">	AUXR = <span class="number">0x15</span>;<span class="comment">//启动定时器</span></span><br><span class="line">	</span><br><span class="line">	EA = <span class="number">1</span>;</span><br><span class="line">	ES = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	P53 = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 休眠1000ms</span></span><br><span class="line">		Delay1000ms();</span><br><span class="line">        <span class="comment">// 发送一个数据0x11</span></span><br><span class="line">		SBUF = <span class="number">0x11</span>;</span><br><span class="line">        <span class="comment">// 将TI位寄存器置为1</span></span><br><span class="line">		TI = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完成的内容有：</p>
<p>●配置Uart初始化，包括定时发生器</p>
<p>●查询几个寄存器地址：SBUF，IE</p>
<p>练习题</p>
<p>1阅读用户手册中断章节</p>
<p>2尝试验证UART1的中断函数</p>
]]></content>
  </entry>
  <entry>
    <title>串口调试TTL</title>
    <url>/%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95TTL.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="串口调试ttl"><a class="markdownIt-Anchor" href="#串口调试ttl"></a> 串口调试TTL</h1>
<p>学习目标</p>
<p>●了解串口通信的基本概念</p>
<p>●掌握STC8H的串口通信原理</p>
<p>●掌握STC8H的串口通信编程</p>
<p>●学会使用逻辑分析仪调试串口</p>
<p>学习内容</p>
<p>什么是串口</p>
<p>串口是一种在数据通讯中广泛使用的通讯接口，通常我们叫做UART (通用异步收发传输器Universal Asynchronous Receiver/Transmitter)，其具有数据传输速度稳定、可靠性高、适用范围广等优点。在嵌入式系统中，串口常用于与外部设备进行通讯，如传感器、液晶显示屏、WiFi模块、蓝牙模块等。</p>
<p>串口通信中的 TXD（Transmit Data）和 RXD（Receive Data）是串口通信中的两个重要信号。</p>
<p>TXD是指串口发送端的数据信号，而RXD是指串口接收端的数据信号。在串口通信中，发送端把要发送的数据发送到TXD引脚上，接收端则通过RXD引脚来接收这些数据。</p>
<p>TXD和RXD信号的实现方式取决于使用的芯片或模块。一般来说，它们都是通过芯片或模块的串口功能来实现的，这需要将相应的引脚连接到芯片或模块的串口引脚上。</p>
<p>在发送数据时，需要将要发送的数据通过串口的发送缓冲区发送到TXD引脚上，接收端通过RXD引脚接收这些数据并放入接收缓冲区中。在接收端收到完整的数据后，可以通过相应的处理进行数据的解析和处理。</p>
<p>需要注意的是，TXD和RXD的电平标准也需要一致，一般常见的有TTL电平和RS232电平，如果不一致则需要进行电平转换。同时，在编写程序时也需要注意串口波特率、数据位、停止位等参数的设置，以保证通信的稳定和可靠。</p>
<p>以下是STC8H的芯片引脚介绍图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679017111086-5b1208a3-f2ed-4283-9c2d-7db389bd5a8d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_41%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="32.png" /></p>
<p>其中有4组Uart通讯口:</p>
<table>
<thead>
<tr>
<th>串口</th>
<th>RXD</th>
<th>TXD</th>
</tr>
</thead>
<tbody>
<tr>
<td>UART1</td>
<td>P3.0</td>
<td>P3.1</td>
</tr>
<tr>
<td>P3.6</td>
<td>P3.7</td>
<td></td>
</tr>
<tr>
<td>P1.6</td>
<td>P1.7</td>
<td></td>
</tr>
<tr>
<td>P4.3</td>
<td>P4.4</td>
<td></td>
</tr>
<tr>
<td>UART2</td>
<td>P1.0</td>
<td>P1.1</td>
</tr>
<tr>
<td>P4.6</td>
<td>P4.7</td>
<td></td>
</tr>
<tr>
<td>UART3</td>
<td>P0.0</td>
<td>P0.1</td>
</tr>
<tr>
<td>P5.0</td>
<td>P5.1</td>
<td></td>
</tr>
<tr>
<td>UART4</td>
<td>P0.2</td>
<td>P0.3</td>
</tr>
<tr>
<td>P5.2</td>
<td>P5.3</td>
<td></td>
</tr>
</tbody>
</table>
<p>串口TTL通讯协议</p>
<p>串口TTL（Transistor-Transistor Logic）是一种串口通信协议，使用TTL电平来进行串口数据传输。它主要用于嵌入式系统、传感器、模块等设备之间的数据通信。</p>
<p>串口TTL主要包括两个信号线：TX（Transmit，发送）和RX（Receive，接收）。TX线是串口TTL的输出线路，用于将数据从串口设备发送出去；RX线是串口TTL的输入线路，用于接收数据到串口设备。</p>
<p>串口TTL使用的是异步串行通信协议，其数据传输的原理是将数据分成一定的数据帧，在数据帧的首尾各加上一个起始位和停止位，用于确定每个数据帧的开始和结束位置。此外，串口TTL通信协议还规定了数据位的长度和奇偶校验位。</p>
<p>串口TTL通常有不同的波特率（Baud Rate）可供选择，波特率是指每秒钟传输的数据位数，通常表示为 bps（bits per second），比如 9600 bps、115200 bps 等等。波特率的设置必须要保证发送和接收设备的波特率一致，否则会导致通信失败。</p>
<p>需要注意的是，串口TTL使用的是TTL电平，其电压范围是0~5V，不同的设备的串口TTL信号的电平有时会有所不同，因此在连接不同设备时需要注意电平的兼容性。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679018348075-39bd331f-bbc2-4e19-88ef-78a9af78995c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_45%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="33.png" /></p>
<p>串口转USB</p>
<p>串口转 USB 是一种将串口信号转换为 USB 信号的设备。它通常被用于连接没有 USB 接口的设备（如单片机、传感器等）与计算机之间的通讯，使这些设备可以通过 USB 接口与计算机进行通信。</p>
<p>在使用串口转 USB 设备时，需要将其插入计算机的 USB 接口，并将串口连接到需要通信的设备上。在计算机中打开串口终端程序，设置串口参数（如波特率、数据位、停止位等），即可开始进行数据传输。在通信过程中，串口转 USB 设备将串口信号转换为 USB 信号，并将其发送到计算机上，或者将从计算机上接收到的 USB 信号转换为串口信号并发送到外部设备上。</p>
<p>串口转 USB 设备通常由一个 USB 转串口芯片和一个串口接口组成。常见的 USB 转串口芯片有 FTDI 和 CH340 等，它们提供了一组标准的串口接口，可以方便地连接到各种外部设备上。</p>
<p>总之，串口转 USB 设备是一种非常实用的工具，它可以帮助我们连接各种没有 USB 接口的设备，方便数据的传输和通讯。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679019560650-d6318b8f-ba4e-46c6-95eb-af1569b82554.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_44%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="34.png" /></p>
<p>黑马STC8H核心板串口调试</p>
<p>1原理图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679019703770-7ad6cd04-2a6e-4444-871d-32f55d5ef806.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_43%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1503%2Climit_0" alt="35.png" /></p>
<p>○D+D-对应的usb口，和pc主机连接</p>
<p>○P3.1P3.0对应的芯片</p>
<p>○采用CH340将串口和USB之间进行转换</p>
<p>所以，我们在PC机上为什么会装串口驱动，主要是用来解析CH340转换后的消息，这样PC机就能认识了</p>
<p>2使用库函数编写串口通讯逻辑</p>
<p>需求：通过串口调试工具，发送消息给开发板，开发板原封不动的将消息传回。</p>
<p>开发步骤：</p>
<p>a新建项目</p>
<p>b导入库函数</p>
<p>c编写逻辑</p>
<p>串口调试实现</p>
<p>1新建项目。新建main.c文件</p>
<p>2导入函数库。拷贝以下函数库文件到项目目录：</p>
<p>aconfig.hSTC8xxxx.H</p>
<p>bGPIO.hGPIO.c</p>
<p>cdelay.hdelay.c</p>
<p>dUART.hUART.c</p>
<p>3代码编写。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;UART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_0 | GPIO_Pin_1;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_PullUp;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P3, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	COMx_InitDefine		COMx_InitStructure;					<span class="comment">//结构定义</span></span><br><span class="line">	COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;	<span class="comment">//模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit_BRTx</span></span><br><span class="line">	COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;			<span class="comment">//选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使用BRT_Timer2)</span></span><br><span class="line">	COMx_InitStructure.UART_BaudRate  = <span class="number">115200ul</span>;			<span class="comment">//波特率, 一般 110 ~ 115200</span></span><br><span class="line">	COMx_InitStructure.UART_RxEnable  = ENABLE;				<span class="comment">//接收允许,   ENABLE或DISABLE</span></span><br><span class="line">	COMx_InitStructure.BaudRateDouble = DISABLE;			<span class="comment">//波特率加倍, ENABLE或DISABLE</span></span><br><span class="line">	COMx_InitStructure.UART_Interrupt = ENABLE;				<span class="comment">//中断允许,   ENABLE或DISABLE</span></span><br><span class="line">	COMx_InitStructure.UART_Priority  = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">	COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31;	<span class="comment">//切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44</span></span><br><span class="line">	UART_Configuration(UART1, &amp;COMx_InitStructure);		<span class="comment">//初始化串口1 UART1,UART2,UART3,UART4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	u8 i;</span><br><span class="line">	<span class="comment">// 配置引脚</span></span><br><span class="line">	GPIO_config();</span><br><span class="line">	<span class="comment">// 配置UART</span></span><br><span class="line">	UART_config();</span><br><span class="line">	<span class="comment">//开启中断</span></span><br><span class="line">	EA = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		delay_ms(<span class="number">10</span>);</span><br><span class="line">		<span class="keyword">if</span>(COM1.RX_TimeOut &gt; <span class="number">0</span>)		<span class="comment">//超时计数</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(--COM1.RX_TimeOut == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(COM1.RX_Cnt &gt; <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;COM1.RX_Cnt; i++)	&#123;</span><br><span class="line">						TX1_write2buff(RX1_Buffer[i]);	<span class="comment">//收到的数据原样返回</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				COM1.RX_Cnt = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4调试</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679022134549-39ba5da7-c832-4731-be03-6c0b19340dd5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_40%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1419%2Climit_0" alt="36.png" /></p>
<p>使用STC-ISP调试工具进行调试。切换好串口助手，选择正确的串口，设置和代码中相同的波特率。</p>
<p>通过发送区进行数据发送，通过接收区观察接收内容。</p>
<p>串口调试重难点</p>
<p>功能配置</p>
<p>●配置IO的工作模式：如果不配置工作模式，会导致串口不工作。（UART1的当前代码中的引脚默认是准双向口，可以不配置，但是不要存在侥幸心理，导致其他的串口使用中没有配置准双向口）</p>
<p>●配置UART的串口工作模式UART_Mode：</p>
<p>○UART_ShiftRight同步移位输出：按位传输，效率低，通常不用。</p>
<p>○UART_8bit_BRTx	8位数据，可变波特率：常用。发送和接收的数据为8位。</p>
<p>○UART_9bit		9位数据，固定波特率，即无法在运行时动态更改波特率。</p>
<p>○UART_9bit_BRTx	9位数据，可变波特率：发送和接收的数据为9位。最后一位为奇偶校验位。</p>
<p>●配置UART的波特率RaudRate：根据实际情况来定，波特率越高，传输越快，但是出现丢帧的概率越高。通常115200就够用。单位是bit/s</p>
<p>●配置UART的波特率发生器BRT_Use：系统提供了4个发生器，通常一一对应。</p>
<p>○BRT_Timer1</p>
<p>○BRT_Timer2</p>
<p>○BRT_Timer3</p>
<p>○BRT_Timer4</p>
<p>●配置UART是否接收RxEnable：可以获取RXD接收的数据。</p>
<p>●配置UART中断Interrupt：UART的对外发送是通过中断实现的，如果不配置，则无法对外发送数据，TXD不工作。</p>
<p>●配置UART波特率加倍BaudRateDouble：默认不加倍，配置加倍会导致波特率是设定的双倍，过高会导致丢帧。</p>
<p>●配置UART的端口P_SW：串口通道可以通过几组引脚来实现，但是需要指明是哪一组。</p>
<p>中断开启</p>
<p>由于uart中的发送是通过中断实现的，需要开启，但是STC8还提供了一个总的开关，如果总开关不打开，一样不起作用。</p>
<p>开启中断的总开关</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">EA = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>UART的接收与发送</p>
<p>1关于接收</p>
<p>接收是通过接收缓冲区进行接收。</p>
<p>在死循环中，间隔一定时间到缓冲区中去取数据，有数据，说明就是接收了</p>
<p>2关于发送</p>
<p>发送是通过发送缓冲区进行发送。</p>
<p>发送提供了单个字节发送的API: TX1_write2buff(byte)</p>
<p>发送提供了字符串发送的API: PrintString1(str)</p>
<p>逻辑分析仪调试</p>
<p>通过逻辑分析仪，分析RXD和TXD的数据</p>
<p>原理图分析</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679044088373-6bccb330-cb3e-4da6-babd-5e8f2faea96c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_43%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="35.png" /></p>
<p>●P3.0引脚为RXD，对这个引脚进行分析即可</p>
<p>●P3.1引脚为TXD，对这个引脚进行分析即可</p>
<p>接线方式</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679044545514-9eaca4e5-dc66-4eea-817d-030f91af9637.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_38%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="46.png" /></p>
<p>●将逻辑分析仪的通道1线和开发板中的P3.0引脚RXD连接。</p>
<p>●将逻辑分析仪的通道2线和开发板中的P3.1引脚TXD连接。</p>
<p>●将逻辑分析仪的GND线和开发板的GND连接。</p>
<p>程序和串口工具准备</p>
<p>1烧录写好的串口程序固件，功能是接收到串口消息，并原路返回这个消息。</p>
<p>2打开STC-ISP工具的串口调试部分，进行配置调试：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679044933806-35daa8dd-5e56-4d86-9c06-9b0081c0cc0a.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1204%2Climit_0" alt="47.png" /></p>
<p>a配置正确的波特率，选择对应的串口，打开串口</p>
<p>b在发送区域输入发送的内容</p>
<p>c点击自动发送，这样工具就会定时发送这个数据</p>
<p>逻辑分析仪调试</p>
<p>点击绿色按钮，进行数据分析</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679045243148-532a7c83-d4e0-4e17-b665-04245261a536.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_55%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="48.png" /></p>
<p>●选择右侧的分析</p>
<p>●观察到逻辑分析仪已经100%确认为 Async Serial信号，也就是串口信号</p>
<p>查看串口内容：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679045364518-a821f59e-36ab-42f7-88b5-775bf5e9a3d0.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_55%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="49.png" /></p>
<p>●点击数据按钮，可以观察到，传输的内容为<code>hello</code>，也就是分析出我们发送的内容</p>
<p>串口通讯测试</p>
<p>测试流程：</p>
<p>1PC机通过串口工具连接两个设备A和B的UART1</p>
<p>2将A和B的UART2相连（A设备的RXD、TXD接B设备的TXD，RXD）</p>
<p>3编写代码</p>
<p>a接收PC从UART1发来的数据，将之从UART2发出去</p>
<p>b接收另外一个设备从UART2发来的数据，将之从UART1发出去</p>
<p>4通过PC机的串口工具A给A设备发消息，观察串口工具B收到的消息</p>
<p>引脚选择如下：</p>
<p>UART1：RXD-P3.0	TXD-P3.1	<br />
UART2：RXD-P1.0	TXD-P1.1</p>
<p>注意：</p>
<p>如果串口窗口出现乱码内容，通常原因有两个：</p>
<p>1烧录时，选择的IRC频率不是24.000 MHz</p>
<p>2连接串口时，选择的波特率和代码中的不一致，通常为115200</p>
<p>重要的事情说三遍：<br />
使用UART一定要记得打开中断总开关！！！EA = 1;<br />
使用UART一定要记得打开中断总开关！！！EA = 1;<br />
使用UART一定要记得打开中断总开关！！！EA = 1;</p>
<p>练习题</p>
<p>1通过库函数，实现PC和单片机的UART通讯。</p>
<p>2通过逻辑分析仪进行调试串口的TXD和RXD</p>
<p>3通过串口控制灯的开和关：P53引脚</p>
<p>4实现两个开发板的串口通讯：开发板1要用UART2，开发板2要求用UART3</p>
<p>a注意的问题：接线和调试设计问题</p>
<p>b开发板1发送消息给开发板2，控制开发板2的灯泡亮或者灭</p>
<p>c开发板2发送消息给开发板1，控制开发板1的灯泡亮或者灭</p>
]]></content>
  </entry>
  <entry>
    <title>学习路线图</title>
    <url>/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="基础部分"><a class="markdownIt-Anchor" href="#基础部分"></a> 基础部分：</h3>
<p><strong>C语言基础</strong>： 常用数据类型、结构体、指针、函数等操作</p>
<p><strong>硬件基础:</strong> 电学基础、电路基础、数电模电、常用的电子元器件、元器件参数和选型、原理图datasheet、集成电路PCB设计、生产打样焊接调试等。</p>
<p>**计算机组成原理：**数字电路原理、数据表示、数据运算、寄存器与数据存储、指令集和指令系统、总线系统、中央处理器、ALU、输入输出外设等。</p>
<p>**数据结构：**数组、队列、链表、堆栈、树、表等。</p>
<p>**操作系统：**进程管理、内存管理、文件管理、外设管理等。</p>
<p><strong>学习方法：</strong></p>
<ul>
<li><strong>操作系统</strong>，先写裸机代码，再写状态机，再写控制反转，自然而然的就会写操作系统了，理解演化流程，动手移植一下操作系统就掌握了。</li>
<li><a href="https://www.bilibili.com/video/BV1ym4y1y7Jm/">https://www.bilibili.com/video/BV1ym4y1y7Jm/</a></li>
<li><strong>计算机组成原理</strong>，自己动手做一台8位的计算机，设计一些自己的汇编指令，计算机组成原理就理解了。</li>
<li><a href="https://www.bilibili.com/video/BV1qN411P7jX/">https://www.bilibili.com/video/BV1qN411P7jX/</a></li>
<li><strong>C语言基础</strong>，多写小demo，扎实基本功。</li>
<li><strong>硬件基础</strong>，打样，焊接，调试。</li>
<li><a href="https://www.bilibili.com/video/BV1Po4y1B74K/">https://www.bilibili.com/video/BV1Po4y1B74K/</a></li>
<li><strong>数据结构</strong>，单独学知识点没意义，学了也不会用，写一些c语言的小游戏，比如说贪吃蛇，俄罗斯方块等，数据结构就掌握了。用32位arm系统，驱动lcd液晶显示器，做个贪吃蛇，常见的数据结构就欧拉。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1685694354194-c3a19d2b-b3e0-4bb4-85ab-104b6fcab9dc.png" alt="img" /></p>
<h3 id="进阶部分"><a class="markdownIt-Anchor" href="#进阶部分"></a> 进阶部分：</h3>
<p><strong>一定要以项目驱动的方式学习。</strong></p>
<p>集成电路的处理器，便宜的叫单片机，贵点的叫mcu，算力更强大能做神经网络计算的叫NPU，学习的方式也是从便宜到贵，从简单到复杂。</p>
<ol>
<li><strong>单片机开发：</strong></li>
</ol>
<p>建议选STC的8位单片机，stc现在有32位的单片机，但是建议选8位的，对于新手来讲，stc8便宜，资源丰富，各种外设都支持，学习难度不大，作为入门是最佳选择。另外因为价格便宜，在小家电，各种低价智能硬件设备上有大量应用场景，所以市场上有很多企业的招聘岗位需要有stc8的经验。</p>
<p>学习内容： 会读芯片手册，能看懂原理图，能自己绘制开发板，点灯，pwm， adc，中断系统，电位器，数码管，温湿度传感器，独立按键，矩阵键盘，rtc时钟，外部中断，IIC协议， SPI协议， USB的hid协议，uart通讯，蓝牙芯片通讯等。 **学习以上内容一定要配合逻辑分析仪去学习。**大量低水平的嵌入式开发工程师觉得嵌入式很难，主要原因是调试工具没听说过，或者不会用。</p>
<p>基本上上面的内容每个案例都熟悉，就差不多能找个八九千工资的单片机开发工程师的工作了。</p>
<p>学习这些知识点一定要按照项目驱动的方式去做， 比如说学GPIO控制led灯做个流水灯氛围灯； 学pwm控制电机做个洗脸机，做个电动牙刷； 学adc采样温度做个烘鞋器，智能烫发夹；学中断和独立按键矩阵键盘，加上hid协议可以自己做个usb键盘； 学IIC控制rtc时钟可以自己做个电子表等。 一定要动手去实践！！！ 做出来才是自己的。 明白自己要干啥，带着问题去学知识点才是最快的方法。</p>
<p>部分学生作品：</p>
<p><a href="https://v.itheima.com/AIdb/3.WLxyj_ev.mp4">https://v.itheima.com/AIdb/3.WLxyj_ev.mp4</a></p>
<p><a href="https://v.itheima.com/AIdb/10.KZHjxjp_ev.mp4">https://v.itheima.com/AIdb/10.KZHjxjp_ev.mp4</a></p>
<p><a href="https://v.itheima.com/AIdb/8.door_ev_x1.1_ev.mp4">https://v.itheima.com/AIdb/8.door_ev_x1.1_ev.mp4</a></p>
<p><a href="https://v.itheima.com/AIdb/5.aiDDYS_ev.mp4">https://v.itheima.com/AIdb/5.aiDDYS_ev.mp4</a></p>
<p><a href="https://v.itheima.com/AIdb/4.HXQ_ev.mp4">https://v.itheima.com/AIdb/4.HXQ_ev.mp4</a></p>
<p><a href="https://v.itheima.com/AIdb/9.DDSgame_ev.mp4">https://v.itheima.com/AIdb/9.DDSgame_ev.mp4</a></p>
<ol>
<li><strong>嵌入式开发</strong></li>
</ol>
<p>stc还是属于性能较为低端的单片机， 嵌入式的阶段可以使用性能比较强大的arm内核的mcu了， 比较典型的是stm32， 但是由于stm32涨价过于不友好，另外在国产代替的大背景下，选用国产32处理器的企业越来越多，其实他们都是基于cortex的内核的mcu，代码开发起来基本上都是一模一样的。</p>
<p>学习内容： 基本上跟单片机是一样的， 会读芯片手册，能看懂原理图，能自己绘制开发板，点灯，pwm， adc，中断系统，IIC协议， SPI协议，uart通讯，DMA等。 **应为cortex的内核算力比较强大， 现在可以驱动复杂的屏幕啦。 驱动大分辨率的rgb屏幕和mcu屏幕。**基于lvgl去实现比较复杂的动画效果。</p>
<p>对于ARM内核的开发一般有寄存器开发和库函数开发两个版本， 两个版本交叉学习会对底层的掌握有很大的帮助。</p>
<p>学习上面的知识点还是去做项目， 把之前的项目再来一遍，你会发现无非就是换换处理器，时钟系统更复杂了，中断系统更复杂了，功能更强大了。 最后无非是换换API就能干活了， 之前用的是小刀，现在的mcu是牛刀了。能干更厉害的事情了。</p>
<p>这一阶段我们用arm处理器，结合陀螺仪mpu6050，通过调整pid算法， 做一个二轮平衡车。</p>
<p>掌握了这一段的知识点基本上就能找到一个一万多的工作了。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1684201394822-b73f537d-1411-4ef8-a122-142910a3c3cb.png?x-oss-process=image%2Fresize%2Cw_632%2Climit_0" alt="img" /></p>
<ol>
<li><strong>risc-v处理器开发</strong></li>
</ol>
<p>STC是8051的处理器指令集， gd32和stm32是arm的指令集， 现在还有一个新的开源的精简指令集叫RISC-V，RISC-V处理器可以应用于各种不同的场景，包括嵌入式系统、移动设备、高性能计算、服务器和工业控制等，具有广泛的应用前景。 risc-v是目前用的越来越多的指令集架构， OpenHarmony是由华为推出的开源分布式操作系统，旨在构建一个全场景、跨设备的智能终端生态系统，以实现万物互联、智能互通的目标。HI3861是海思半导体基于risc-v架构开发的支持开源鸿蒙操作系统的物联网芯片。</p>
<p>学习开源鸿蒙和海思hi3861，做一个类似稚晖君的wifi小电视。 <sup>_</sup>。</p>
<p>掌握一个集成电路上集成多个mcu，通过mcu的内部通讯，让STC和ARM具备openharmony万物互联的能力。</p>
<p>这个阶段的内容掌握工资又能涨个几千块。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1685695247180-08dfc720-2f61-40d8-a8f5-550a0dfef8de.png" alt="img" /></p>
<ol>
<li><strong>上位机开发</strong></li>
</ol>
<p>毕竟嵌入式设备的计算能力是比较弱的，通常嵌入式的下位机还会对应一个功能强大的Linux系统上位机，使用rk3566或者rk3568的Linux上位机目前应用越来越广泛，价格也很美丽，400-500元就能搞定。支持hdmi协议可以驱动很高分辨率的显示屏哦。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1685696639420-5f53b32e-074f-4932-927e-7c43862399d4.png" alt="img" /></p>
<p>做上位机开发最好的语言就是python，python包装后的pyqt，性能跟原生c++的qt基本上没有区别，开发周期却能减少80%。 pyqt已经是市面上上位机的首选语言。</p>
<p>学习python，既能做嵌入式的上位机，又能干人工智能，机器视觉和深度学习，真是太香了。</p>
<p>这一阶段建议大家好好学习学习python，多线程技术，面向对象思想和网络通讯技术，开发出功能强大的具备网络功能的上位机程序，让你的嵌入式设备飞向更广阔的空间。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1685693335959-852b02da-a661-4829-81e6-1186f6ffac78.png" alt="img" /><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1685693444027-59681f5a-6dee-4ef4-b0f2-8c0b59c9f3d1.png" alt="img" /></p>
<ol>
<li><strong>机器视觉</strong></li>
</ol>
<p>一个复杂的机车系统或者机器人系统其实是有很多很多嵌入式设备组成，这些设备就像是人的胳膊，腿，心脏，大脑等。 但是如果想让机器变得更智能，就必须赋予机器人眼睛， 机器视觉就是干这个活的， 现在机器视觉的框架已经非常成熟，我们主要学习opencv和pytorch的YOLO库，机器人就能拥有眼睛了。</p>
<p>嵌入式设备拥有眼睛，其应用领域非常广泛，包括自动驾驶、智能制造、智能家居、智慧医疗等。嵌入式系统可以通过集成图像处理器、处理器、传感器等组件，实现高效的图像处理和分析，提供更快速、更可靠、更精准的识别和控制功能。</p>
<p>随着制造业的数字化转型，智能制造已成为一个不可逆转的趋势。机器视觉技术的应用可以提高制造效率、降低成本、提高产品质量，因此，越来越多的制造企业开始引入机器视觉技术，推动制造业向智能化、自动化方向发展。另外，在自动驾驶、智慧城市、智能安防等领域，也有着广泛的应用需求。</p>
<p>现在做嵌入式人工智能部署的工程师，薪资比算法工程师还要高哦。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1685695633193-2a77fbfc-79c7-40d5-b94c-d742c9468a00.png" alt="img" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1685697885530-be3e7e65-8e78-42bb-b3b1-e497ebfad83c.png" alt="img" /></p>
<ol>
<li><strong>机器人操作系统</strong></li>
</ol>
<p>机器人产业作为新兴领域，具有很大的发展潜力和广阔的市场空间。机器人可以在工业生产、服务行业、医疗保健、教育等领域发挥作用，应用范围非常广泛。另外，随着人工智能技术的发展，机器人将能够实现更加智能化和个性化的服务，这也为机器人创业带来了更多的机会，众多大佬选择去做机器人相关的创业，也是出于对机器人产业未来发展潜力的看好，当然薪资也非常高哦。 机器人和嵌入式天生就是一堆，机器人的各种外设都是嵌入式的设备来控制的。 怎么让这些嵌入式系统更好的协同工作，更好的通讯，这就需要机器人操作系统了， 最新的机器人操作系统是ROS2，非常的香。 招聘市场也很香。 赶紧学一学用起来吧。 自己做个扫地机器人扫地怎么样？</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1685697421125-937bb89e-e068-4e92-a5f2-273381af4f4c.png" alt="img" /></p>
<p><strong>上面的内容是黑马集成电路与机器人应用开发的学习路线设计， 适合零基础转行单片机和嵌入式的学员，也适合有嵌入式基础希望能从事跟高级的机器人系统应用开发的相关学员。</strong></p>
<h1 id="集成电路应用开发和嵌入式的区别"><a class="markdownIt-Anchor" href="#集成电路应用开发和嵌入式的区别"></a> 集成电路应用开发和嵌入式的区别</h1>
<table>
<thead>
<tr>
<th>区别</th>
<th>集成电路应用开发技术</th>
<th>嵌入式技术</th>
</tr>
</thead>
<tbody>
<tr>
<td>技术目标</td>
<td>针对具体的应用需求，设计整个集成电路系统的硬件和嵌入式软件部分。</td>
<td>只涉及嵌入式软件部分，对硬件不太了解。</td>
</tr>
<tr>
<td>技术内容</td>
<td>软硬件架构设计、操作系统移植、驱动程序开发、应用程序开发、系统集成、系统调试、系统优化等</td>
<td>软件开发，外设接口控制，操作系统应用。</td>
</tr>
<tr>
<td>应用领域</td>
<td>通信、汽车、医疗、工业、消费电子、安防、智能家居、医疗器械等方方面面</td>
<td>安防、智能家居、消费电子等</td>
</tr>
<tr>
<td>未来发展</td>
<td>技术难度较大，市场急缺、需要掌握电路设计、物理设计、验证、制造流程、嵌入式软件开发、操作系统移植等多个领域的知识，门槛较高、市场人才需求量大，未来发展空间广阔。</td>
<td>技术难度相对较小，只需要掌握某种嵌入式处理器和单片机相关知识和编程技巧，门槛较低、容易被取代，未来发展受限。</td>
</tr>
<tr>
<td>产品能力</td>
<td>拥有设计电子产品的能力，结构功能可以自由裁剪，灵活定制。</td>
<td>受限于硬件方案，只能基于现成的开发板开发，对原理图和硬件不熟悉。</td>
</tr>
</tbody>
</table>
]]></content>
  </entry>
  <entry>
    <title>定时器Timer</title>
    <url>/%E5%AE%9A%E6%97%B6%E5%99%A8Timer.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="定时器timer"><a class="markdownIt-Anchor" href="#定时器timer"></a> 定时器Timer</h1>
<p>学习目标</p>
<p>1理解定时器</p>
<p>2掌握定时器的编程操作</p>
<p>学习内容</p>
<p>定时器</p>
<p>定时器是一种计时装置，通常由一个晶体振荡器提供时钟信号，可以计时一定的时间后执行相应的操作。在单片机中，定时器一般是由计数器和时钟源组成的，可以用来产生一定时间间隔的中断信号，或者用于测量输入信号的周期和占空比等。定时器通常具有多种工作模式和计数方式，可以灵活地应用于各种场合。</p>
<p>STC8H内置了5个16位定时器：T0，T1，T2，T3，T4.</p>
<p>Timer案例</p>
<p>使用定时器，控制板载LED高低电平输出。</p>
<p>main.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_3;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_PullUp;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P5, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIMER_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	TIM_InitTypeDef		TIM_InitStructure;						<span class="comment">//结构定义</span></span><br><span class="line">	TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;	<span class="comment">//指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TIM_8BitAutoReload,TIM_16BitAutoReloadNoMask</span></span><br><span class="line">	TIM_InitStructure.TIM_Priority    = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">	TIM_InitStructure.TIM_Interrupt = ENABLE;					<span class="comment">//中断是否允许,   ENABLE或DISABLE</span></span><br><span class="line">	TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;		<span class="comment">//指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_Ext</span></span><br><span class="line">	TIM_InitStructure.TIM_ClkOut    = DISABLE;				<span class="comment">//是否输出高速脉冲, ENABLE或DISABLE</span></span><br><span class="line">	TIM_InitStructure.TIM_Value     = <span class="number">65536UL</span> - (MAIN_Fosc / <span class="number">100000UL</span>);		<span class="comment">//初值,</span></span><br><span class="line">	TIM_InitStructure.TIM_Run       = ENABLE;					<span class="comment">//是否初始化后启动定时器, ENABLE或DISABLE</span></span><br><span class="line">	Timer_Inilize(Timer0,&amp;TIM_InitStructure);					<span class="comment">//初始化Timer0	  Timer0,Timer1,Timer2,Timer3,Timer4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer0_call</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	P53 = !P53;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	GPIO_config();</span><br><span class="line">	TIMER_config();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//开启中断总开关</span></span><br><span class="line">	EA = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>timer.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">timer0_call</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************* Timer0中断函数************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer0_int</span> <span class="params">(<span class="keyword">void</span>)</span> interrupt TIMER0_VECTOR</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	timer0_call();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定时器配置理解</p>
<p>工作模式</p>
<p>工作模式指的是计数方式，timer的计数是在主频计数的基础上，来进行数数的。timer有16位的计数器，通过计数器来计数来确定定时器运行的时长，在关键位置触发定时中断。</p>
<p>●16位自动重装载模式：可以被设置成定时或者计数两种模式，每当定时器溢出时就会触发中断或者输出信号。</p>
<p>●16位不可重装载模式：计数值达到设定值后，定时器就会停止计数，需要重新初始化才能继续计数。</p>
<p>●8位自动重装载模式：8位计数器溢出时触发中断或输出信号。</p>
<p>●不可屏蔽中断的16位自动重装载模式：16位计数器溢出时触发中断或输出信号，并且可以通过软件或硬件方式清除定时器计数器的值。</p>
<p>通常使用16位自动重装载模式.</p>
<p>中断配置</p>
<p>中断配置是为了打开中断开关的，从而可以触发中断回调的，如果不配置，将无法触发中断回调。</p>
<p>时钟源</p>
<p>可配置的是重要有两个：</p>
<p>●1T: 跟随主频。</p>
<p>●12T: 进行12分频。</p>
<p>是否输出高速脉冲</p>
<p>TIM_ClkOut，可以配置DISABLE或者ENABLE</p>
<p>如果配置ENABLE，则P3.5端口会同步输出时钟脉冲</p>
<p>时钟周期设置</p>
<p>时钟周期指的是1秒钟执行多少次timer中断。</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">时</mi><mi mathvariant="normal">钟</mi><mi mathvariant="normal">周</mi><mi mathvariant="normal">期</mi><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">钟</mi><mi mathvariant="normal">源</mi><mi mathvariant="normal">频</mi><mi mathvariant="normal">率</mi></mrow><annotation encoding="application/x-tex">时钟周期=1/时钟源频率</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">钟</span><span class="mord cjk_fallback">周</span><span class="mord cjk_fallback">期</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">钟</span><span class="mord cjk_fallback">源</span><span class="mord cjk_fallback">频</span><span class="mord cjk_fallback">率</span></span></span></span></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TIM_InitStructure.TIM_Value     = <span class="number">65536UL</span> - (MAIN_Fosc / <span class="number">10000UL</span>);</span><br></pre></td></tr></table></figure>
<p>以上配置中，TIM_InitStructure.TIM_Value最终会转化位寄存器配置。</p>
<p>其中，10000UL表示的就是时钟周期，意思就是这个timer回调1秒钟要调用 10000次。</p>
<p>注意时钟周期的取值范围，通过以上数学公式，(MAIN_Fosc / 时钟周期)不能大于65536UL;理论上时钟周期可以无限大，经过测试，最大值为500000UL,也就是2us调用1次。但是，我们要考虑到，如果timer设置到这么高的频率，你在回调中执行的代码时长就不能超过这个值。如果是24M主频，1个时钟周期为 1/24MHz=41.67ns，但是一个指令通常由多个时钟周期组成，一段代码又由多个指令组成，这么一算，可做的操作就很少了。因此我们不要设置得那么大。</p>
<p>启动配置</p>
<p>配置定时器的启动</p>
<p>练习题</p>
<p>1配置timer控制IO输出：让P53灯每500ms切换一次亮灭</p>
<p>2配置timer控制UART接收：在Timer中断函数中接收并处理UART消息</p>
]]></content>
  </entry>
  <entry>
    <title>库函数</title>
    <url>/%E5%BA%93%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="库函数"><a class="markdownIt-Anchor" href="#库函数"></a> 库函数</h1>
<p>学习目标</p>
<p>1理解为什么需要学习库函数</p>
<p>2掌握基于库函数开发的流程</p>
<p>3掌握常用的库函数进行IO操作</p>
<p>学习内容</p>
<p>开发过程回顾</p>
<p>以点灯为例，我们的开发步骤可以简略的分为以下步骤：</p>
<p>1查看原理图，找到控制灯的引脚。</p>
<p>2查看芯片手册，对灯的引脚进行工作模式配置，并且控制引脚的高低电平。</p>
<p>其中，第一点是开发板设计范畴，第二点是代码编写范畴，我们此时讨论第二点。</p>
<p>我们可以详细的认为，我们的开发是面向芯片手册进行的，如果换了一个芯片，需要查看新的芯片手册进行开发。</p>
<p>这里有什么含义呢？</p>
<p>●代码中的 #include &lt;STC8H.H&gt;需要切换成对应的芯片头</p>
<p>●我们要查阅新的芯片手册进行工作模式配置，可能配置的参数和现在有很大的区别。</p>
<p>其实我们面向芯片手册开发也可以称之为面向寄存器开发，通过配置寄存器来完成功能。一个芯片中的寄存器众多，都写在了手册中，我们需要通过手册一一的查看，并且进行功能开发。</p>
<p>我们不妨回过头来看看，即使是STC8H.H这个文件中，也都是配置的寄存器地址，是芯片厂商提供出来的，如果芯片厂商偷懒，不提供这个头文件，那么我就要通过芯片手册，自己来去定义端口功能等等寄存器对应的功能了。</p>
<p>不妨我们还是来点个灯，在没有头文件的情况下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sfr		P5M1 	= <span class="number">0xC9</span>;</span><br><span class="line">sfr		P5M0 	= <span class="number">0xCA</span>;</span><br><span class="line">sfr		P5 		= <span class="number">0xC8</span>;</span><br><span class="line">sbit	P53		= P5^<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay1000ms</span><span class="params">()</span>		<span class="comment">//@11.0592MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">	i = <span class="number">57</span>;</span><br><span class="line">	j = <span class="number">27</span>;</span><br><span class="line">	k = <span class="number">112</span>;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span> (--k);</span><br><span class="line">		&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">	&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//P5M1 &amp;= ~0x08,	P5M0 &amp;= ~0x08; //准双向口</span></span><br><span class="line">	P5M1 &amp;= ~<span class="number">0x08</span>,	P5M0 |=  <span class="number">0x08</span>; <span class="comment">//推挽输出</span></span><br><span class="line">	<span class="comment">//P5M1 |=  0x08,	P5M0 &amp;= ~0x08; //高阻输入</span></span><br><span class="line">	<span class="comment">//P5M1 |=  0x08,	P5M0 |=  0x08; //开漏输出</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">		P53 = <span class="number">1</span>;<span class="comment">//开</span></span><br><span class="line">		Delay1000ms();</span><br><span class="line">		P53 = <span class="number">0</span>;<span class="comment">//关</span></span><br><span class="line">		Delay1000ms();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sfr和sbit和关键字：</p>
<p>●在 C51 中，sfr 和 sbit 是两个关键字，它们可以用来定义特殊功能寄存器 (SFR) 和位 (Bit)。</p>
<p>●SFR (Special Function Register) 即特殊功能寄存器，是单片机内部特定功能模块所对应的寄存器。例如，端口寄存器、定时器/计数器寄存器、串行口寄存器等。这些寄存器通过 sfr 关键字来定义。</p>
<p>●Bit 是指特定寄存器中的某一位。在 C51 中，可以用 sbit 关键字来定义一个 Bit。</p>
<p>●sfr 和 sbit 可以在程序中用来对单片机的特定功能寄存器和位进行访问和控制，使用起来比直接操作寄存器更加方便和直观。</p>
<p>使用库函数点灯</p>
<p>1导入库函数。</p>
<p>下载STC8H的库函数代码。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678957349970-cd723086-d236-4bc1-a26f-649e56b3c56c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_41%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1424%2Climit_0" alt="17.png" /></p>
<p>来到库函数的目录下，拷贝以下文件：</p>
<p>○STC8xxxx.H</p>
<p>○config.h</p>
<p>○GPIO.h</p>
<p>○GPIO.C</p>
<p>2新建项目，将拷贝的4个文件放到项目目录中。</p>
<p>新建main.c</p>
<p>将库函数加入到项目中</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678958551531-03720aa2-3cb3-4c25-a9cf-52992bbc50e0.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="18.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678958560633-2b865454-b19b-4eff-9e47-ac9085a13242.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_22%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="19.png" /></p>
<p>添加完成后，我们可以看到，GPIO.c在目录中</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678958647643-2dd1669e-a188-45d6-b8e0-d332dd0d72af.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_15%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="20.png" /></p>
<p>3在main.c进行LED的开关控制</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_3;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_PullUp;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P5, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay1000ms</span><span class="params">()</span>		<span class="comment">//@24.000MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">	_nop_();</span><br><span class="line">	_nop_();</span><br><span class="line">	i = <span class="number">122</span>;</span><br><span class="line">	j = <span class="number">193</span>;</span><br><span class="line">	k = <span class="number">128</span>;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span> (--k);</span><br><span class="line">		&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">	&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	GPIO_config();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">		P53 = <span class="number">1</span>;</span><br><span class="line">		Delay1000ms();</span><br><span class="line">		P53 = <span class="number">0</span>;</span><br><span class="line">		Delay1000ms();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>什么是库函数?</p>
<p>库函数是一组已经封装好的程序，提供给开发者调用使用。这些函数通常是由语言的开发者或第三方库编写的，实现了一些通用的功能，如IO、PWM、串口、Timer等，可以让开发者无需重复编写这些功能，而是直接调用库函数即可。这样可以提高开发效率、减少重复代码的编写、降低程序出错的可能性，并且可以让代码更加易于维护和扩展。许多编程语言都有自带的库函数，同时也可以通过引入第三方库来扩展其功能。</p>
<p>面向库函数和面向寄存器开发</p>
<p>1简化编程难度：使用库函数可以使编程更加简单，减少编程错误的可能性。</p>
<p>2提高可读性：库函数名字通常比寄存器名称更加直观，更容易理解。</p>
<p>3节省时间：使用库函数可以节省编程时间，因为库函数已经被编写和测试过，可以直接调用使用，而无需重新编写和测试代码。</p>
<p>4更加可移植：使用库函数可以增加代码的可移植性，因为库函数已经被开发和测试过，可以在不同的硬件平台上使用，而无需进行大量的修改。</p>
<p>5更加安全：使用库函数可以减少编程错误，例如溢出、死循环等问题，从而使程序更加安全可靠。</p>
<p>当然，在某些情况下，使用寄存器操作可能更加高效，例如在对时间要求比较高的嵌入式系统中，需要最大程度地减少代码运行时间。因此，要根据实际情况来选择使用库函数还是直接寄存器操作。</p>
<p>使用delay模块延时</p>
<p>1拷贝库函数中delay.c和delay.h到工程</p>
<p>2引用头文件delay.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br></pre></td></tr></table></figure>
<p>3进行延时操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">delay_ms(<span class="number">250</span>); <span class="comment">// 延时250毫秒</span></span><br></pre></td></tr></table></figure>
<p>练习题</p>
<p>1使用库函数实现点灯</p>
<p>2使用库函数的Delay模块</p>
]]></content>
  </entry>
  <entry>
    <title>数码管</title>
    <url>/%E6%95%B0%E7%A0%81%E7%AE%A1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数码管"><a class="markdownIt-Anchor" href="#数码管"></a> 数码管</h1>
<p>学习目标</p>
<p>1理解数码管电路原理</p>
<p>2理解74HC595移位寄存器原理</p>
<p>3了解74HC595移位寄存器电路设计</p>
<p>4加强二进制操作</p>
<p>5驱动74HC595移位寄存器控制数码管</p>
<p>学习内容</p>
<p>数码管结构</p>
<p>共阴与共阳</p>
<p>共阳数码管是指将所有发光二极管的阳极接到一起，形成公共阳极（COM）的数码管，共阳数码管在应用的时候，应该将 COM 端口接到正极，当某一段发光二极管的阴极为低电平的时候，相对应的段就点亮，当某一字段的阴极为高电平的时候，相对应段就不亮。</p>
<p>1位数码管</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669604412157-8c33feed-f853-45a4-a50c-f1ef339d7d12.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128105958.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669607780459-1bd14482-358d-4f97-a6c9-5b5bfeb29aa1.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_55%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128115607.png" /></p>
<p>2位数码管</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669604309404-17f70805-1619-4d6f-b4a2-18b56644d47c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_15%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128105822.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669608453153-10c37b28-99ce-4095-b424-696e2db16939.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_30%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128120713.png" /></p>
<p>4位数码管</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669604061516-d6194d35-88b9-49cd-8ee9-b208a0c74da7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_44%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128105410.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669608971316-48c28fc5-16ac-4f9b-aad4-04f0db2f9f55.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_57%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128121600.png" /></p>
<p>移位寄存器</p>
<p>74HC595 是一款 8 位 CMOS 移位寄存器。8 位并行输出端口为可控的三态输出，一 个串行输出端口，可以实现多级芯片串行控制，组成 8n 位（n 为芯片数量）并行输  。</p>
<p>优点：通过逻辑操作来控制LED的状态，少量的引脚控制更多的状态。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669604412157-8c33feed-f853-45a4-a50c-f1ef339d7d12.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128105958.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669613133672-1ae7b249-5da1-465a-85c6-16a58db32249.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_30%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128132522.png" /></p>
<p>原理图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689020680059-bd8a76ac-85d1-4973-88c0-2e820e414193.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_45%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
<p>移位寄存器数据流程</p>
<p>移位寄存器的引脚：</p>
<p>1LATCH_CLOCK:  锁存时钟</p>
<p>2SHIFT_CLOCK: 移位时钟</p>
<p>3A:  数据输入信号管脚</p>
<p>4QA~QH: 数据信号转化出来的高低电平</p>
<p>5SQH: 串行数据输出管脚</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679543002928-356ea502-bf0d-4216-b4c1-1c462c97936d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_55%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="63.png" /></p>
<p>上图帮我们认识了几个管脚的作用：</p>
<p>●A：数据信号输入</p>
<p>●QA~QH: 高低电平输出</p>
<p>同时再次加深了我们对74HC595功能的理解：将数据转换为高低电平的一个工具</p>
<p>移位寄存器控制流程</p>
<p>数量流程中，数据变成高低电平过程清楚了。但是数据是给到芯片的，给这个过程是比较讲究的。</p>
<p>也就是我们传统说法，要按照规矩来传递数据。数据传递是要通过协议的。</p>
<p>我们通过 数据输入信号管脚(原理图上标记为A)来输入数据。我们必须清楚的知道，一个引脚给数据，其实就是给高低电平信号，一个高低电平信号只能表示一个bit，而我们又8给输出口，理论上需要给8次高低电平才能满足8个端口的输出要求。但是如何去界定8给高低电平呢，就需要用时间去界定。提供了两个引脚：</p>
<p>1LATCH_CLOCK:  锁存时钟引脚</p>
<p>2SHIFT_CLOCK: 移位时钟引脚</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689019963991-06a459ee-4900-4a09-a04a-7182386481a9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_41%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p>
<p>移位：由低电平变为高电平，表示记录一个位的电平。</p>
<p>锁存：由低电平变为高电平，表示将记录的数据应用到电路中。</p>
<p>移位寄存器串联</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689020175803-ba464ddf-006f-4a55-8cb4-524d4338e0a2.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p>
<p>本案例中是有两个移位寄存器U1和U2的。分别关注两个移位寄存器的A和SQH.</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689020343869-f85185c9-03cd-42c4-8755-7f2f37cf45f0.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_29%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p>
<p>通过流程我们可以明确以下结论:</p>
<p>1移位寄存器通过A输入数据</p>
<p>2移位寄存器通过SQH输出数据</p>
<p>3两个移位寄存器通过将一个的SQH输出到另外一个的输入A口，两个移位寄存器就串联了</p>
<p>4末端的移位寄存器输出口悬空表示不输出</p>
<p>5数据会传递到末端，也就是数据会先填充的是末端。</p>
<p>串联后控制流程需要有所改变，改变如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689020414801-39cc738d-9b16-4a65-830c-7a8f96111ff2.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_42%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689047275493-66741e6f-2aaf-4acf-b49b-371981639cd8.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_37%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p>
<p>●Logic分析仪</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689046464727-036674c8-17e8-4e4d-a97c-698bd0f5bed7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_36%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p>
<p>●Digtals</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689047348553-e37ed05c-1bfc-4805-b73a-5b9ba1885d25.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_41%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p>
<p>实现数码管显示</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据输入</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIX_DI	P44</span></span><br><span class="line"><span class="comment">// 移位</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIX_SCK	P42</span></span><br><span class="line"><span class="comment">// 锁存</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	NIX_RCK	P43</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_OUT_PP;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P4, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	u8 i, dat, idx;</span><br><span class="line">	GPIO_config();</span><br><span class="line">	EA = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//dat = 0b01010101;	决定显示的数字内容</span></span><br><span class="line">	dat = <span class="number">0xF9</span>;</span><br><span class="line">	<span class="comment">//idx = 0b00000001;	决定显示哪几位</span></span><br><span class="line">	idx = <span class="number">0x04</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="comment">//位输入 &gt; 0 的值可以统一认作1</span></span><br><span class="line">			NIX_DI = (dat &amp; (<span class="number">1</span> &lt;&lt; i));</span><br><span class="line">			<span class="comment">// 移位操作</span></span><br><span class="line">			NIX_SCK = <span class="number">0</span>;</span><br><span class="line">			NOP2();</span><br><span class="line">			NIX_SCK = <span class="number">1</span>;</span><br><span class="line">			NOP2();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="comment">//位输入 &gt; 0 的值可以统一认作1</span></span><br><span class="line">			NIX_DI = (idx &amp; (<span class="number">1</span> &lt;&lt; i));</span><br><span class="line">			<span class="comment">// 移位操作</span></span><br><span class="line">			NIX_SCK = <span class="number">0</span>;</span><br><span class="line">			NOP2();</span><br><span class="line">			NIX_SCK = <span class="number">1</span>;</span><br><span class="line">			NOP2();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 锁存</span></span><br><span class="line">		<span class="comment">// 移位操作</span></span><br><span class="line">		NIX_RCK = <span class="number">0</span>;</span><br><span class="line">		NOP2();</span><br><span class="line">		NIX_RCK = <span class="number">1</span>;</span><br><span class="line">		NOP2();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>练习题</p>
<p>1实现数码管数字显示</p>
<p>2通过串口控制数码管显示（串口指令，两个字节，一个控制显示，一个控制哪一个灯显示）</p>
]]></content>
  </entry>
  <entry>
    <title>数码管2</title>
    <url>/%E6%95%B0%E7%A0%81%E7%AE%A12.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数码管2"><a class="markdownIt-Anchor" href="#数码管2"></a> 数码管2</h1>
<p>学习目标</p>
<p>1理解自定义码表</p>
<p>2数码管驱动封装</p>
<p>3掌握数字走马灯实现</p>
<p>学习内容</p>
<p>驱动封装</p>
<p>根据前面的内容可以将代码进行封装，封装后作为一个独立的整体出现：</p>
<p>Nixie.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __NIXIE_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __NIXIE_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据输入</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIX_DI	P44</span></span><br><span class="line"><span class="comment">// 移位</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIX_SCK	P42</span></span><br><span class="line"><span class="comment">// 锁存</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	NIX_RCK	P43</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIX_DI_INIT()	&#123;P4M1 &amp;=~ 0x10,	P4M0 &amp;= ~0x10;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIX_SCK_INIT()	&#123;P4M1 &amp;=~ 0x04,	P4M0 &amp;= ~0x04;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIX_RCK_INIT()	&#123;P4M1 &amp;=~ 0x08,	P4M0 &amp;= ~0x08;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie_display</span><span class="params">(u8 index, u8 dat)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>●定义 Nixie_init() 函数，负责对GPIO相关的初始化</p>
<p>●定义 Nixie_display()函数负责显示</p>
<p>Nixie.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Nixie.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	NIX_DI_INIT();</span><br><span class="line">	NIX_SCK_INIT();</span><br><span class="line">	NIX_RCK_INIT();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Nixie_out</span><span class="params">(u8 d)</span> </span>&#123;</span><br><span class="line">	u8 i;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="comment">//位输入</span></span><br><span class="line">		NIX_DI = (d &amp; (<span class="number">1</span> &lt;&lt; i));</span><br><span class="line">		<span class="comment">// 移位操作</span></span><br><span class="line">		NIX_SCK = <span class="number">0</span>;</span><br><span class="line">		NOP2();</span><br><span class="line">		NIX_SCK = <span class="number">1</span>;</span><br><span class="line">		NOP2();</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie_display</span><span class="params">(u8 index, u8 dat)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 显示数字</span></span><br><span class="line">	Nixie_out(dat);</span><br><span class="line">	<span class="comment">// 在哪个上显示</span></span><br><span class="line">	Nixie_out(index);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 锁存</span></span><br><span class="line">	NIX_RCK = <span class="number">0</span>;</span><br><span class="line">	NOP2();</span><br><span class="line">	NIX_RCK = <span class="number">1</span>;</span><br><span class="line">	NOP2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上为Nixie.h的实现，也是对之前代码的封装处理。</p>
<p>main.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Nixie.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	u8 dat, idx;</span><br><span class="line">	Nixie_init();</span><br><span class="line">	EA = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//dat = 0b01010101;</span></span><br><span class="line">	dat = <span class="number">0xF9</span>;</span><br><span class="line">	<span class="comment">//idx = 0b00000001</span></span><br><span class="line">	idx = <span class="number">0x04</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">		Nixie_display(idx, dat);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上为 main.c中使用我们封装的驱动。以上代码就会很简洁。</p>
<p>封装的一些疑问</p>
<p>封装的特点</p>
<p>封装是面向对象程序设计中的一个重要概念，它将数据和行为封装在一起，形成一个独立的单元。下面是封装的特点：</p>
<p>1数据隐藏：封装可以隐藏数据，只对外界公开必要的接口，从而保证数据的安全性和可靠性。</p>
<p>2接口统一：封装可以将数据和行为组织在一起，形成一个类或对象，通过统一的接口对外提供服务，便于使用和管理。</p>
<p>3信息隐藏：封装可以隐藏实现细节，只对外界公开必要的信息，从而降低了程序的复杂度和耦合度，提高了程序的可维护性和可扩展性。</p>
<p>4可重用性：封装可以将数据和行为封装成一个独立的单元，便于复用和重复利用，提高了程序的开发效率和代码的可重用性。</p>
<p>5封装和继承相结合：封装和继承是面向对象程序设计中的两个重要概念，它们相互配合，可以构建出更加复杂、灵活和可扩展的程序。</p>
<p>总之，封装是面向对象程序设计的核心思想之一，它可以提高程序的可靠性、安全性、可维护性和可扩展性，是程序设计中不可或缺的重要概念。</p>
<p>当前设计问题</p>
<p>接口设计：定义初始化(Nixie_init)，和具体功能(Nixie_display)，初始化和芯片开发板设计相关，功能的定义和业务相关。</p>
<p>初始化问题：为什么不用库函数？首先是可以使用库函数的。观察使用库函数和不是库函数的区别。一个初始化写在头文件，一个写在c文件。c文件是实现，做到抛开平台相关是最好的方案，也就是换了芯片平台，实现不动，通过改变头中的配置，就可以做到移植。（当然，理想状态是这样的，还得看实现复杂度。目标明确，尽量做到这个，为移植提供最少变化方案，这个是共识）</p>
<p>自定义码表</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669604412157-8c33feed-f853-45a4-a50c-f1ef339d7d12.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128105958.png" /></p>
<table>
<thead>
<tr>
<th>索引</th>
<th>显示值</th>
<th>导通管脚</th>
<th>共阳</th>
<th>共阴</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>二进制</td>
<td>16进制</td>
<td>二进制</td>
<td>16进制</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>，，F，E，D，C，B，A</td>
<td>1100 0000</td>
<td>0xC0</td>
<td>0011 1111</td>
<td>0x3F</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>， ，，，，C，B，</td>
<td>1111 1001</td>
<td>0xF9</td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>，G，，E，D，，B，A</td>
<td>1010 0100</td>
<td>0xA4</td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>3</td>
<td>，G，，，D，C，B，A</td>
<td>1011 0000</td>
<td>0xB0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>4</td>
<td>，G，F，，，C，B，</td>
<td>1001 1001</td>
<td>0x99</td>
<td></td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>5</td>
<td>，G，F，，D，C，，A</td>
<td>1001 0010</td>
<td>0x92</td>
<td></td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>6</td>
<td>，G，F，E，D，C，，A</td>
<td>1000 0010</td>
<td>0x82</td>
<td></td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>7</td>
<td>，，，，，C，B，A</td>
<td>1111 1000</td>
<td>0xF8</td>
<td></td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>8</td>
<td>，G，F，E，D，C，B，A</td>
<td>1000 0000</td>
<td>0x80</td>
<td></td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>9</td>
<td>，G，F，，D，C，B，A</td>
<td>1001 0000</td>
<td>0x90</td>
<td></td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>0.</td>
<td>DP，，F，E，D，C，B，A</td>
<td>0100 0000</td>
<td>0x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>11</td>
<td>1.</td>
<td>DP ， ，，，，C，B，</td>
<td>0111 1001</td>
<td>0x79</td>
<td></td>
<td></td>
</tr>
<tr>
<td>12</td>
<td>2.</td>
<td>DP，G，，E，D，，B，A</td>
<td>0010 0100</td>
<td>0x24</td>
<td></td>
<td></td>
</tr>
<tr>
<td>13</td>
<td>3.</td>
<td>DP，G，，，D，C，B，A</td>
<td>0011 0000</td>
<td>0x30</td>
<td></td>
<td></td>
</tr>
<tr>
<td>14</td>
<td>4.</td>
<td>DP，G，F，，，C，B，</td>
<td>0001 1001</td>
<td>0x19</td>
<td></td>
<td></td>
</tr>
<tr>
<td>15</td>
<td>5.</td>
<td>DP，G，F，，D，C，，A</td>
<td>0001 0010</td>
<td>0x12</td>
<td></td>
<td></td>
</tr>
<tr>
<td>16</td>
<td>6.</td>
<td>DP，G，F，E，D，C，，A</td>
<td>0000 0010</td>
<td>0x02</td>
<td></td>
<td></td>
</tr>
<tr>
<td>17</td>
<td>7.</td>
<td>DP，，，，，C，B，A</td>
<td>0111 1000</td>
<td>0x78</td>
<td></td>
<td></td>
</tr>
<tr>
<td>18</td>
<td>8.</td>
<td>DP，G，F，E，D，C，B，A</td>
<td>0000 0000</td>
<td>0x00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>19</td>
<td>9.</td>
<td>DP，G，F，，D，C，B，A</td>
<td>0001 0000</td>
<td>0x10</td>
<td></td>
<td></td>
</tr>
<tr>
<td>20</td>
<td>.</td>
<td>DP，，，，，，，</td>
<td>0111 1111</td>
<td>0x7F</td>
<td></td>
<td></td>
</tr>
<tr>
<td>21</td>
<td>-</td>
<td>，G，，，，，，</td>
<td>1011 1111</td>
<td>0xBF</td>
<td></td>
<td></td>
</tr>
<tr>
<td>22</td>
<td>A</td>
<td>，G，F，E，，C，B，A</td>
<td>1000 1000</td>
<td>0x88</td>
<td></td>
<td></td>
</tr>
<tr>
<td>23</td>
<td>b</td>
<td>，G，F，E，D，C，，</td>
<td>1000 0011</td>
<td>0x83</td>
<td></td>
<td></td>
</tr>
<tr>
<td>24</td>
<td>C</td>
<td>，，F，E，D，，，A</td>
<td>1100 0110</td>
<td>0xC6</td>
<td></td>
<td></td>
</tr>
<tr>
<td>25</td>
<td>d</td>
<td>，G，，E，D，C，B，</td>
<td>1010 0001</td>
<td>0xA1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>26</td>
<td>E</td>
<td>，G，F，E，D，，，A</td>
<td>1000 0110</td>
<td>0x86</td>
<td></td>
<td></td>
</tr>
<tr>
<td>27</td>
<td>F</td>
<td>，G，F，E，，，，A</td>
<td>1000 1110</td>
<td>0x8E</td>
<td></td>
<td></td>
</tr>
<tr>
<td>28</td>
<td>H</td>
<td>，G，F，E，，C，B，</td>
<td>1000 1001</td>
<td>0x89</td>
<td></td>
<td></td>
</tr>
<tr>
<td>29</td>
<td>J</td>
<td>，，，，D，C，B，</td>
<td>1111 0001</td>
<td>0xF1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>30</td>
<td>L</td>
<td>，，F，E，D，，，</td>
<td>1100 0111</td>
<td>0xC7</td>
<td></td>
<td></td>
</tr>
<tr>
<td>31</td>
<td>P</td>
<td>，G，F，E，，，B，A</td>
<td>1000 1100</td>
<td>0x8C</td>
<td></td>
<td></td>
</tr>
<tr>
<td>32</td>
<td>q</td>
<td>，G，F，，，C，B，A</td>
<td>1001 1000</td>
<td>0x98</td>
<td></td>
<td></td>
</tr>
<tr>
<td>33</td>
<td>U</td>
<td>，，F，E，D，C，B，</td>
<td>1100 0001</td>
<td>0xC1</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">u8 code LED_TABLE[] = </span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 0 	1	 2	-&gt; 9</span></span><br><span class="line">	<span class="number">0xC0</span>,<span class="number">0xF9</span>,<span class="number">0xA4</span>,<span class="number">0xB0</span>,<span class="number">0x99</span>,<span class="number">0x92</span>,<span class="number">0x82</span>,<span class="number">0xF8</span>,<span class="number">0x80</span>,<span class="number">0x90</span>,</span><br><span class="line">	<span class="comment">// 0  1. 2. -&gt; 9.</span></span><br><span class="line">  	<span class="number">0x64</span>,<span class="number">0x79</span>,<span class="number">0x24</span>,<span class="number">0x30</span>,<span class="number">0x19</span>,<span class="number">0x12</span>,<span class="number">0x02</span>,<span class="number">0x78</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,</span><br><span class="line">	<span class="comment">// . -</span></span><br><span class="line">	<span class="number">0x7F</span>, <span class="number">0xBF</span></span><br><span class="line">	<span class="comment">// AbCdEFHJLPqU</span></span><br><span class="line">	<span class="number">0x88</span>,<span class="number">0x83</span>,<span class="number">0xC6</span>,<span class="number">0xA1</span>,<span class="number">0x86</span>,<span class="number">0x8E</span>,<span class="number">0x89</span>,<span class="number">0xF1</span>,<span class="number">0xC7</span>,<span class="number">0x8C</span>,<span class="number">0x98</span>,<span class="number">0xC1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie_display</span><span class="params">(u8 index, u8 dat)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 显示数字</span></span><br><span class="line">	Nixie_out(LED_TABLE[dat]);</span><br><span class="line">	<span class="comment">// 在哪个上显示</span></span><br><span class="line">	Nixie_out((<span class="number">1</span> &lt;&lt; index));</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 锁存</span></span><br><span class="line">	NIX_RCK = <span class="number">0</span>;</span><br><span class="line">	NOP2();</span><br><span class="line">	NIX_RCK = <span class="number">1</span>;</span><br><span class="line">	NOP2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●index在没有封装前，一个bit表示一个灯。封装后表示灯的下标。这样设计符合人的思考习惯，函数就是让人调得舒服</p>
<p>●dat在没有封装前，是自己来总结灯的开灭，封装后表示自己定义的字符，通过下标访问。这样简化操作。还是为了调用舒服。</p>
<p>数字走马灯实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Nixie.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	u8 dat, idx, i;</span><br><span class="line">	Nixie_init();</span><br><span class="line">	EA = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>;i++) &#123;		</span><br><span class="line">			Nixie_display(i, i);</span><br><span class="line">			delay_ms(<span class="number">200</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●调整帧率来控制显示，达到走马灯的效果</p>
<p>扩展知识</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689020175803-ba464ddf-006f-4a55-8cb4-524d4338e0a2.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p>
<p>原理图中，大部分引脚我们已经知道了，但是还有些引脚功能不清楚。</p>
<p>●RESET： 10号引脚。</p>
<p>●OUTPUT_ENABLE: 13号引脚。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679629474932-54a38609-dde1-400a-9272-7d523b3a800b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_57%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="68.png" /></p>
<p>以上是芯片手册的管脚定义。</p>
<p>●10号引脚：SCLR，移位寄存器清零端。</p>
<p>●13号引脚：G，输出使能端。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679629671006-bebd4c64-5684-44bb-8496-2880459a53aa.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_58%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="69.png" /></p>
<p>以上是手册中的真值表。</p>
<p>我们的原理图中 10号引脚(SCLR)为 VCC 高电平，13号引脚(G)为GND 低电平。对照以上表，我们进行观察。</p>
<p>1如果有需求，我们可以控制SCLR引脚进行寄存器的清理，当然需要开发板中进行引脚设计。</p>
<p>2G引脚我们设置为GND（即低电平），如果配置为高电平，则不再亮灯输出。</p>
<p>串行输入并行输出</p>
<p>其实我们的 74hc595就是串行输入数据，然后并行输出信号的芯片。</p>
<p>并行输入串行输出</p>
<p>其实也有种需求，模拟信号需要变为二进制数据，那这种就需要并行输入串行输出。和74hc595正好相反。</p>
<p>目前常见的芯片有74HC165。协议解析方式按照芯片手册来，通常和74hc595相反。</p>
<p>练习题</p>
<p>1实现走马灯效果</p>
<p>2通过串口控制显示</p>
<p>3通过独立按键进行数码管显示控制</p>
]]></content>
  </entry>
  <entry>
    <title>模板代码📝</title>
    <url>/%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81%F0%9F%93%9D.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="模板代码"><a class="markdownIt-Anchor" href="#模板代码"></a> 模板代码📝</h1>
<p>程序结构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PWM.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;UART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    GPIO_config();</span><br><span class="line">    PWM_config();</span><br><span class="line">    UART_config();</span><br><span class="line">    TIMER_config();</span><br><span class="line">    EA = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>GPIO操作</p>
<p>初始化所有</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">P0M1 = <span class="number">0</span>; P0M0 = <span class="number">0</span>;</span><br><span class="line">P1M1 = <span class="number">0</span>; P1M0 = <span class="number">0</span>;</span><br><span class="line">P2M1 = <span class="number">0</span>; P2M0 = <span class="number">0</span>;</span><br><span class="line">P3M1 = <span class="number">0</span>; P3M0 = <span class="number">0</span>;</span><br><span class="line">P4M1 = <span class="number">0</span>; P4M0 = <span class="number">0</span>;</span><br><span class="line">P5M1 = <span class="number">0</span>; P5M0 = <span class="number">0</span>;</span><br><span class="line">P6M1 = <span class="number">0</span>; P6M0 = <span class="number">0</span>;</span><br><span class="line">P7M1 = <span class="number">0</span>; P7M0 = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>配置IO口</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_3;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_PullUp;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P5, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UART操作</p>
<p>要求配置EA = 1</p>
<p>初始化</p>
<p>UART1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    COMx_InitDefine		COMx_InitStructure;					<span class="comment">//结构定义</span></span><br><span class="line">    COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;	<span class="comment">//模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit_BRTx</span></span><br><span class="line">    COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;			<span class="comment">//选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使用BRT_Timer2)</span></span><br><span class="line">    COMx_InitStructure.UART_BaudRate  = <span class="number">115200ul</span>;			<span class="comment">//波特率, 一般 110 ~ 115200</span></span><br><span class="line">    COMx_InitStructure.UART_RxEnable  = ENABLE;				<span class="comment">//接收允许,   ENABLE或DISABLE</span></span><br><span class="line">    COMx_InitStructure.BaudRateDouble = DISABLE;			<span class="comment">//波特率加倍, ENABLE或DISABLE</span></span><br><span class="line">    COMx_InitStructure.UART_Interrupt = ENABLE;				<span class="comment">//中断允许,   ENABLE或DISABLE</span></span><br><span class="line">    COMx_InitStructure.UART_Priority  = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">    COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31;	<span class="comment">//切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44</span></span><br><span class="line">    UART_Configuration(UART1, &amp;COMx_InitStructure);		<span class="comment">//初始化串口1 UART1,UART2,UART3,UART4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UART2</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    COMx_InitDefine		COMx_InitStructure;					<span class="comment">//结构定义</span></span><br><span class="line">    COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;	<span class="comment">//模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit_BRTx</span></span><br><span class="line">    COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;			<span class="comment">//选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使用BRT_Timer2)</span></span><br><span class="line">    COMx_InitStructure.UART_BaudRate  = <span class="number">115200ul</span>;			<span class="comment">//波特率, 一般 110 ~ 115200</span></span><br><span class="line">    COMx_InitStructure.UART_RxEnable  = ENABLE;				<span class="comment">//接收允许,   ENABLE或DISABLE</span></span><br><span class="line">    COMx_InitStructure.BaudRateDouble = DISABLE;			<span class="comment">//波特率加倍, ENABLE或DISABLE</span></span><br><span class="line">    COMx_InitStructure.UART_Interrupt = ENABLE;				<span class="comment">//中断允许,   ENABLE或DISABLE</span></span><br><span class="line">    COMx_InitStructure.UART_Priority  = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">    COMx_InitStructure.UART_P_SW      = UART2_SW_P10_P11;	<span class="comment">//切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44</span></span><br><span class="line">    UART_Configuration(UART2, &amp;COMx_InitStructure);		<span class="comment">//初始化串口1 UART1,UART2,UART3,UART4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​	UART3</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    COMx_InitDefine		COMx_InitStructure;					<span class="comment">//结构定义</span></span><br><span class="line">    COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;	<span class="comment">//模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit_BRTx</span></span><br><span class="line">    COMx_InitStructure.UART_BRT_Use   = BRT_Timer3;			<span class="comment">//选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使用BRT_Timer2)</span></span><br><span class="line">    COMx_InitStructure.UART_BaudRate  = <span class="number">115200ul</span>;			<span class="comment">//波特率, 一般 110 ~ 115200</span></span><br><span class="line">    COMx_InitStructure.UART_RxEnable  = ENABLE;				<span class="comment">//接收允许,   ENABLE或DISABLE</span></span><br><span class="line">    COMx_InitStructure.BaudRateDouble = DISABLE;			<span class="comment">//波特率加倍, ENABLE或DISABLE</span></span><br><span class="line">    COMx_InitStructure.UART_Interrupt = ENABLE;				<span class="comment">//中断允许,   ENABLE或DISABLE</span></span><br><span class="line">    COMx_InitStructure.UART_Priority  = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">    COMx_InitStructure.UART_P_SW      = UART3_SW_P00_P01;	<span class="comment">//切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44</span></span><br><span class="line">    UART_Configuration(UART3, &amp;COMx_InitStructure);		<span class="comment">//初始化串口1 UART1,UART2,UART3,UART4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UART4</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    COMx_InitDefine		COMx_InitStructure;					<span class="comment">//结构定义</span></span><br><span class="line">    COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;	<span class="comment">//模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit_BRTx</span></span><br><span class="line">    COMx_InitStructure.UART_BRT_Use   = BRT_Timer4;			<span class="comment">//选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使用BRT_Timer2)</span></span><br><span class="line">    COMx_InitStructure.UART_BaudRate  = <span class="number">115200ul</span>;			<span class="comment">//波特率, 一般 110 ~ 115200</span></span><br><span class="line">    COMx_InitStructure.UART_RxEnable  = ENABLE;				<span class="comment">//接收允许,   ENABLE或DISABLE</span></span><br><span class="line">    COMx_InitStructure.BaudRateDouble = DISABLE;			<span class="comment">//波特率加倍, ENABLE或DISABLE</span></span><br><span class="line">    COMx_InitStructure.UART_Interrupt = ENABLE;				<span class="comment">//中断允许,   ENABLE或DISABLE</span></span><br><span class="line">    COMx_InitStructure.UART_Priority  = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">    COMx_InitStructure.UART_P_SW      = UART4_SW_P02_P03;	<span class="comment">//切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44</span></span><br><span class="line">    UART_Configuration(UART4, &amp;COMx_InitStructure);		<span class="comment">//初始化串口1 UART1,UART2,UART3,UART4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●UART_P_SW: 引脚</p>
<p>●UART_BRT_Use： 发生器</p>
<p>●UART_Configuration中的UART1</p>
<p>●UART_BaudRate：波特率</p>
<p>接收逻辑</p>
<p>UART1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(COM1.RX_TimeOut &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//超时计数</span></span><br><span class="line">    <span class="keyword">if</span>(--COM1.RX_TimeOut == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(COM1.RX_Cnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;COM1.RX_Cnt; i++)	&#123;</span><br><span class="line">                <span class="comment">// RX1_Buffer[i]存的是接收的数据，写出用 TX1_write2buff</span></span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> 做具体的逻辑 on_uart1_recv</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        COM1.RX_Cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UART2</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(COM2.RX_TimeOut &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//超时计数</span></span><br><span class="line">    <span class="keyword">if</span>(--COM2.RX_TimeOut == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(COM2.RX_Cnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;COM2.RX_Cnt; i++)	&#123;</span><br><span class="line">                <span class="comment">// RX2_Buffer[i]存的是接收的数据，写出用 TX2_write2buff</span></span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> 做具体的逻辑 on_uart2_recv</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        COM2.RX_Cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UART3</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(COM3.RX_TimeOut &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//超时计数</span></span><br><span class="line">    <span class="keyword">if</span>(--COM3.RX_TimeOut == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(COM3.RX_Cnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;COM3.RX_Cnt; i++)	&#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> RX3_Buffer[i]存的是接收的数据</span></span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> 做具体的逻辑 on_uart3_recv</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        COM3.RX_Cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UART4</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(COM4.RX_TimeOut &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//超时计数</span></span><br><span class="line">    <span class="keyword">if</span>(--COM4.RX_TimeOut == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(COM4.RX_Cnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;COM4.RX_Cnt; i++)	&#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> RX4_Buffer[i]存的是接收的数据</span></span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> 做具体的逻辑 on_uart4_recv</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        COM4.RX_Cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发送</p>
<p>UART1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TX1_write2buff(xx);<span class="comment">// 写一个byte</span></span><br><span class="line">PrintString1(<span class="string">&quot;&quot;</span>); <span class="comment">// 写字符串</span></span><br></pre></td></tr></table></figure>
<p>UART2</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TX2_write2buff(xx);<span class="comment">// 写一个byte</span></span><br><span class="line">PrintString2(<span class="string">&quot;&quot;</span>); <span class="comment">// 写字符串</span></span><br></pre></td></tr></table></figure>
<p>UART3</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TX3_write2buff(xx);<span class="comment">// 写一个byte</span></span><br><span class="line">PrintString3(<span class="string">&quot;&quot;</span>); <span class="comment">// 写字符串</span></span><br></pre></td></tr></table></figure>
<p>UART4</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TX4_write2buff(xx);<span class="comment">// 写一个byte</span></span><br><span class="line">PrintString4(<span class="string">&quot;&quot;</span>); <span class="comment">// 写字符串</span></span><br></pre></td></tr></table></figure>
<p>配置printf</p>
<p>UART1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">putchar</span> <span class="params">(<span class="keyword">char</span> dat)</span> </span>&#123;</span><br><span class="line">	TX1_write2buff(dat);</span><br><span class="line">	<span class="keyword">return</span> dat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UART2</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">putchar</span> <span class="params">(<span class="keyword">char</span> dat)</span> </span>&#123;</span><br><span class="line">	TX2_write2buff(dat);</span><br><span class="line">	<span class="keyword">return</span> dat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UART3</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">putchar</span> <span class="params">(<span class="keyword">char</span> dat)</span> </span>&#123;</span><br><span class="line">	TX3_write2buff(dat);</span><br><span class="line">	<span class="keyword">return</span> dat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UART4</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">putchar</span> <span class="params">(<span class="keyword">char</span> dat)</span> </span>&#123;</span><br><span class="line">	TX4_write2buff(dat);</span><br><span class="line">	<span class="keyword">return</span> dat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Timer操作</p>
<p>初始化</p>
<p>Timer0</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIMER_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	TIM_InitTypeDef		TIM_InitStructure;						<span class="comment">//结构定义</span></span><br><span class="line">	TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;	<span class="comment">//指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TIM_8BitAutoReload,TIM_16BitAutoReloadNoMask</span></span><br><span class="line">	TIM_InitStructure.TIM_Priority    = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">	TIM_InitStructure.TIM_Interrupt = ENABLE;					<span class="comment">//中断是否允许,   ENABLE或DISABLE</span></span><br><span class="line">	TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;		<span class="comment">//指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_Ext</span></span><br><span class="line">	TIM_InitStructure.TIM_ClkOut    = DISABLE;				<span class="comment">//是否输出高速脉冲, ENABLE或DISABLE</span></span><br><span class="line">	TIM_InitStructure.TIM_Value     = <span class="number">65536UL</span> - (MAIN_Fosc / <span class="number">1000UL</span>);		<span class="comment">//初值, 1s执行1000次,</span></span><br><span class="line">	TIM_InitStructure.TIM_Run       = ENABLE;					<span class="comment">//是否初始化后启动定时器, ENABLE或DISABLE</span></span><br><span class="line">	Timer_Inilize(Timer0,&amp;TIM_InitStructure);					<span class="comment">//初始化Timer0	  Timer0,Timer1,Timer2,Timer3,Timer4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Timer1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIMER_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	TIM_InitTypeDef		TIM_InitStructure;						<span class="comment">//结构定义</span></span><br><span class="line">	TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;	<span class="comment">//指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TIM_8BitAutoReload,TIM_16BitAutoReloadNoMask</span></span><br><span class="line">	TIM_InitStructure.TIM_Priority    = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">	TIM_InitStructure.TIM_Interrupt = ENABLE;					<span class="comment">//中断是否允许,   ENABLE或DISABLE</span></span><br><span class="line">	TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;		<span class="comment">//指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_Ext</span></span><br><span class="line">	TIM_InitStructure.TIM_ClkOut    = DISABLE;				<span class="comment">//是否输出高速脉冲, ENABLE或DISABLE</span></span><br><span class="line">	TIM_InitStructure.TIM_Value     = <span class="number">65536UL</span> - (MAIN_Fosc / <span class="number">1000UL</span>);		<span class="comment">//初值, 1s执行1000次,</span></span><br><span class="line">	TIM_InitStructure.TIM_Run       = ENABLE;					<span class="comment">//是否初始化后启动定时器, ENABLE或DISABLE</span></span><br><span class="line">	Timer_Inilize(Timer1,&amp;TIM_InitStructure);					<span class="comment">//初始化Timer0	  Timer0,Timer1,Timer2,Timer3,Timer4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Timer2</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIMER_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	TIM_InitTypeDef		TIM_InitStructure;						<span class="comment">//结构定义</span></span><br><span class="line">	TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;	<span class="comment">//指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TIM_8BitAutoReload,TIM_16BitAutoReloadNoMask</span></span><br><span class="line">	TIM_InitStructure.TIM_Priority    = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">	TIM_InitStructure.TIM_Interrupt = ENABLE;					<span class="comment">//中断是否允许,   ENABLE或DISABLE</span></span><br><span class="line">	TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;		<span class="comment">//指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_Ext</span></span><br><span class="line">	TIM_InitStructure.TIM_ClkOut    = DISABLE;				<span class="comment">//是否输出高速脉冲, ENABLE或DISABLE</span></span><br><span class="line">	TIM_InitStructure.TIM_Value     = <span class="number">65536UL</span> - (MAIN_Fosc / <span class="number">1000UL</span>);		<span class="comment">//初值, 1s执行1000次,</span></span><br><span class="line">	TIM_InitStructure.TIM_Run       = ENABLE;					<span class="comment">//是否初始化后启动定时器, ENABLE或DISABLE</span></span><br><span class="line">	Timer_Inilize(Timer2,&amp;TIM_InitStructure);					<span class="comment">//初始化Timer0	  Timer0,Timer1,Timer2,Timer3,Timer4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Timer3</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIMER_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	TIM_InitTypeDef		TIM_InitStructure;						<span class="comment">//结构定义</span></span><br><span class="line">	TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;	<span class="comment">//指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TIM_8BitAutoReload,TIM_16BitAutoReloadNoMask</span></span><br><span class="line">	TIM_InitStructure.TIM_Priority    = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">	TIM_InitStructure.TIM_Interrupt = ENABLE;					<span class="comment">//中断是否允许,   ENABLE或DISABLE</span></span><br><span class="line">	TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;		<span class="comment">//指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_Ext</span></span><br><span class="line">	TIM_InitStructure.TIM_ClkOut    = DISABLE;				<span class="comment">//是否输出高速脉冲, ENABLE或DISABLE</span></span><br><span class="line">	TIM_InitStructure.TIM_Value     = <span class="number">65536UL</span> - (MAIN_Fosc / <span class="number">1000UL</span>);		<span class="comment">//初值, 1s执行1000次,</span></span><br><span class="line">	TIM_InitStructure.TIM_Run       = ENABLE;					<span class="comment">//是否初始化后启动定时器, ENABLE或DISABLE</span></span><br><span class="line">	Timer_Inilize(Timer3,&amp;TIM_InitStructure);					<span class="comment">//初始化Timer0	  Timer0,Timer1,Timer2,Timer3,Timer4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Timer4</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIMER_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	TIM_InitTypeDef		TIM_InitStructure;						<span class="comment">//结构定义</span></span><br><span class="line">	TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;	<span class="comment">//指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TIM_8BitAutoReload,TIM_16BitAutoReloadNoMask</span></span><br><span class="line">	TIM_InitStructure.TIM_Priority    = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">	TIM_InitStructure.TIM_Interrupt = ENABLE;					<span class="comment">//中断是否允许,   ENABLE或DISABLE</span></span><br><span class="line">	TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;		<span class="comment">//指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_Ext</span></span><br><span class="line">	TIM_InitStructure.TIM_ClkOut    = DISABLE;				<span class="comment">//是否输出高速脉冲, ENABLE或DISABLE</span></span><br><span class="line">	TIM_InitStructure.TIM_Value     = <span class="number">65536UL</span> - (MAIN_Fosc / <span class="number">1000UL</span>);		<span class="comment">//初值, 1s执行1000次,</span></span><br><span class="line">	TIM_InitStructure.TIM_Run       = ENABLE;					<span class="comment">//是否初始化后启动定时器, ENABLE或DISABLE</span></span><br><span class="line">	Timer_Inilize(Timer4,&amp;TIM_InitStructure);					<span class="comment">//初始化Timer0	  Timer0,Timer1,Timer2,Timer3,Timer4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现中断函数</p>
<p>方式1：</p>
<p>修改timer.c实现中断函数的调用，并在main.c中声明实现timer0_call函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">timer0_call</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************* Timer0中断函数************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer0_int</span> <span class="params">(<span class="keyword">void</span>)</span> interrupt TIMER0_VECTOR</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   timer0_call();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式2：</p>
<p>直接在main.c中实现interrupt函数（记得删掉或注释掉timer.c中对应的中断函数）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer0_int</span> <span class="params">(<span class="keyword">void</span>)</span> interrupt TIMER0_VECTOR</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 根据Timer指定的周期执行此方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ADC操作</p>
<p>初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ADC_config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ADC_InitTypeDef		ADC_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">    ADC_InitStructure.ADC_SMPduty   = <span class="number">31</span>;		<span class="comment">//ADC 模拟信号采样时间控制, 0~31（注意： SMPDUTY 一定不能设置小于 10）</span></span><br><span class="line">    ADC_InitStructure.ADC_CsSetup   = <span class="number">0</span>;		<span class="comment">//ADC 通道选择时间控制 0(默认),1</span></span><br><span class="line">    ADC_InitStructure.ADC_CsHold    = <span class="number">1</span>;		<span class="comment">//ADC 通道选择保持时间控制 0,1(默认),2,3</span></span><br><span class="line">    ADC_InitStructure.ADC_Speed     = ADC_SPEED_2X1T;		<span class="comment">//设置 ADC 工作时钟频率	ADC_SPEED_2X1T~ADC_SPEED_2X16T</span></span><br><span class="line">    ADC_InitStructure.ADC_Power     = ENABLE;				<span class="comment">//ADC功率允许/关闭	ENABLE,DISABLE</span></span><br><span class="line">    ADC_InitStructure.ADC_AdjResult = ADC_RIGHT_JUSTIFIED;	<span class="comment">//ADC结果调整,	ADC_LEFT_JUSTIFIED,ADC_RIGHT_JUSTIFIED</span></span><br><span class="line">    ADC_InitStructure.ADC_Priority    = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">    ADC_InitStructure.ADC_Interrupt = DISABLE;			<span class="comment">//中断允许	ENABLE,DISABLE</span></span><br><span class="line">    ADC_Inilize(&amp;ADC_InitStructure);					<span class="comment">//初始化</span></span><br><span class="line">    ADC_PowerControl(ENABLE);							<span class="comment">//单独的ADC电源操作函数, ENABLE或DISABLE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">u16 result = Get_ADCResult(chn);</span><br></pre></td></tr></table></figure>
<p>通过参考电压计算电压</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> v = result * 基准电压 / 采样精度;</span><br></pre></td></tr></table></figure>
<p>●2.5为参考电压值，是实际情况而定</p>
<p>●基准电压：根据电路情况确定，基准电压芯片默认2.5V</p>
<p>●采样精度： 12位adc</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>1</mn></msup><mn>2</mn></mrow><annotation encoding="application/x-tex">2^12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord">2</span></span></span></span>=4096</p>
<p>PWM操作</p>
<p>初始化</p>
<p>PWMA</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PERIOD (MAIN_Fosc / 1000)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PWM_config</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PWMx_InitDefine		PWMx_InitStructure;</span><br><span class="line">    <span class="comment">// 总配置</span></span><br><span class="line">    PWMx_InitStructure.PWM_Period   		= PERIOD - <span class="number">1</span>;	<span class="comment">//周期时间,   0~65535</span></span><br><span class="line">    PWMx_InitStructure.PWM_DeadTime 		= <span class="number">0</span>;								<span class="comment">//死区发生器设置, 0~255</span></span><br><span class="line">    PWMx_InitStructure.PWM_EnoSelect		= ENO1P | ENO1N | ENO2P | ENO2N | ENO3P | ENO3N | ENO4P | ENO4N;	<span class="comment">//输出通道选择,	ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P</span></span><br><span class="line">    PWMx_InitStructure.PWM_PS_SW    		= PWM1_SW_P20_P21 | PWM2_SW_P22_P23 | PWM3_SW_P14_P15 | PWM4_SW_P26_P27;<span class="comment">//切换端口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体PWM端口配置</span></span><br><span class="line">	<span class="comment">// pwm1</span></span><br><span class="line">    PWMx_InitStructure.PWM1_Mode    		=	CCMRn_PWM_MODE2;	<span class="comment">//模式,		CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2</span></span><br><span class="line">    PWMx_InitStructure.PWM1_SetPriority		= Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">    PWMx_InitStructure.PWM1_Duty    		= <span class="number">0</span>;			<span class="comment">//PWM4占空比时间, 0~Period</span></span><br><span class="line">    <span class="comment">// pwm2</span></span><br><span class="line">    PWMx_InitStructure.PWM2_Mode    		=	CCMRn_PWM_MODE2;	<span class="comment">//模式,		CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2</span></span><br><span class="line">    PWMx_InitStructure.PWM2_SetPriority		= Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">    PWMx_InitStructure.PWM2_Duty    		= <span class="number">0</span>;			<span class="comment">//PWM4占空比时间, 0~Period</span></span><br><span class="line">    <span class="comment">// pwm3</span></span><br><span class="line">    PWMx_InitStructure.PWM3_Mode    		=	CCMRn_PWM_MODE2;	<span class="comment">//模式,		CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2</span></span><br><span class="line">    PWMx_InitStructure.PWM3_SetPriority		= Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">    PWMx_InitStructure.PWM3_Duty    		= <span class="number">0</span>;			<span class="comment">//PWM4占空比时间, 0~Period</span></span><br><span class="line">	<span class="comment">// pwm4</span></span><br><span class="line">    PWMx_InitStructure.PWM4_Mode    		=	CCMRn_PWM_MODE2;	<span class="comment">//模式,		CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2</span></span><br><span class="line">    PWMx_InitStructure.PWM4_SetPriority		= Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">    PWMx_InitStructure.PWM4_Duty    		= <span class="number">0</span>;			<span class="comment">//PWM4占空比时间, 0~Period</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// pwm1</span></span><br><span class="line">    PWMx_InitStructure.PWM_CC1Enable   = ENABLE;				<span class="comment">//开启PWM4P输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line">    PWMx_InitStructure.PWM_CC1NEnable  = ENABLE;				<span class="comment">//开启PWM4N输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line">	<span class="comment">// pwm2</span></span><br><span class="line">    PWMx_InitStructure.PWM_CC2Enable   = ENABLE;				<span class="comment">//开启PWM4P输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line">    PWMx_InitStructure.PWM_CC2NEnable  = ENABLE;				<span class="comment">//开启PWM4N输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line">	<span class="comment">// pwm3</span></span><br><span class="line">    PWMx_InitStructure.PWM_CC3Enable   = ENABLE;				<span class="comment">//开启PWM4P输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line">    PWMx_InitStructure.PWM_CC3NEnable  = ENABLE;				<span class="comment">//开启PWM4N输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line">	<span class="comment">// pwm4</span></span><br><span class="line">    PWMx_InitStructure.PWM_CC4Enable   = ENABLE;				<span class="comment">//开启PWM4P输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line">    PWMx_InitStructure.PWM_CC4NEnable  = ENABLE;				<span class="comment">//开启PWM4N输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// PWM启动配置</span></span><br><span class="line">    PWMx_InitStructure.PWM_MainOutEnable= ENABLE;				<span class="comment">//主输出使能, ENABLE,DISABLE</span></span><br><span class="line">    PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;				<span class="comment">//使能计数器, ENABLE,DISABLE</span></span><br><span class="line">    PWM_Configuration(PWMA, &amp;PWMx_InitStructure);				<span class="comment">//初始化PWM,  PWMA,PWMB</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>●总配置中的 PWM_Period, 配置周期计数。#define PERIOD (MAIN_Fosc / 1000) 1000 表示1s执行1000次。此处为计数值。</p>
<p>●PWM1_Duty表示占空比，1个周期中高电平或者低电平出现的百分比，此处为百分比的计数值。</p>
<p>PWMB</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PERIOD (MAIN_Fosc / 1000)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PWM_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    PWMx_InitDefine		PWMx_InitStructure;</span><br><span class="line">    <span class="comment">// 总配置</span></span><br><span class="line">    <span class="comment">// (MAIN_Fosc / 1000 - 1) 周期计数值</span></span><br><span class="line">    PWMx_InitStructure.PWM_Period   		= PERIOD - <span class="number">1</span>;	<span class="comment">//周期时间,   0~65535</span></span><br><span class="line">    PWMx_InitStructure.PWM_DeadTime 		= <span class="number">0</span>;								<span class="comment">//死区发生器设置, 0~255</span></span><br><span class="line">    PWMx_InitStructure.PWM_EnoSelect		= ENO6P;	<span class="comment">//输出通道选择,	ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P</span></span><br><span class="line">    PWMx_InitStructure.PWM_PS_SW    		= PWM6_SW_P01;<span class="comment">//切换端口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体PWM端口配置</span></span><br><span class="line">    <span class="comment">// pwm6</span></span><br><span class="line">    PWMx_InitStructure.PWM6_Mode    		= CCMRn_PWM_MODE1;	<span class="comment">//模式,		CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2</span></span><br><span class="line">    PWMx_InitStructure.PWM6_Duty    		= <span class="number">0</span>;			<span class="comment">//PWM4占空比时间, 0~Period</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// pwm6</span></span><br><span class="line">    PWMx_InitStructure.PWM_CC6Enable   = ENABLE;				<span class="comment">//开启PWM6P输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// PWM启动配置</span></span><br><span class="line">    PWMx_InitStructure.PWM_MainOutEnable= ENABLE;				<span class="comment">//主输出使能, ENABLE,DISABLE</span></span><br><span class="line">    PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;				<span class="comment">//使能计数器, ENABLE,DISABLE</span></span><br><span class="line">    PWM_Configuration(PWMB, &amp;PWMx_InitStructure);				<span class="comment">//初始化PWM,  PWMA,PWMB</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>I2C操作</p>
<p>初始化</p>
<p>GPIO初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_2 | GPIO_Pin_3;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_OUT_OD;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P3, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>I2C初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">I2C_config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	I2C_InitTypeDef		I2C_InitStructure;</span><br><span class="line">	I2C_InitStructure.I2C_Mode      = I2C_Mode_Master;	<span class="comment">//主从选择   I2C_Mode_Master, I2C_Mode_Slave</span></span><br><span class="line">	I2C_InitStructure.I2C_Enable    = ENABLE;						<span class="comment">//I2C功能使能,   ENABLE, DISABLE</span></span><br><span class="line">	I2C_InitStructure.I2C_MS_WDTA   = DISABLE;					<span class="comment">//主机使能自动发送,  ENABLE, DISABLE</span></span><br><span class="line">	I2C_InitStructure.I2C_MS_Interrupt = DISABLE;				<span class="comment">//使能主机模式中断,  ENABLE, DISABLE</span></span><br><span class="line">	I2C_InitStructure.I2C_Speed     = <span class="number">13</span>;								<span class="comment">//总线速度=Fosc/2/(Speed*2+4),      0~63</span></span><br><span class="line">	I2C_InitStructure.I2C_IoUse     = I2C_P33_P32;			<span class="comment">//IO口切换   I2C_P14_P15, I2C_P24_P25, I2C_P33_P32</span></span><br><span class="line"></span><br><span class="line">	I2C_Init(&amp;I2C_InitStructure);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>库函数修改</p>
<p>库函数不合理，添加自定义实现</p>
<p>I2C.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">I2C_WriteNbyte</span><span class="params">(u8 addr, u8 reg, u8 *p, u8 number)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">I2C_ReadNbyte</span><span class="params">( u8 addr, u8 reg, u8 *p, u8 number)</span></span>;</span><br></pre></td></tr></table></figure>
<p>I2C.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">I2C_WriteNbyte</span><span class="params">(u8 addr, u8 reg, u8 *p, u8 number)</span> </span>&#123;</span><br><span class="line">	EAXSFR();		<span class="comment">/* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展SFR(XSFR) */</span></span><br><span class="line">	Start();                                <span class="comment">//发送起始命令</span></span><br><span class="line">	SendData((addr &lt;&lt; <span class="number">1</span>));                         <span class="comment">//发送设备地址+写命令</span></span><br><span class="line">	RecvACK();</span><br><span class="line">	SendData(reg);                         <span class="comment">//发送存储地址</span></span><br><span class="line">	RecvACK();</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		SendData(*p++);</span><br><span class="line">		RecvACK();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(--number);</span><br><span class="line">	Stop();                                 <span class="comment">//发送停止命令</span></span><br><span class="line">	EAXRAM();		<span class="comment">/* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展RAM(XRAM) */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">I2C_ReadNbyte</span><span class="params">( u8 addr, u8 reg, u8 *p, u8 number)</span> </span>&#123;</span><br><span class="line">	EAXSFR();		<span class="comment">/* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展SFR(XSFR) */</span></span><br><span class="line">	Start();                                <span class="comment">//发送起始命令</span></span><br><span class="line">	SendData((addr &lt;&lt; <span class="number">1</span>));                         <span class="comment">//发送设备地址+写命令</span></span><br><span class="line">	RecvACK();</span><br><span class="line">	SendData(reg);                         <span class="comment">//发送存储地址</span></span><br><span class="line">	RecvACK();</span><br><span class="line">	Start();                                <span class="comment">//发送起始命令</span></span><br><span class="line">	SendData((addr &lt;&lt; <span class="number">1</span>) | <span class="number">0x01</span>);           <span class="comment">//发送设备地址+读命令</span></span><br><span class="line">	RecvACK();</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		*p = RecvData();</span><br><span class="line">		p++;</span><br><span class="line">		<span class="keyword">if</span>(number != <span class="number">1</span>) SendACK();          <span class="comment">//send ACK</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(--number);</span><br><span class="line">	SendNAK();                              <span class="comment">//send no ACK	</span></span><br><span class="line">	Stop();                                 <span class="comment">//发送停止命令</span></span><br><span class="line">	EAXRAM();		<span class="comment">/* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展RAM(XRAM) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>点亮第一盏灯</title>
    <url>/%E7%82%B9%E4%BA%AE%E7%AC%AC%E4%B8%80%E7%9B%8F%E7%81%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="点亮第一盏灯"><a class="markdownIt-Anchor" href="#点亮第一盏灯"></a> 点亮第一盏灯</h1>
<p>学习目标</p>
<p>●学习如何配置C51单片机的端口</p>
<p>●学习如何使用C语言编写控制LED的程序</p>
<p>●学习如何使用Keil C51编译和烧录程序</p>
<p>●掌握项目编写流程</p>
<p>学习准备</p>
<p>●黑马程序员STC8核心开发板</p>
<p>●C51的Keil 环境</p>
<p>学习内容</p>
<p>原理图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675785804430-0259b447-b5ef-4824-b330-cbf02bbe9d2a.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_31%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="01.png" /></p>
<p>通过控制 P5.3引脚输出高电平时，LED灯就点亮，输出低电平时LED灯就熄灭</p>
<p>需求实现</p>
<p>点亮或是熄灭LED</p>
<p>项目创建</p>
<p>1新建项目</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678938763856-40a1402c-acb1-4203-9dd3-c4ec69dd02fb.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_29%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="02.png" /></p>
<p>根据个人情况，选择合适的目录，创建项目</p>
<p>2配置开发板信息</p>
<p>配置设备信息：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678939036537-9ce8fb98-56d9-46de-8637-24f424a735b2.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_27%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="03.png" /></p>
<p>当前位STC芯片的开发板，选择STC MCU Database</p>
<p>搜素具体芯片型号，进行配置：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678939153535-2c6537b1-7920-459e-aedf-01a888d6fca0.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_27%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="04.png" /></p>
<p>黑马程序员的stc芯片位STC8H系列下的8K64U型号，选择对应型号即可。如果以后采用的是其他型号，则选择其他型号</p>
<p>3取消汇编配置，新建完成项目</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678939380589-37070a98-889a-4d61-a209-abc9f3a0316f.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_19%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="05.png" /></p>
<p>项目新建完成后，目录结构如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678939478296-a3d9bbd2-8acf-4454-83fd-da562941bb2e.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="06.png" /></p>
<p>●Target 1为项目根节点</p>
<p>●Source Group1为源码目录</p>
<p>●可根据个人喜好来修改他们的名称</p>
<p>编码实现</p>
<p>结构准备</p>
<p>在源码目录，右键打开操作面板，选择Add New Item to Group …</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678939762756-b4808ff2-7e61-47b2-9561-fa2141c9e040.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="07.png" /></p>
<p>新建main.c文件。根据面板提示，选择<code>C File</code>,确定好文件名称，当前的文件名称为<code>main</code>。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678939901149-ad5ba009-e2d7-4383-b000-d7b58c65f15b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_29%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="08.png" /></p>
<p>Add完成后，在源码目录中会多一个 main.c文件</p>
<p>代码实现</p>
<p>在 main.c中编写代码，实现main函数</p>
<p>点亮LED</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;STC8H.H&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    P5M0 = <span class="number">0x00</span>;</span><br><span class="line">    P5M1 = <span class="number">0x00</span>;</span><br><span class="line">	</span><br><span class="line">    P53 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>熄灭LED</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;STC8H.H&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    P5M0 = <span class="number">0x00</span>;</span><br><span class="line">    P5M1 = <span class="number">0x00</span>;</span><br><span class="line">	</span><br><span class="line">    P53 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译烧录运行</p>
<p>1如果没有配置编译输出，需要进行输出配置</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678940646959-7fe49f71-6ba1-4816-8003-7300ea5ca238.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_24%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="09.png" /></p>
<p>在Output中 勾选 Create HEX File</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678941403680-5da6f7d4-d351-410b-9959-3d683254f3ad.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_27%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="10.png" /></p>
<p>2保存与编译代码</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678941568253-26c1ae27-857f-4510-8ec4-0358f0efaa0e.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="11.png" /></p>
<p>编译完成后，来到项目创建的目录下的Objects目录中，会有一个以.hex结尾的二进制文件，这个文件就是编译的结果，也是需要进行烧录的二进制文件</p>
<p>3烧录</p>
<p>打开 STC-ISP工具，对烧录进行配置</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678945630656-79c2cd71-e75a-45ec-b0d1-9fc1c5519590.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1204%2Climit_0" alt="12.png" /></p>
<p>○芯片型号：根据当前开发板STC8型号进行确定，黑马程序员的STC8开发板采用的是STC8H8K64U</p>
<p>○串口：开发板和PC电脑通过USB进行连接后，会显示串口信息，选择对应的串口</p>
<p>点击下载/编程此时，烧录提示中显示 正在检测单片机…</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678946044284-13563039-99ce-44df-bf7e-cfc5f7145772.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1204%2Climit_0" alt="13.png" /></p>
<p>此时需要点击开发板中的蓝色按钮，进行烧录。</p>
]]></content>
  </entry>
  <entry>
    <title>热敏电阻</title>
    <url>/%E7%83%AD%E6%95%8F%E7%94%B5%E9%98%BB.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="热敏电阻"><a class="markdownIt-Anchor" href="#热敏电阻"></a> 热敏电阻</h1>
<p>学习目标</p>
<p>学习内容</p>
<p>NTC(Negative Temperature Coefficient)是指随温度上升电阻减小、具有负温度系数的热敏电阻现象和材料。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679935972816-c498f840-d799-429d-9ba0-0e96d62b4248.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_30%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="83.png" /></p>
<table>
<thead>
<tr>
<th>ADC功能</th>
<th>引脚</th>
</tr>
</thead>
<tbody>
<tr>
<td>ADC0</td>
<td>P1.0</td>
</tr>
<tr>
<td>ADC1</td>
<td>P1.1</td>
</tr>
<tr>
<td>ADC2</td>
<td>P5.4</td>
</tr>
<tr>
<td>ADC3</td>
<td>P1.3</td>
</tr>
<tr>
<td>ADC4</td>
<td>P1.4</td>
</tr>
<tr>
<td>ADC5</td>
<td>P1.5</td>
</tr>
<tr>
<td>ADC6</td>
<td>P1.6</td>
</tr>
<tr>
<td>ADC7</td>
<td>P1.7</td>
</tr>
<tr>
<td>ADC8</td>
<td>P0.0</td>
</tr>
<tr>
<td>ADC9</td>
<td>P0.1</td>
</tr>
<tr>
<td>ADC10</td>
<td>P0.2</td>
</tr>
<tr>
<td>ADC11</td>
<td>P0.3</td>
</tr>
<tr>
<td>ADC12</td>
<td>P0.4</td>
</tr>
<tr>
<td>ADC13</td>
<td>P0.5</td>
</tr>
<tr>
<td>ADC14</td>
<td>P0.6</td>
</tr>
</tbody>
</table>
<p>温度计算步骤</p>
<p>1通过ADC得到电压</p>
<p>∵4096<em>A<strong>D</strong>C</em><em><em>V</em>=2.5<em>V<strong>n</strong>t**c</em>∴<em>V<strong>n</strong>t**c</em>=2.5×4096<em>A<strong>D</strong>C</em></em><em>V</em></p>
<p>这里ADC_V就是通过ADC通道读到的数值，范围是0-4096</p>
<p>V_ntc即为对应的电压值</p>
<p>2通过欧姆定律得到阻值</p>
<p><em>X</em><em><em>r**V</em>−<em>n<strong>t</strong>c</em>=10<em>K</em>3.3−<em>V</em>−<em>n<strong>t</strong>c</em>=10<em>K</em>+<em>X</em></em><em>r</em>3.3</p>
<p>即整个线路上的电流是固定的，则热敏电阻的阻值X_r = V_ntc * 10 / (3.3 - V_ntc)</p>
<p>3通过阻值查表得到温度</p>
<p>根据阻值对照该热敏电阻提供的对照表，得到对应的温度值</p>
<p>热敏电阻与温度对照表</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1680230095472-72c9d21d-e679-4103-9e3b-522cd5d6488b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="NTC对照表.png" /></p>
<p>采用表的方式来记录 电阻值和温度的关系。</p>
<p>其中，表中记录的是阻值，下标记录的是温度。可以通过阻值比对，查询出下标，下标就是对应的温度。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">u16 code temp_table[]= &#123;</span><br><span class="line">	<span class="number">58354</span>, <span class="comment">// -55</span></span><br><span class="line">	<span class="number">55464</span>, <span class="comment">// -54</span></span><br><span class="line">	<span class="number">52698</span>, <span class="comment">// -53</span></span><br><span class="line">	<span class="number">50048</span>, <span class="comment">// -52</span></span><br><span class="line">	<span class="number">47515</span>, <span class="comment">// -51</span></span><br><span class="line">	<span class="number">45097</span>, <span class="comment">// -50</span></span><br><span class="line">	<span class="number">42789</span>, <span class="comment">// -49</span></span><br><span class="line">	<span class="number">40589</span>, <span class="comment">// -48</span></span><br><span class="line">	<span class="number">38492</span>, <span class="comment">// -47</span></span><br><span class="line">	<span class="number">36496</span>, <span class="comment">// -46</span></span><br><span class="line">	<span class="number">34597</span>, <span class="comment">// -45</span></span><br><span class="line">	<span class="number">32791</span>, <span class="comment">// -44</span></span><br><span class="line">	<span class="number">31075</span>, <span class="comment">// -43</span></span><br><span class="line">	<span class="number">29444</span>, <span class="comment">// -42</span></span><br><span class="line">	<span class="number">27896</span>, <span class="comment">// -41</span></span><br><span class="line">	<span class="number">26427</span>, <span class="comment">// -40</span></span><br><span class="line">	<span class="number">25034</span>, <span class="comment">// -39</span></span><br><span class="line">	<span class="number">23713</span>, <span class="comment">// -38</span></span><br><span class="line">	<span class="number">22460</span>, <span class="comment">// -37</span></span><br><span class="line">	<span class="number">21273</span>, <span class="comment">// -36</span></span><br><span class="line">	<span class="number">20148</span>, <span class="comment">// -35</span></span><br><span class="line">	<span class="number">19083</span>, <span class="comment">// -34</span></span><br><span class="line">	<span class="number">18075</span>, <span class="comment">// -33</span></span><br><span class="line">	<span class="number">17120</span>, <span class="comment">// -32</span></span><br><span class="line">	<span class="number">16216</span>, <span class="comment">// -31</span></span><br><span class="line">	<span class="number">15361</span>, <span class="comment">// -30</span></span><br><span class="line">	<span class="number">14551</span>, <span class="comment">// -29</span></span><br><span class="line">	<span class="number">13785</span>, <span class="comment">// -28</span></span><br><span class="line">	<span class="number">13061</span>, <span class="comment">// -27</span></span><br><span class="line">	<span class="number">12376</span>, <span class="comment">// -26</span></span><br><span class="line">	<span class="number">11728</span>, <span class="comment">// -25</span></span><br><span class="line">	<span class="number">11114</span>, <span class="comment">// -24</span></span><br><span class="line">	<span class="number">10535</span>, <span class="comment">// -23</span></span><br><span class="line">	<span class="number">9986</span>,  <span class="comment">// -22</span></span><br><span class="line">	<span class="number">9468</span>,  <span class="comment">// -21</span></span><br><span class="line">	<span class="number">8977</span>,  <span class="comment">// -20</span></span><br><span class="line">	<span class="number">8513</span>,  <span class="comment">// -19</span></span><br><span class="line">	<span class="number">8075</span>,  <span class="comment">// -18</span></span><br><span class="line">	<span class="number">7660</span>,  <span class="comment">// -17</span></span><br><span class="line">	<span class="number">7267</span>,  <span class="comment">// -16</span></span><br><span class="line">	<span class="number">6896</span>,  <span class="comment">// -15</span></span><br><span class="line">	<span class="number">6545</span>,  <span class="comment">// -14</span></span><br><span class="line">	<span class="number">6212</span>,  <span class="comment">// -13</span></span><br><span class="line">	<span class="number">5898</span>,  <span class="comment">// -12</span></span><br><span class="line">	<span class="number">5601</span>,  <span class="comment">// -11</span></span><br><span class="line">	<span class="number">5319</span>,  <span class="comment">// -10</span></span><br><span class="line">	<span class="number">5053</span>,  <span class="comment">// -9</span></span><br><span class="line">	<span class="number">4801</span>,  <span class="comment">// -8</span></span><br><span class="line">	<span class="number">4562</span>,  <span class="comment">// -7</span></span><br><span class="line">	<span class="number">4336</span>,  <span class="comment">// -6</span></span><br><span class="line">	<span class="number">4122</span>,  <span class="comment">// -5</span></span><br><span class="line">	<span class="number">3920</span>,  <span class="comment">// -4</span></span><br><span class="line">	<span class="number">3728</span>,  <span class="comment">// -3</span></span><br><span class="line">	<span class="number">3546</span>,  <span class="comment">// -2</span></span><br><span class="line">	<span class="number">3374</span>,  <span class="comment">// -1</span></span><br><span class="line">	<span class="number">3211</span>,  <span class="comment">// 0</span></span><br><span class="line">	<span class="number">3057</span>,  <span class="comment">// 1</span></span><br><span class="line">	<span class="number">2910</span>,  <span class="comment">// 2</span></span><br><span class="line">	<span class="number">2771</span>,  <span class="comment">// 3</span></span><br><span class="line">	<span class="number">2639</span>,  <span class="comment">// 4</span></span><br><span class="line">	<span class="number">2515</span>,  <span class="comment">// 5</span></span><br><span class="line">	<span class="number">2396</span>,  <span class="comment">// 6</span></span><br><span class="line">	<span class="number">2284</span>,  <span class="comment">// 7</span></span><br><span class="line">	<span class="number">2177</span>,  <span class="comment">// 8</span></span><br><span class="line">	<span class="number">2076</span>,  <span class="comment">// 9</span></span><br><span class="line">	<span class="number">1978</span>,  <span class="comment">// 10</span></span><br><span class="line">	<span class="number">1889</span>,  <span class="comment">// 11</span></span><br><span class="line">	<span class="number">1802</span>,  <span class="comment">// 12</span></span><br><span class="line">	<span class="number">1720</span>,  <span class="comment">// 13</span></span><br><span class="line">	<span class="number">1642</span>,  <span class="comment">// 14</span></span><br><span class="line">	<span class="number">1568</span>,  <span class="comment">// 15</span></span><br><span class="line">	<span class="number">1497</span>,  <span class="comment">// 16</span></span><br><span class="line">	<span class="number">1430</span>,  <span class="comment">// 17</span></span><br><span class="line">	<span class="number">1366</span>,  <span class="comment">// 18</span></span><br><span class="line">	<span class="number">1306</span>,  <span class="comment">// 19</span></span><br><span class="line">	<span class="number">1248</span>,  <span class="comment">// 20</span></span><br><span class="line">	<span class="number">1193</span>,  <span class="comment">// 21</span></span><br><span class="line">	<span class="number">1141</span>,  <span class="comment">// 22</span></span><br><span class="line">	<span class="number">1092</span>,  <span class="comment">// 23</span></span><br><span class="line">	<span class="number">1044</span>,  <span class="comment">// 24</span></span><br><span class="line">	<span class="number">1000</span>,  <span class="comment">// 25</span></span><br><span class="line">	<span class="number">957</span>,   <span class="comment">// 26</span></span><br><span class="line">	<span class="number">916</span>,   <span class="comment">// 27</span></span><br><span class="line">	<span class="number">877</span>,   <span class="comment">// 28</span></span><br><span class="line">	<span class="number">840</span>,   <span class="comment">// 29</span></span><br><span class="line">	<span class="number">805</span>,   <span class="comment">// 30</span></span><br><span class="line">	<span class="number">771</span>,   <span class="comment">// 31</span></span><br><span class="line">	<span class="number">739</span>,   <span class="comment">// 32</span></span><br><span class="line">	<span class="number">709</span>,   <span class="comment">// 33</span></span><br><span class="line">	<span class="number">679</span>,   <span class="comment">// 34</span></span><br><span class="line">	<span class="number">652</span>,   <span class="comment">// 35</span></span><br><span class="line">	<span class="number">625</span>,   <span class="comment">// 36</span></span><br><span class="line">	<span class="number">600</span>,   <span class="comment">// 37</span></span><br><span class="line">	<span class="number">576</span>,   <span class="comment">// 38</span></span><br><span class="line">	<span class="number">552</span>,   <span class="comment">// 39</span></span><br><span class="line">	<span class="number">530</span>,   <span class="comment">// 40</span></span><br><span class="line">	<span class="number">509</span>,   <span class="comment">// 41</span></span><br><span class="line">	<span class="number">489</span>,   <span class="comment">// 42</span></span><br><span class="line">	<span class="number">470</span>,   <span class="comment">// 43</span></span><br><span class="line">	<span class="number">452</span>,   <span class="comment">// 44</span></span><br><span class="line">	<span class="number">434</span>,   <span class="comment">// 45</span></span><br><span class="line">	<span class="number">417</span>,   <span class="comment">// 46</span></span><br><span class="line">	<span class="number">401</span>,   <span class="comment">// 47</span></span><br><span class="line">	<span class="number">386</span>,   <span class="comment">// 48</span></span><br><span class="line">	<span class="number">371</span>,   <span class="comment">// 49</span></span><br><span class="line">	<span class="number">358</span>,   <span class="comment">// 50</span></span><br><span class="line">	<span class="number">344</span>,   <span class="comment">// 51</span></span><br><span class="line">	<span class="number">331</span>,   <span class="comment">// 52</span></span><br><span class="line">	<span class="number">318</span>,   <span class="comment">// 53</span></span><br><span class="line">	<span class="number">306</span>,   <span class="comment">// 54</span></span><br><span class="line">	<span class="number">295</span>,   <span class="comment">// 55</span></span><br><span class="line">	<span class="number">284</span>,   <span class="comment">// 56</span></span><br><span class="line">	<span class="number">274</span>,   <span class="comment">// 57</span></span><br><span class="line">	<span class="number">264</span>,   <span class="comment">// 58</span></span><br><span class="line">	<span class="number">254</span>,   <span class="comment">// 59</span></span><br><span class="line">	<span class="number">245</span>,   <span class="comment">// 60</span></span><br><span class="line">	<span class="number">236</span>,   <span class="comment">// 61</span></span><br><span class="line">	<span class="number">228</span>,   <span class="comment">// 62</span></span><br><span class="line">	<span class="number">220</span>,   <span class="comment">// 63</span></span><br><span class="line">	<span class="number">212</span>,   <span class="comment">// 64</span></span><br><span class="line">	<span class="number">205</span>,   <span class="comment">// 65</span></span><br><span class="line">	<span class="number">198</span>,   <span class="comment">// 66</span></span><br><span class="line">	<span class="number">191</span>,   <span class="comment">// 67</span></span><br><span class="line">	<span class="number">184</span>,   <span class="comment">// 68</span></span><br><span class="line">	<span class="number">178</span>,   <span class="comment">// 69</span></span><br><span class="line">	<span class="number">172</span>,   <span class="comment">// 70</span></span><br><span class="line">	<span class="number">166</span>,   <span class="comment">// 71</span></span><br><span class="line">	<span class="number">160</span>,   <span class="comment">// 72</span></span><br><span class="line">	<span class="number">155</span>,   <span class="comment">// 73</span></span><br><span class="line">	<span class="number">150</span>,   <span class="comment">// 74</span></span><br><span class="line">	<span class="number">145</span>,   <span class="comment">// 75</span></span><br><span class="line">	<span class="number">140</span>,   <span class="comment">// 76</span></span><br><span class="line">	<span class="number">135</span>,   <span class="comment">// 77</span></span><br><span class="line">	<span class="number">131</span>,   <span class="comment">// 78</span></span><br><span class="line">	<span class="number">126</span>,   <span class="comment">// 79</span></span><br><span class="line">	<span class="number">122</span>,   <span class="comment">// 80</span></span><br><span class="line">	<span class="number">118</span>,   <span class="comment">// 81</span></span><br><span class="line">	<span class="number">115</span>,   <span class="comment">// 82</span></span><br><span class="line">	<span class="number">111</span>,   <span class="comment">// 83</span></span><br><span class="line">	<span class="number">107</span>,   <span class="comment">// 84</span></span><br><span class="line">	<span class="number">104</span>,   <span class="comment">// 85</span></span><br><span class="line">	<span class="number">101</span>,   <span class="comment">// 86</span></span><br><span class="line">	<span class="number">97</span>,    <span class="comment">// 87</span></span><br><span class="line">	<span class="number">94</span>,    <span class="comment">// 88</span></span><br><span class="line">	<span class="number">91</span>,    <span class="comment">// 89</span></span><br><span class="line">	<span class="number">89</span>,    <span class="comment">// 90</span></span><br><span class="line">	<span class="number">86</span>,    <span class="comment">// 91</span></span><br><span class="line">	<span class="number">83</span>,    <span class="comment">// 92</span></span><br><span class="line">	<span class="number">81</span>,    <span class="comment">// 93</span></span><br><span class="line">	<span class="number">78</span>,    <span class="comment">// 94</span></span><br><span class="line">	<span class="number">76</span>,    <span class="comment">// 95</span></span><br><span class="line">	<span class="number">74</span>,    <span class="comment">// 96</span></span><br><span class="line">	<span class="number">71</span>,    <span class="comment">// 97</span></span><br><span class="line">	<span class="number">69</span>,    <span class="comment">// 98</span></span><br><span class="line">	<span class="number">67</span>,    <span class="comment">// 99</span></span><br><span class="line">	<span class="number">65</span>,    <span class="comment">// 100</span></span><br><span class="line">	<span class="number">63</span>,    <span class="comment">// 101</span></span><br><span class="line">	<span class="number">61</span>,    <span class="comment">// 102</span></span><br><span class="line">	<span class="number">60</span>,    <span class="comment">// 103</span></span><br><span class="line">	<span class="number">58</span>,    <span class="comment">// 104</span></span><br><span class="line">	<span class="number">56</span>,    <span class="comment">// 105</span></span><br><span class="line">	<span class="number">55</span>,    <span class="comment">// 106</span></span><br><span class="line">	<span class="number">53</span>,    <span class="comment">// 107</span></span><br><span class="line">	<span class="number">52</span>,    <span class="comment">// 108</span></span><br><span class="line">	<span class="number">50</span>,    <span class="comment">// 109</span></span><br><span class="line">	<span class="number">49</span>,    <span class="comment">// 110</span></span><br><span class="line">	<span class="number">47</span>,    <span class="comment">// 111</span></span><br><span class="line">	<span class="number">46</span>,    <span class="comment">// 112</span></span><br><span class="line">	<span class="number">45</span>,    <span class="comment">// 113</span></span><br><span class="line">	<span class="number">43</span>,    <span class="comment">// 114</span></span><br><span class="line">	<span class="number">42</span>,    <span class="comment">// 115</span></span><br><span class="line">	<span class="number">41</span>,    <span class="comment">// 116</span></span><br><span class="line">	<span class="number">40</span>,    <span class="comment">// 117</span></span><br><span class="line">	<span class="number">39</span>,    <span class="comment">// 118</span></span><br><span class="line">	<span class="number">38</span>,    <span class="comment">// 119</span></span><br><span class="line">	<span class="number">37</span>,    <span class="comment">// 120</span></span><br><span class="line">	<span class="number">36</span>,    <span class="comment">// 121</span></span><br><span class="line">	<span class="number">35</span>,    <span class="comment">// 122</span></span><br><span class="line">	<span class="number">34</span>,    <span class="comment">// 123</span></span><br><span class="line">	<span class="number">33</span>,    <span class="comment">// 124</span></span><br><span class="line">	<span class="number">32</span>,    <span class="comment">// 125</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>代码实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;NTC.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ADC.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">    GPIO_InitStructure.Pin  = NTC_GPIO_PIN;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">    GPIO_InitStructure.Mode = GPIO_HighZ;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">    GPIO_Inilize(NTC_GPIO, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ADC_config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ADC_InitTypeDef		ADC_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">    ADC_InitStructure.ADC_SMPduty   = <span class="number">31</span>;		<span class="comment">//ADC 模拟信号采样时间控制, 0~31（注意： SMPDUTY 一定不能设置小于 10）</span></span><br><span class="line">    ADC_InitStructure.ADC_CsSetup   = <span class="number">0</span>;		<span class="comment">//ADC 通道 选择时间控制 0(默认),1</span></span><br><span class="line">    ADC_InitStructure.ADC_CsHold    = <span class="number">1</span>;		<span class="comment">//ADC 通道 选择保持时间控制 0,1(默认),2,3</span></span><br><span class="line">    ADC_InitStructure.ADC_Speed     = ADC_SPEED_2X1T;		<span class="comment">//设置 ADC 工作时钟频率	ADC_SPEED_2X1T~ADC_SPEED_2X16T</span></span><br><span class="line">    ADC_InitStructure.ADC_Power     = ENABLE;				<span class="comment">//ADC功率允许/关闭	ENABLE,DISABLE</span></span><br><span class="line">    ADC_InitStructure.ADC_AdjResult = ADC_RIGHT_JUSTIFIED;	<span class="comment">//ADC结果调整,	ADC_LEFT_JUSTIFIED,ADC_RIGHT_JUSTIFIED</span></span><br><span class="line">    ADC_InitStructure.ADC_Priority    = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">    ADC_InitStructure.ADC_Interrupt = DISABLE;			<span class="comment">//中断允许	ENABLE,DISABLE</span></span><br><span class="line">    ADC_Inilize(&amp;ADC_InitStructure);					<span class="comment">//初始化</span></span><br><span class="line">    ADC_PowerControl(ENABLE);							<span class="comment">//单独的ADC电源操作函数, ENABLE或DISABLE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化NTC</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTC_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    GPIO_config();</span><br><span class="line">    ADC_config();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">search_temp</span><span class="params">(<span class="keyword">float</span> rst_Rx10)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, min_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 计算数组长度</span></span><br><span class="line">	<span class="keyword">int</span> len = <span class="keyword">sizeof</span>(temp_table) / <span class="keyword">sizeof</span>(u16);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 记录最小差值 </span></span><br><span class="line">	<span class="keyword">float</span> min_diff = <span class="built_in">abs</span>(rst_Rx10 - temp_table[<span class="number">0</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line">		<span class="comment">// 计算数组里每一个阻值和rst_Rx10的差值</span></span><br><span class="line">		<span class="keyword">float</span> diff = <span class="built_in">abs</span>(rst_Rx10 - temp_table[i]);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 得到差值最小元素对应的索引i</span></span><br><span class="line">		<span class="keyword">if</span>(diff &lt; min_diff)&#123;</span><br><span class="line">			<span class="comment">// 如果有更小的差值，赋值</span></span><br><span class="line">			min_diff = diff;</span><br><span class="line">			min_index = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;len: %d R: %.2f min_diff: %.2f min_index: %d \n&quot;</span>, len, rst_Rx10, min_diff, min_index);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取温度值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NTC_get_temperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    u16 adc_value;</span><br><span class="line">    <span class="keyword">float</span> rst_V;</span><br><span class="line">    <span class="keyword">float</span> rst_R;</span><br><span class="line">    <span class="keyword">int</span> rst_T;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取对应的ADC值</span></span><br><span class="line">    adc_value = Get_ADCResult(NTC_ACD_CH);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// adc_value返回的值范围 0 -&gt; 4096</span></span><br><span class="line">    <span class="comment">// 等同于P05引脚的电压值和Vref的占比  1024</span></span><br><span class="line">    <span class="comment">// X = ADC_V  * Vref / 4096</span></span><br><span class="line">    <span class="comment">// 计算电压</span></span><br><span class="line">    rst_V = adc_value * <span class="number">2.5</span> / <span class="number">4096</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算电阻值</span></span><br><span class="line">    rst_R = rst_V * <span class="number">10</span> / (<span class="number">3.3</span> - rst_V);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9.36KΩ 将阻值兑换成温度</span></span><br><span class="line">    rst_T = search_temp(rst_R * <span class="number">100</span>) - <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ADC: %d voltage: %.2f R = %.2f T = %d℃ \n&quot;</span>, adc_value, rst_V, rst_R, (<span class="keyword">int</span>)rst_T);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> rst_T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>练习题</p>
]]></content>
  </entry>
  <entry>
    <title>独立按键</title>
    <url>/%E7%8B%AC%E7%AB%8B%E6%8C%89%E9%94%AE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="独立按键"><a class="markdownIt-Anchor" href="#独立按键"></a> 独立按键</h1>
<p>学习目标</p>
<p>1能够读取按键操作</p>
<p>2能够处理按键消抖</p>
<p>学习内容</p>
<p>原理图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679479677974-7acb80f4-a532-431b-8ebe-098174ce8d22.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="61.png" /></p>
<p>按键消抖</p>
<p>1软件延时法：在按键按下时，使用软件延时一段时间，例如10毫秒，然后再检测按键是否还处于按下状态，如果是，则认为按键有效。这种方法简单易行，但会浪费一定的处理器时间，同时需要根据实际情况调整延时时间。</p>
<p>2硬件滤波法：在按键输入引脚上添加RC滤波电路，可以有效地去除按键信号上的瞬间噪声。这种方法对于高频噪声的去除效果较好，但需要一定的电路设计能力。</p>
<p>3程序消抖法：在程序中记录按键前后两次的状态，如果两次状态不同，则认为按键有效。这种方法可以根据需要调整检测时间，消抖效果较好，但需要额外的程序设计。</p>
<p>我们采用程序消抖法。</p>
<p>软件设计</p>
<p>要求</p>
<p>当用户按下，或者松开按键时，捕获到这个事件。将事件通过串口发出来。</p>
<p>分析</p>
<p>监控引脚的高低电平变化。记录状态，比对实时状态。</p>
<p>●监控：死循环去读取电平信息</p>
<p>●记录与比对：通过变量记录，实时拿到当前状态，与记录的上一次进行比对。</p>
<p>实现</p>
<p>通过状态记录，记录每个按键的状态。默认得定义状态的值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;UART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY1	P51</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY2	P52</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY3	P53</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY4	P54</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UP		1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DOWN	0</span></span><br><span class="line"></span><br><span class="line">u8 key1_state = UP; </span><br><span class="line">u8 key2_state = UP; </span><br><span class="line">u8 key3_state = UP; </span><br><span class="line">u8 key4_state = UP; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_PullUp;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P5, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_config</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	COMx_InitDefine		COMx_InitStructure;					<span class="comment">//结构定义</span></span><br><span class="line">	COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;	<span class="comment">//模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit_BRTx</span></span><br><span class="line">	COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;			<span class="comment">//选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使用BRT_Timer2)</span></span><br><span class="line">	COMx_InitStructure.UART_BaudRate  = <span class="number">115200ul</span>;			<span class="comment">//波特率, 一般 110 ~ 115200</span></span><br><span class="line">	COMx_InitStructure.UART_RxEnable  = ENABLE;				<span class="comment">//接收允许,   ENABLE或DISABLE</span></span><br><span class="line">	COMx_InitStructure.BaudRateDouble = DISABLE;			<span class="comment">//波特率加倍, ENABLE或DISABLE</span></span><br><span class="line">	COMx_InitStructure.UART_Interrupt = ENABLE;				<span class="comment">//中断允许,   ENABLE或DISABLE</span></span><br><span class="line">	COMx_InitStructure.UART_Priority    = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">	COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31;	<span class="comment">//切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44</span></span><br><span class="line">	UART_Configuration(UART1, &amp;COMx_InitStructure);		<span class="comment">//初始化串口1 UART1,UART2,UART3,UART4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIMER_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	TIM_InitTypeDef		TIM_InitStructure;						<span class="comment">//结构定义</span></span><br><span class="line">	TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;	<span class="comment">//指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TIM_8BitAutoReload,TIM_16BitAutoReloadNoMask</span></span><br><span class="line">	TIM_InitStructure.TIM_Priority    = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">	TIM_InitStructure.TIM_Interrupt = ENABLE;					<span class="comment">//中断是否允许,   ENABLE或DISABLE</span></span><br><span class="line">	TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;		<span class="comment">//指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_Ext</span></span><br><span class="line">	TIM_InitStructure.TIM_ClkOut    = DISABLE;				<span class="comment">//是否输出高速脉冲, ENABLE或DISABLE</span></span><br><span class="line">	TIM_InitStructure.TIM_Value     = <span class="number">65536UL</span> - (MAIN_Fosc / <span class="number">1000UL</span>);		<span class="comment">//初值,</span></span><br><span class="line">	TIM_InitStructure.TIM_Run       = ENABLE;					<span class="comment">//是否初始化后启动定时器, ENABLE或DISABLE</span></span><br><span class="line">	Timer_Inilize(Timer0,&amp;TIM_InitStructure);					<span class="comment">//初始化Timer0	  Timer0,Timer1,Timer2,Timer3,Timer4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer0_call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(KEY1 == UP &amp;&amp; key1_state == DOWN) &#123;</span><br><span class="line">		<span class="comment">// up</span></span><br><span class="line">		key1_state = UP;</span><br><span class="line">		</span><br><span class="line">		PrintString1(<span class="string">&quot;key1 up\r\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(KEY1 == DOWN &amp;&amp; key1_state == UP) &#123;</span><br><span class="line">		<span class="comment">// down</span></span><br><span class="line">		key1_state = DOWN;</span><br><span class="line">		</span><br><span class="line">		PrintString1(<span class="string">&quot;key1 down\r\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(KEY2 == UP &amp;&amp; key2_state == DOWN) &#123;</span><br><span class="line">		<span class="comment">// up</span></span><br><span class="line">		key2_state = UP;</span><br><span class="line">		</span><br><span class="line">		PrintString1(<span class="string">&quot;key2 up\r\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(KEY2 == DOWN &amp;&amp; key2_state == UP) &#123;</span><br><span class="line">		<span class="comment">// down</span></span><br><span class="line">		key2_state = DOWN;</span><br><span class="line">		</span><br><span class="line">		PrintString1(<span class="string">&quot;key2 down\r\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(KEY3 == UP &amp;&amp; key3_state == DOWN) &#123;</span><br><span class="line">		<span class="comment">// up</span></span><br><span class="line">		key3_state = UP;</span><br><span class="line">		</span><br><span class="line">		PrintString1(<span class="string">&quot;key3 up\r\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(KEY3 == DOWN &amp;&amp; key3_state == UP) &#123;</span><br><span class="line">		<span class="comment">// down</span></span><br><span class="line">		key3_state = DOWN;</span><br><span class="line">		</span><br><span class="line">		PrintString1(<span class="string">&quot;key3 down\r\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(KEY4 == UP &amp;&amp; key4_state == DOWN) &#123;</span><br><span class="line">		<span class="comment">// up</span></span><br><span class="line">		key4_state = UP;</span><br><span class="line">		</span><br><span class="line">		PrintString1(<span class="string">&quot;key4 up\r\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(KEY4 == DOWN &amp;&amp; key4_state == UP) &#123;</span><br><span class="line">		<span class="comment">// down</span></span><br><span class="line">		key4_state = DOWN;</span><br><span class="line">		</span><br><span class="line">		PrintString1(<span class="string">&quot;key4 down\r\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	GPIO_config();</span><br><span class="line">	UART_config();</span><br><span class="line">	TIMER_config();</span><br><span class="line">	EA = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>状态记录优化</p>
<p>通过一个值，表示多个状态，节省内存。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">u8 key_state = <span class="number">0x0F</span>;<span class="comment">// 默认全部抬起</span></span><br><span class="line"><span class="comment">// 省略逻辑......</span></span><br><span class="line"><span class="comment">/////////// 表示方式 /////////////</span></span><br><span class="line"><span class="comment">// key1的抬起和按下状态表示方式</span></span><br><span class="line">(key_state &amp; <span class="number">0x01</span>) &gt;&gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// key2的抬起和按下状态表示方式</span></span><br><span class="line">(key_state &amp; <span class="number">0x02</span>) &gt;&gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// key3的抬起和按下状态表示方式</span></span><br><span class="line">(key_state &amp; <span class="number">0x04</span>) &gt;&gt; <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// key4的抬起和按下状态表示方式</span></span><br><span class="line">(key_state &amp; <span class="number">0x08</span>) &gt;&gt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///////// 设置方式 ////////////</span></span><br><span class="line"><span class="comment">// key1 设置抬起状态</span></span><br><span class="line">key_state |= <span class="number">0x01</span>;</span><br><span class="line"><span class="comment">// key1 设置按下状态</span></span><br><span class="line">key_state &amp;= ~<span class="number">0x01</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key2 设置抬起状态</span></span><br><span class="line">key_state |= <span class="number">0x02</span>;</span><br><span class="line"><span class="comment">// key2 设置按下状态</span></span><br><span class="line">key_state &amp;= ~<span class="number">0x02</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key3 设置抬起状态</span></span><br><span class="line">key_state |= <span class="number">0x04</span>;</span><br><span class="line"><span class="comment">// key3 设置按下状态</span></span><br><span class="line">key_state &amp;= ~<span class="number">0x04</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key4 设置抬起状态</span></span><br><span class="line">key_state |= <span class="number">0x08</span>;</span><br><span class="line"><span class="comment">// key4 设置按下状态</span></span><br><span class="line">key_state &amp;= ~<span class="number">0x08</span>;</span><br></pre></td></tr></table></figure>
<p>方法判断设置优化</p>
<p>代码便于阅读，方便维护。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_KEY_UP(idx)		(((key_state &amp; (1 <span class="meta-string">&lt;&lt; idx))) &gt;</span>&gt; idx) == UP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_KEY_DOWN(idx)	(((key_state &amp; (1 <span class="meta-string">&lt;&lt; idx))) &gt;</span>&gt; idx) == DOWN</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SET_KEY_UP(idx)		key_state |= (1 &lt;&lt; idx)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SET_KEY_DOWN(idx)	key_state &amp;= ~(1 &lt;&lt; idx)</span></span><br></pre></td></tr></table></figure>
<p>练习题</p>
<p>1实现按键操作</p>
<p>2通过按键控制震动马达震动</p>
]]></content>
  </entry>
  <entry>
    <title>电位器案例(ADC)</title>
    <url>/%E7%94%B5%E4%BD%8D%E5%99%A8%E6%A1%88%E4%BE%8B(ADC).html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="电位器案例adc"><a class="markdownIt-Anchor" href="#电位器案例adc"></a> 电位器案例(ADC)</h1>
<p>学习目标</p>
<p>1理解模数转换器（ADC）的基本原理和应用场景；</p>
<p>2掌握STC8H中ADC模块的结构和工作原理；</p>
<p>3学会使用STC8H的ADC的电路设计；</p>
<p>4掌握通过编程获取ADC数据</p>
<p>5学会基本的调试策略</p>
<p>学习内容</p>
<p>案例介绍</p>
<p>通过控制滑动变阻器，来观察电压变化。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1688957866606-cc508d2d-7930-4b67-a131-f9e40782d1f7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_26%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p>
<p>1通过万用表测量 P0.5位置的电压</p>
<p>2通过代码读取出 P0.5位置的电压</p>
<p>万用表测量</p>
<p>1调整万用表到电压测量位</p>
<p>2正极接P0.5</p>
<p>3负极接GND</p>
<p>4读取值</p>
<p>ADC概念</p>
<p>ADC(Analog to Digital Converter 模数转换器）是一种将模拟信号转换为数字信号的电路。在电子系统中，模拟信号常常需要转换为数字信号进行处理和存储。模数转换的基本原理是将模拟信号进行采样，并将采样值量化为数字表示。</p>
<p>●采样：是指在一定时间间隔内对模拟信号进行测量，并将测量值存储在数字形式的数据中</p>
<p>●量化：是将这些连续的模拟信号值离散化为一系列数字值，通常使用二进制表示。</p>
<p>简单理解，ADC是把模拟信号转换为数字信号的工具，我们可以认为，一个信号有强弱之分，强弱的体现为电压的高低。在数字电路中，只有0和1之分，也就是高电平或低电平。那么体现不了这个强弱。ADC的作用就是体现强弱，精确化的拿到具体的值。</p>
<p>应用场景：</p>
<p>1医疗设备：如心电图、血压计之类。</p>
<p>2音频信号处理：在数字音频处理中，ADC将模拟音频信号转换为数字信号，然后可以进行数字信号处理和存储。</p>
<p>3电力系统：测量电压。</p>
<p>总之，需要知道信号强弱的，需要将模拟信号转为数字信号的都会用到ADC。</p>
<p>STC8H芯片有15个通道的ADC功能引脚：</p>
<table>
<thead>
<tr>
<th>ADC功能</th>
<th>引脚</th>
</tr>
</thead>
<tbody>
<tr>
<td>ADC0</td>
<td>P1.0</td>
</tr>
<tr>
<td>ADC1</td>
<td>P1.1</td>
</tr>
<tr>
<td>ADC2</td>
<td>P5.4</td>
</tr>
<tr>
<td>ADC3</td>
<td>P1.3</td>
</tr>
<tr>
<td>ADC4</td>
<td>P1.4</td>
</tr>
<tr>
<td>ADC5</td>
<td>P1.5</td>
</tr>
<tr>
<td>ADC6</td>
<td>P1.6</td>
</tr>
<tr>
<td>ADC7</td>
<td>P1.7</td>
</tr>
<tr>
<td>ADC8</td>
<td>P0.0</td>
</tr>
<tr>
<td>ADC9</td>
<td>P0.1</td>
</tr>
<tr>
<td>ADC10</td>
<td>P0.2</td>
</tr>
<tr>
<td>ADC11</td>
<td>P0.3</td>
</tr>
<tr>
<td>ADC12</td>
<td>P0.4</td>
</tr>
<tr>
<td>ADC13</td>
<td>P0.5</td>
</tr>
<tr>
<td>ADC14</td>
<td>P0.6</td>
</tr>
</tbody>
</table>
<p>代码实现</p>
<p>IO初始化为高阻输入</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">    GPIO_InitStructure.Pin  = GPIO_Pin_5;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">    GPIO_InitStructure.Mode = GPIO_HighZ;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">    GPIO_Inilize(GPIO_P0, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ADC配置逻辑</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ADC_config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ADC_InitTypeDef		ADC_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">	ADC_InitStructure.ADC_SMPduty   = <span class="number">31</span>;		<span class="comment">//ADC 模拟信号采样时间控制, 0~31（注意： SMPDUTY 一定不能设置小于 10）</span></span><br><span class="line">	ADC_InitStructure.ADC_CsSetup   = <span class="number">0</span>;		<span class="comment">//ADC 通道选择时间控制 0(默认),1</span></span><br><span class="line">	ADC_InitStructure.ADC_CsHold    = <span class="number">1</span>;		<span class="comment">//ADC 通道选择保持时间控制 0,1(默认),2,3</span></span><br><span class="line">	ADC_InitStructure.ADC_Speed     = ADC_SPEED_2X1T;		<span class="comment">//设置 ADC 工作时钟频率	ADC_SPEED_2X1T~ADC_SPEED_2X16T</span></span><br><span class="line">	ADC_InitStructure.ADC_Power     = ENABLE;				<span class="comment">//ADC功率允许/关闭	ENABLE,DISABLE</span></span><br><span class="line">	ADC_InitStructure.ADC_AdjResult = ADC_RIGHT_JUSTIFIED;	<span class="comment">//ADC结果调整,	ADC_LEFT_JUSTIFIED,ADC_RIGHT_JUSTIFIED</span></span><br><span class="line">	ADC_InitStructure.ADC_Priority    = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">	ADC_InitStructure.ADC_Interrupt = DISABLE;			<span class="comment">//中断允许	ENABLE,DISABLE</span></span><br><span class="line">	ADC_Inilize(&amp;ADC_InitStructure);					<span class="comment">//初始化</span></span><br><span class="line">	ADC_PowerControl(ENABLE);							<span class="comment">//单独的ADC电源操作函数, ENABLE或DISABLE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数据读取与转换</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">result = Get_ADCResult(ADC_CH13);</span><br><span class="line">v = result * <span class="number">2.5</span> / <span class="number">4096</span>;</span><br></pre></td></tr></table></figure>
<p>芯片基准电压，参考ADC_VRef+引脚，此引脚设计如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1688957505145-af853232-8b4e-42dd-9bb5-22912b76ab95.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p>
<p>ADC为12位精度的，意思是最大值是2的12次方，值为4096.</p>
<p>ADC的这个最大值，表示的是最大测量范围：</p>
<p>1数值最大为4096</p>
<p>2测量的电压值不能超过基准电压</p>
<p>3基准电压对应的值为4096</p>
<p>记住：我们用4096表示基准电压。</p>
<p>以上原理图中，基准电压由 VREF电压决定。这个电路中用到了一个芯片CJ431/CD431，这是一款电压基准芯片，会恒定的输出2.5V电压。</p>
<p>在我们的设计方案中，理论上可以不使用这个电压基准芯片的，直接连接3V3，但是LDO的输出稳定性不够，因此使用电压基准芯片会更为准确。</p>
<p>由以上我们可以得出：</p>
<p>1基准电压为：2.5V</p>
<p>2基准电压对应的数值是4096</p>
<p>3测量的值为ADC引脚</p>
<p>4电压值的计算：</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">电</mi><mi mathvariant="normal">压</mi><mi mathvariant="normal">值</mi><mo>=</mo><mi mathvariant="normal">测</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">值</mi><mi mathvariant="normal">∗</mi><mi mathvariant="normal">基</mi><mi mathvariant="normal">准</mi><mi mathvariant="normal">电</mi><mi mathvariant="normal">压</mi><mi mathvariant="normal">/</mi><mn>4096</mn></mrow><annotation encoding="application/x-tex">电压值=测量值∗基准电压/4096</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">电</span><span class="mord cjk_fallback">压</span><span class="mord cjk_fallback">值</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">测</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">值</span><span class="mord">∗</span><span class="mord cjk_fallback">基</span><span class="mord cjk_fallback">准</span><span class="mord cjk_fallback">电</span><span class="mord cjk_fallback">压</span><span class="mord">/</span><span class="mord">4</span><span class="mord">0</span><span class="mord">9</span><span class="mord">6</span></span></span></span></p>
<p>练习题</p>
<p>1实现ADC测量电压</p>
<p>2思考ADC电路设计中是否存在问题</p>
]]></content>
  </entry>
  <entry>
    <title>知识地图🗺️</title>
    <url>/%E7%9F%A5%E8%AF%86%E5%9C%B0%E5%9B%BE%F0%9F%97%BA%EF%B8%8F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>知识地图🗺️</p>
<p><a href="https://www.yuque.com/icheima/stc8h/rha5cw25afli8hk4">https://www.yuque.com/icheima/stc8h/rha5cw25afli8hk4</a></p>
]]></content>
  </entry>
  <entry>
    <title>第01天</title>
    <url>/%E7%AC%AC01%E5%A4%A9.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第01天"><a class="markdownIt-Anchor" href="#第01天"></a> 第01天</h1>
<p>hm02_变量的语法.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 定义1个int变量age同时赋值为18，然后打印内容</span></span><br><span class="line"><span class="comment">// 2. 修改age的内容为20，然后打印内容</span></span><br><span class="line"><span class="comment">// 3. 定义2个int变量，然后在分别赋值，然后再打印内容</span></span><br><span class="line"><span class="comment">// 4. 定义1个float类型变量height同时赋值，然后打印内容</span></span><br></pre></td></tr></table></figure>
<p>hm03_char类型.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个char类型变量，同时赋值为97，分别用%d,%c打印结果</span></span><br><span class="line"><span class="comment">// 定义一个char类型变量，同时赋值为&#x27;a&#x27;，分别用%d,%c打印结果</span></span><br></pre></td></tr></table></figure>
<p>hm04_布尔类型.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个bool类型变量，同时赋值为true，然后打印变量的值</span></span><br><span class="line"><span class="comment">// 修改上一步变量的值为false，然后打印变量的值</span></span><br></pre></td></tr></table></figure>
<p>hm05_数据类型长度(大小).c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过sizeof打印各种类型的长度(大小)</span></span><br><span class="line"><span class="comment">// 定义int类型变量，sizeof打印变量的大小</span></span><br></pre></td></tr></table></figure>
<p>hm06_可移植的类型.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 8位整型</span></span><br><span class="line"><span class="comment">// 16位整型</span></span><br><span class="line"><span class="comment">// unsigned 无符号，没有符号位，数值为正数</span></span><br></pre></td></tr></table></figure>
<p>hm07_自定义的常量.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 预处理常量</span></span><br><span class="line">   <span class="comment">// const常量</span></span><br></pre></td></tr></table></figure>
<p>hm08_系统定义的常量.c</p>
<p>hm09_C语言进制数表示.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 十进制方式赋值</span></span><br><span class="line"><span class="comment">// 八进制方式赋值</span></span><br><span class="line"><span class="comment">// 十六进制方式赋值</span></span><br><span class="line"><span class="comment">// 二进制方式赋值</span></span><br></pre></td></tr></table></figure>
<p>hm10_printf输出.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化输出</span></span><br><span class="line"><span class="comment">// 整型</span></span><br><span class="line"><span class="comment">// 无符号数据</span></span><br><span class="line"><span class="comment">// 八进制和十六进制 可以加上前缀# 自动输出八进制和十六进制0或0x</span></span><br><span class="line"><span class="comment">// 字符串类型</span></span><br><span class="line"><span class="comment">// 内存地址</span></span><br></pre></td></tr></table></figure>
<p>hm11_scanf输入.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义int类型变量age，通过scanf输入内容，然后打印内容</span></span><br></pre></td></tr></table></figure>
<p>hm12_输入输出案例.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.定义常量pi</span></span><br><span class="line"><span class="comment">// 2.定义半径变量r</span></span><br><span class="line"><span class="comment">// 3.输入半径</span></span><br><span class="line"><span class="comment">// 4.求周长和面积, * 为乘以运算符</span></span><br><span class="line"><span class="comment">// 5.输出周长和面积</span></span><br></pre></td></tr></table></figure>
<p>hm13_算术运算符.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 2数相除，要想得到小数的结果，分子分母必须有一个数是小数</span></span><br><span class="line"><span class="comment">// 2个都是整数，只会取整</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 前置++</span></span><br><span class="line">   <span class="comment">// 先加后用</span></span><br><span class="line">   <span class="comment">// 后置++</span></span><br><span class="line">   <span class="comment">// 先用后加</span></span><br></pre></td></tr></table></figure>
<p>hm14_赋值运算符.c</p>
<p>hm15_比较运算符.c</p>
<p>hm16_逻辑运算符.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非0就是真，0就是假</span></span><br><span class="line"><span class="comment">// &amp;&amp;, 并且，左右2边结果为真，才为真</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// || 或者， 左边或右边有1个为真，就是真，2个都为假才为假</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ! 取反</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 短路规则</span></span><br><span class="line"><span class="comment">// &amp;&amp; 左边为假，右边执行不到</span></span><br><span class="line"><span class="comment">// || 左边为真，右边执行不到</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>第01天练习</title>
    <url>/%E7%AC%AC01%E5%A4%A9%E7%BB%83%E4%B9%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第01天练习"><a class="markdownIt-Anchor" href="#第01天练习"></a> 第01天练习</h1>
<p>1C语言表示进制中，二进制以_______开头，八进制以_______开头，十六进制以_______开头<br />
2标识符只能由_______、_______和_______组成，不能以_______开头<br />
3二进制和八进制相互转换<br />
111 010 101 011 转换为八进制后结果为？<br />
76321 转换为二进制结果为？<br />
4二进制和十六进制相互转换<br />
1111 1010 1101 1011 转换为十六进制后结果为？<br />
a6b2f1 转换为二进制结果为？<br />
5请写出 -8 的原码、反码、补码(1个字节大小存储)<br />
6编写一个程序，要求用户输入两个整数，然后输出它们的和，输出格式为：xx + xx = xx<br />
7编写一个程序，要求用户输入一个十进制整数，然后以十六进制输出<br />
8编写一个程序，要求用户输入一个字符，然后输出该字符的ASCII码值<br />
9编写一个程序，要求用户输入一个字符，然后将该字符转换为大写字母，并输出结果<br />
10编写一个程序，定义一个整型常量，存储你的出生年份，然后输出该常量的值</p>
]]></content>
  </entry>
  <entry>
    <title>第02天</title>
    <url>/%E7%AC%AC02%E5%A4%A9.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第02天"><a class="markdownIt-Anchor" href="#第02天"></a> 第02天</h1>
<p>hm00_位运算符.c</p>
<p>hm01_位运算案例.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将变量a的第2位设置为1，其他位保持不变</span></span><br><span class="line"><span class="keyword">uint8_t</span> a = <span class="number">0b10110011</span>; <span class="comment">// 0xb3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将变量b的第2位、第6位设置为1，其他位保持不变</span></span><br><span class="line"><span class="keyword">uint8_t</span> b = <span class="number">0b10110011</span>; <span class="comment">// 0xb3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将变量c的第5位设置为0，其他位保持不变</span></span><br><span class="line"><span class="keyword">uint8_t</span> c = <span class="number">0b10110011</span>;  <span class="comment">// 0xb3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将变量d的第0~3位设置为0，其他位保持不变</span></span><br><span class="line"><span class="keyword">uint8_t</span> d = <span class="number">0b11111111</span>;  <span class="comment">// 0xff;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将变量e的第2位取反，其他位保持不变</span></span><br><span class="line"><span class="keyword">uint8_t</span> e = <span class="number">0b10110011</span>;  <span class="comment">// 0xb3;</span></span><br></pre></td></tr></table></figure>
<p>hm02_类型转换.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 隐式转换（自动转换）：编译器自动转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制类型转换，用户转换， (类型)变量或常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型转换原则：数据类型小的往数据类型大的转</span></span><br><span class="line"><span class="comment">// 大的往小的转，数据可能会丢失</span></span><br><span class="line"><span class="comment">// 小的往大的转</span></span><br></pre></td></tr></table></figure>
<p>hm03_if语句.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个整数变量记录年龄</span></span><br><span class="line">   <span class="comment">// 判断是否满 18 岁 （&gt;=）</span></span><br><span class="line">   <span class="comment">// 如果满 18 岁，允许进网吧嗨皮</span></span><br></pre></td></tr></table></figure>
<p>hm04_if…else语句.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个整数变量记录年龄</span></span><br><span class="line">   <span class="comment">// 判断是否满 18 岁 （&gt;=）</span></span><br><span class="line">   <span class="comment">// 如果满 18 岁，允许进网吧嗨皮</span></span><br><span class="line">   <span class="comment">// 否则，提示回家写作业</span></span><br></pre></td></tr></table></figure>
<p>hm05_三目运算符.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过三目运算符求2个数的最大值</span></span><br></pre></td></tr></table></figure>
<p>hm06_if…else if…else语句.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.定义变量记录购买金额 定义变量记录实际费用</span></span><br><span class="line">   <span class="comment">// 2.输入购买金额</span></span><br><span class="line">   <span class="comment">// 3.根据购买金额判断折扣</span></span><br><span class="line">       <span class="comment">// 购物满 50 元，打 9 折；</span></span><br><span class="line">       <span class="comment">// 购物满 100 元，打 8 折；</span></span><br><span class="line">       <span class="comment">// 购物满 200 元，打 7 折；</span></span><br><span class="line">       <span class="comment">// 购物满 300 元，打 6 折；</span></span><br><span class="line">       <span class="comment">// 不满50 原价</span></span><br></pre></td></tr></table></figure>
<p>hm07_if…else if…else语句2.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.定义变量记录购买金额 定义变量记录实际费用</span></span><br><span class="line">   <span class="comment">// 2.输入购买金额</span></span><br><span class="line">   <span class="comment">// 3.根据购买金额判断折扣   </span></span><br><span class="line">       <span class="comment">// 购物满 300 元，打 6 折；  </span></span><br><span class="line">       <span class="comment">// 购物满 200 元，打 7 折；</span></span><br><span class="line">       <span class="comment">// 购物满 100 元，打 8 折；</span></span><br><span class="line">       <span class="comment">// 购物满 50 元，打 9 折；  </span></span><br><span class="line">       <span class="comment">// 不满50 原价</span></span><br></pre></td></tr></table></figure>
<p>hm08_switch语句.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 定义变量保存数据</span></span><br><span class="line">   <span class="comment">// 2. 输入数据</span></span><br><span class="line">   <span class="comment">// 3. 使用switch根据数据不同输出不同的结果</span></span><br></pre></td></tr></table></figure>
<p>hm09_分支综合案例.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 定义变量保存数据</span></span><br><span class="line">   <span class="comment">// 2. 输入数据</span></span><br><span class="line">   <span class="comment">// 3. 使用switch根据数据不同输出不同的结果</span></span><br><span class="line"><span class="comment">// 2月   非闰年 28天  闰年 29天</span></span><br><span class="line">   <span class="comment">// 闰年判断：能被4整除，但不能被100整除的；或者能被400整除的年份</span></span><br></pre></td></tr></table></figure>
<p>hm10_while语句.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求跑步5圈</span></span><br><span class="line">   <span class="comment">// 1. 条件变量的定义</span></span><br><span class="line">   <span class="comment">// 2. while 控制重复的次数</span></span><br><span class="line">   <span class="comment">// 3. 打印跑步第几圈</span></span><br><span class="line">   <span class="comment">// 4. 条件改变</span></span><br></pre></td></tr></table></figure>
<p>hm11_do…while语句.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求跑步5圈</span></span><br><span class="line">   <span class="comment">// 1. 条件变量的定义</span></span><br><span class="line">   <span class="comment">// 2.1 打印跑步第几圈</span></span><br><span class="line">   <span class="comment">// 2.2 条件改变</span></span><br><span class="line"><span class="comment">// 3. 控制重复的次数</span></span><br></pre></td></tr></table></figure>
<p>hm12_for语句.c</p>
<p>hm13_死循环.c</p>
<p>hm14_1~100内数字累加.c</p>
<p>hm15_循环嵌套.c</p>
<p>hm16_break.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求: 一共吃5碗饭, 吃到第3碗吃饱了, 结束吃饭动作</span></span><br><span class="line"><span class="comment">// 1. 定义条件变量，为了查看方便, 计数器从 1 开始</span></span><br><span class="line"><span class="comment">// 2. 控制条件</span></span><br><span class="line"><span class="comment">// 结束循环，退出循环</span></span><br><span class="line"><span class="comment">// 3. 条件变量改变</span></span><br></pre></td></tr></table></figure>
<p>hm17_continue.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求: 一共吃5个苹果，吃到第3个遇到虫子，这个跳过不吃，下一个继续</span></span><br></pre></td></tr></table></figure>
<p>hm18_goto.c</p>
<p>hm19_函数作用.c</p>
<p>hm20_无参无返回值.c</p>
]]></content>
  </entry>
  <entry>
    <title>第02天练习</title>
    <url>/%E7%AC%AC02%E5%A4%A9%E7%BB%83%E4%B9%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第02天练习"><a class="markdownIt-Anchor" href="#第02天练习"></a> 第02天练习</h1>
<p>1位运算练习</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将变量a的第1位设置为1，其他位保持不变</span></span><br><span class="line"><span class="keyword">uint8_t</span> a = <span class="number">0b10101001</span>;  <span class="comment">// 0xa9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将变量b的第3位设置为0，其他位保持不变</span></span><br><span class="line"><span class="keyword">uint8_t</span> b = <span class="number">0b10101001</span>;  <span class="comment">// 0xa9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将变量c的第7位取反，其他位保持不变</span></span><br><span class="line"><span class="keyword">uint8_t</span> c = <span class="number">0b10101001</span>;  <span class="comment">// 0xa9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将变量d的第0位和第7位取反</span></span><br><span class="line"><span class="keyword">uint8_t</span> d = <span class="number">0b10110011</span>;  <span class="comment">// 0xb3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查变量e的第7位是否为1，如果是则输出&quot;Bit is set&quot;，否则输出&quot;Bit is not set&quot;。</span></span><br><span class="line"><span class="keyword">uint8_t</span> e = <span class="number">0b10110011</span>; </span><br></pre></td></tr></table></figure>
<p>2编写一个程序，判断一个整数是否为偶数。</p>
<p>3从屏幕上输入一个学生的成绩(0-100)，对学生成绩进行评定：</p>
<p>​	&lt;60为E</p>
<p>​	60~69为D</p>
<p>​	70~79为C</p>
<p>​	80~89为B</p>
<p>​	90以上为A</p>
<p>​	&lt;0或&gt;100提示成绩输入出错</p>
<p>4编写一个switch程序，根据用户输入的等级（A、B、C、D、E），输出对应的描述（优秀，良好，中等，及格，不及格）。</p>
<p>5输出100以内能被7整除的数，分别用for循环和while循环完成</p>
<p>6实现1~100偶数和累加，分别用for循环和while循环完成</p>
]]></content>
  </entry>
  <entry>
    <title>第03天</title>
    <url>/%E7%AC%AC03%E5%A4%A9.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第03天"><a class="markdownIt-Anchor" href="#第03天"></a> 第03天</h1>
<p>hm08_指针变量的定义和使用.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个int类型的变量，同时赋值为10</span></span><br><span class="line"><span class="comment">// 打印变量的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个指针变量，int *保存int的地址</span></span><br><span class="line"><span class="comment">// int *代表是一种数据类型，int *指针类型，p才是变量名</span></span><br><span class="line"><span class="comment">// 指针指向谁，就把谁的地址赋值给这个指针变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印p, *p, p指向了a的地址，*p就是a的值</span></span><br></pre></td></tr></table></figure>
<p>hm09_通过指针间接修改变量的值.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个int类型变量a，同时赋值为0</span></span><br><span class="line"><span class="comment">// 定义int *指针变量，同时赋值a的地址</span></span><br><span class="line"><span class="comment">// 通过指针间接修改a的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个int类型变量b，同时赋值为5</span></span><br><span class="line"><span class="comment">// p 保存 b的地址</span></span><br><span class="line"><span class="comment">// 通过指针间接修改b的值</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>第03天练习</title>
    <url>/%E7%AC%AC03%E5%A4%A9%E7%BB%83%E4%B9%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第03天练习"><a class="markdownIt-Anchor" href="#第03天练习"></a> 第03天练习</h1>
<p>1编写一个函数，接受一个整数作为参数，判断它是否为偶数，如果是偶数返回1 ，否则返回0</p>
<p>2编写一个函数，接受2个int参数作为参数，计算第一个参数~第二个参数范围的累加和，并返回累加的结果</p>
<p>3编写一个函数，接受一个整数作为参数，计算并返回它的阶乘值</p>
<p>5阶乘值：5<em>4</em>3<em>2</em>1</p>
<p>n阶乘值：n*(n-1)<em>(n-2)……2</em>1</p>
<p>4编写一个程序，定义一个整型变量和一个指向该变量的指针，并将指针指向变量的地址，通过2种方式打印整型变量的内容</p>
<p>5编写一个程序，定义一个整型变量，初始值为100，通过某个函数修改改变量的内容为123</p>
<p>6代码分析题</p>
<p>●下面的代码中，出现了野指针的情况，请指出并修复错误</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *ptr;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    *ptr = num;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Value: %d\n&quot;</span>, *ptr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>第04天</title>
    <url>/%E7%AC%AC04%E5%A4%A9.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第04天"><a class="markdownIt-Anchor" href="#第04天"></a> 第04天</h1>
<p>hm01_函数名.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数名字，就是代表函数的入口地址，函数地址</span></span><br></pre></td></tr></table></figure>
<p>hm02_函数指针.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数指针变量的定义，同时初始化</span></span><br><span class="line"><span class="comment">// 通过函数指针变量调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义函数指针变量，后面再赋值</span></span><br><span class="line"><span class="comment">// 通过函数指针变量调用函数</span></span><br></pre></td></tr></table></figure>
<p>hm03_回调函数.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数，函数指针做形参</span></span><br><span class="line"><span class="comment">// 通过函数指针变量调用函数，获取返回值</span></span><br></pre></td></tr></table></figure>
<p>hm04_数组的使用.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 定义了一个数组，名字叫a，有10个成员，每个成员都是int类型</span></span><br><span class="line"><span class="comment">// a[0]…… a[9]，没有a[10]</span></span><br><span class="line"><span class="comment">// 没有a这个变量，a是数组的名字，但不是变量名，它是常量</span></span><br><span class="line"><span class="comment">// 数据越界，超出范围，错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给数组赋值</span></span><br><span class="line"><span class="comment">// 遍历数组，并输出每个成员的值</span></span><br></pre></td></tr></table></figure>
<p>hm05_数组初始化.c</p>
<p>hm06_数组名.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个数组，同时初始化所有成员变量</span></span><br><span class="line">   <span class="comment">// 数组名是一个地址的常量，代表数组中首元素的地址</span></span><br></pre></td></tr></table></figure>
<p>hm07_一维数组最值.c</p>
<p>hm08_一维数组逆置.c</p>
<p>hm09_指针法操作数组.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// * 和 [] 效果一样，都是操作指针所指向的内存</span></span><br><span class="line"><span class="comment">// 定义一个指针变量保存a的地址</span></span><br></pre></td></tr></table></figure>
<p>hm10_指针数组.c</p>
<p>hm11_数组名作为函数参数.c</p>
<p>hm12_字符串数组和字符串区别.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通字符数组，没有&#x27;\0&#x27;结束符</span></span><br><span class="line"><span class="comment">// 有可能乱码，因为没有&#x27;\0&#x27;结束符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以&#x27;\0&#x27;(&#x27;\0&#x27;就是数字0)结尾的字符数组是字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串处理以&#x27;\0&#x27;(数字0)作为结束符，后面的&#x27;h&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;e&#x27;, &#x27;o&#x27;不会输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用字符串初始化，编译器自动在后面补0，常用</span></span><br></pre></td></tr></table></figure>
<p>hm13_字符串的输入输出.c</p>
<p>hm14_字符指针.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 和 const char *p = &#x27;hello&#x27; 等价，有没有const都一样</span></span><br><span class="line">   <span class="comment">// 指针变量所指向的内存不能修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针变量可以修改</span></span><br></pre></td></tr></table></figure>
<p>hm15_strlen获取字符串长度.c</p>
<p>hm16_strcpy字符串拷贝.c</p>
<p>hm17_strcat字符串连接.c</p>
<p>hm18_strcmp字符串比较.c</p>
<p>hm19_字符串案例.c</p>
<p>hm20_结构体的使用.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构体类型的定义</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义结构体变量，同时初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改成功变量的内容</span></span><br><span class="line">    <span class="comment">// 打印成员变量</span></span><br></pre></td></tr></table></figure>
<p>hm21_结构体值传递.c</p>
<p>hm22_结构体地址传递.c</p>
]]></content>
  </entry>
  <entry>
    <title>第04天练习</title>
    <url>/%E7%AC%AC04%E5%A4%A9%E7%BB%83%E4%B9%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第04天练习"><a class="markdownIt-Anchor" href="#第04天练习"></a> 第04天练习</h1>
<p>1定义一个函数指针变量ptr，指向无参数、无返回值的函数。然后定义一个函数say_hi，它打印出&quot;Hello, World!&quot;，使用函数指针调用该函数。<br />
2编写一个函数get_res，它接受两个整型参数和一个函数指针opt作为回调函数。get_res函数将调用回调函数对给定的两个整数进行操作，并返回结果。编写两个回调函数max和min，分别返回2个整数的最大值和最小值。在主函数中调用get_res函数来演示这两个回调函数。<br />
3编写一个程序，要求用户输入5个整数，将它们存储在一个数组中，然后计算并输出这5个整数的平均值。<br />
4编写一个函数find_index，接受一个整型数组、数组的长度和一个整数作为参数，查找并返回该整数在数组中的索引位置。如果该整数不存在于数组中，则返回-1。在主函数中定义一个包含10元素的数组，并调用find_index函数查找某个整数的索引位置并输出。<br />
5编写一个程序，接受用户输入的一个字符串，然后统计字符串中数字字符的个数并输出。<br />
6定义一个结构体Person，包含人的姓名和年龄两个成员变量。编写程序，创建一个Person类型的结构体数组，包含3个人的信息，并输出每个人的姓名和年龄。</p>
]]></content>
  </entry>
  <entry>
    <title>第05天</title>
    <url>/%E7%AC%AC05%E5%A4%A9.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第05天"><a class="markdownIt-Anchor" href="#第05天"></a> 第05天</h1>
<p>hm01_共用体.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义共用体变量</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 1、所有成员的首地址是一样的</span></span><br><span class="line">   <span class="comment">// 2、共用体大小为最大成员类型的大小</span></span><br><span class="line">   <span class="comment">// 3、一个成员赋值，会影响另外的成员</span></span><br></pre></td></tr></table></figure>
<p>hm02_枚举.c</p>
<p>hm03_typedef.c</p>
<p>hm04_堆区内存的使用.c</p>
]]></content>
  </entry>
  <entry>
    <title>系统时钟</title>
    <url>/%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="系统时钟"><a class="markdownIt-Anchor" href="#系统时钟"></a> 系统时钟</h1>
<p>学习目标</p>
<p>1了解系统时钟概念</p>
<p>2了解时钟周期概念</p>
<p>3了解指令周期（机器周期）概念</p>
<p>学习内容</p>
<p>时钟与周期</p>
<p>系统时钟</p>
<p>系统时钟是指计算机中用于控制各个设备协调工作的定时器。它是计算机的主频，是CPU和外设工作的基础，通常表示为以赫兹为单位的频率，如1MHz，10MHz等等。</p>
<p>系统时钟的时钟信号，通常以晶振的形式提供。STC8H单片机支持外部晶振和内部晶振两种时钟源，可以通过相应的配置来选择使用哪种时钟源。</p>
<p>时钟周期</p>
<p>时钟周期是系统时钟一个完整的周期所需的时间。它的倒数就是时钟频率，即每秒钟发生的时钟周期数。例如，STC8H的时钟频率为24MHz，那么每个时钟周期的时间就是1/24MHz=41.67ns。</p>
<p>机器周期</p>
<p>也叫做指令周期。指令周期是一条指令的执行时间。</p>
<p>早期的STC8H单片机的机器周期为12个时钟周期。现在的STC8H可以有两种配置，一个是1T，一个是12T。</p>
<p>●12T也就是早期的配置，假设当系统时钟为24MHz时，每个机器周期的时间就是12 * 41.67ns = 500ns。</p>
<p>●1T是芯片架构升级后的，每个机器周期的时间为 1 * 41.67ns = 41.67ns.。</p>
<p>NOP指令</p>
<p>NOP指令是一种汇编指令，表示“no operation”（不执行任何操作）。它不会改变寄存器的值，也不会修改存储器中的数据。在程序中插入NOP指令可以用于延时或调整代码的执行顺序。</p>
<p>在大多数处理器中，NOP指令会被翻译成一个或多个机器指令来实现其“不执行任何操作”的效果。在STC8H单片机中，NOP指令被翻译成一条长度为1个字节的指令，不做任何操作。</p>
<p>NOP指令在某些情况下也被用于填充一些未使用的空间，使程序的大小达到特定的大小或对齐要求。在编写汇编代码时，程序员可以在代码中插入NOP指令来占用空间，使得代码和数据能够对齐在内存中的特定地址上，以提高程序的执行效率。</p>
<p>我们可以理解为让程序执行时，睡1个NOP指令周期的时长。</p>
<p>库函数系统时钟配置</p>
<p>在config.h中，配置系统时钟频率。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#define MAIN_Fosc		22118400L	//定义主时钟</span></span><br><span class="line"><span class="comment">//#define MAIN_Fosc		12000000L	//定义主时钟</span></span><br><span class="line"><span class="comment">//#define MAIN_Fosc		11059200L	//定义主时钟</span></span><br><span class="line"><span class="comment">//#define MAIN_Fosc		 5529600L	//定义主时钟</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAIN_Fosc		24000000L	<span class="comment">//定义主时钟</span></span></span><br></pre></td></tr></table></figure>
<p>根据实际情况配置系统时钟。</p>
<p>值得注意的是，在系统时钟配置确定后，烧录时的时钟频率和此处配置的频率应该保持一致，否则会出现一些奇奇怪怪的错误。</p>
<p>测试不同时钟的执行周期</p>
<p>睡眠一个指令周期，观测高低电平变化时长。切换不同主频，体会主频不同带来了什么变化？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_3;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_PullUp;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P5, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	GPIO_config();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">		P53 = <span class="number">1</span>;</span><br><span class="line">		NOP1();</span><br><span class="line">		P53 = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">//NOP1();</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下为几种主频下的高低变化情况</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679211456627-d96fbd37-73d7-4760-bf16-ef82dcd36663.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_23%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="51.png" /></p>
<p>以上是24M主频</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679211573626-0bcde514-eb2b-43f9-a29f-faf2aeb89814.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_22%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="52.png" /></p>
<p>以上是12M主频</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679211686821-f496a8d7-c602-41ec-b692-27d1fed1afd9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_22%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="53.png" /></p>
<p>以上是6M主频</p>
<p>小结：</p>
<p>●主频越高，执行速度越快。</p>
<p>●主频越高，干扰越强，越容易出现问题。</p>
<p>练习题</p>
<p>1配置系统时钟主频</p>
<p>2调试不同主频下，执行周期</p>
]]></content>
  </entry>
  <entry>
    <title>蜂鸣器</title>
    <url>/%E8%9C%82%E9%B8%A3%E5%99%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="蜂鸣器"><a class="markdownIt-Anchor" href="#蜂鸣器"></a> 蜂鸣器</h1>
<p>学习目标</p>
<p>1理解原理图</p>
<p>2了解蜂鸣器分类</p>
<p>3实现蜂鸣器的简单发声</p>
<p>4了解简单的乐理知识</p>
<p>5实现音符播放</p>
<p>6实现音乐播放</p>
<p>学习内容</p>
<p>蜂鸣器</p>
<p>蜂鸣器是一种能够产生固定频率的声音的电子元件。它通常由振膜、震荡器、放大器和声音反馈电路等部分组成。振膜是蜂鸣器中最核心的部分，它能够将电信号转换为机械振动，产生声音。震荡器提供稳定的电信号，用于驱动振膜产生振动。放大器用于放大电信号的幅度，以便产生足够的声音。声音反馈电路可以提供反馈信号，帮助系统稳定。</p>
<p>蜂鸣器广泛应用于电子设备中，例如电子钟、警报器、电子琴等。它们的声音频率通常在1 kHz到10 kHz之间，具有尖锐而刺耳的特点。蜂鸣器的种类很多，例如电磁式蜂鸣器、压电式蜂鸣器、有源蜂鸣器、无源蜂鸣器等等。不同类型的蜂鸣器具有不同的特点和应用场景。</p>
<p>电子爱好者和开发者通常会使用蜂鸣器作为一种简单而有效的提示器件。例如，在嵌入式系统中，可以通过控制蜂鸣器发出不同的声音来实现提示、警报、提醒等功能。一些开发板和单片机也通常带有蜂鸣器接口，方便开发者使用。</p>
<p>通常我们在开发中用到最多的是 有源蜂鸣器和无源蜂鸣器。有源的直接接电源即可发声。无源的需要连接一个变化频率的电源上，才能发出声音。</p>
<p>原理图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679637431181-58eb7f83-624b-4b33-86d6-1ef4b99d5bb3.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_39%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="70.png" /></p>
<p>●采用P0.0引脚控制三极管的导通</p>
<p>肖特基二极管：</p>
<p>当蜂鸣器在工作时，会产生电磁感应。</p>
<p>当电源关闭或蜂鸣器停止振动时，会产生一个瞬态的电压峰值，这会产生反向电流，可能会对电路及蜂鸣器造成损害或影响其寿命。肖特基二极管可以通过其低的正向电压降和快速反向恢复特性，有效地防止反向电流损害电路。</p>
<p>此外，肖特基二极管的快速开关特性也能够减小蜂鸣器电路中的开关噪声和干扰，提高电路的稳定性和可靠性。因此，在蜂鸣器电路中加入肖特基二极管是一种常见的电路保护和稳定化措施。</p>
<p>肖特基二极管的作用</p>
<p>1快速开关：肖特基二极管具有快速的反向恢复特性，可以快速地从导通到截止转变，因此它通常用于高频开关电路中。</p>
<p>2低正向压降：与普通二极管相比，肖特基二极管具有更低的正向电压降，因此在需要低功耗和高效率的电路中使用时，肖特基二极管可以降低电路中的功耗和热损失。</p>
<p>3防反向漏电流：由于肖特基二极管是由金属和半导体接触组成的，因此在正向偏置时，不会发生少数载流子注入的现象，从而降低了漏电流。</p>
<p>4温度特性好：由于金属与半导体接触，所以肖特基二极管具有良好的温度特性。在高温环境下，肖特基二极管的电性能仍能保持稳定。</p>
<p>因此，肖特基二极管在高频开关电路、低功耗电路和功率电子等领域中得到了广泛的应用。</p>
<p>三极管并联电阻</p>
<p>在三极管的放大电路中，通常会并联一个电阻，这个电阻被称为集电极负载电阻。</p>
<p>这个集电极负载电阻的作用是：</p>
<p>1稳定直流工作点：集电极负载电阻可以使三极管的直流工作点更加稳定。由于三极管是非线性器件，其直流放大倍数随着工作点的改变而变化。通过加入集电极负载电阻，可以限制直流工作点的漂移，保证放大电路的直流稳定性。</p>
<p>2改善交流性能：集电极负载电阻还可以改善放大电路的交流性能。通过控制集电极电流，可以改变三极管的放大倍数，从而实现对输入信号的放大。同时，集电极负载电阻还可以限制输出幅度，避免过度放大造成信号失真。</p>
<p>3防止三极管损坏：当输入信号过大时，三极管的集电极电压可能会超过其最大耐压值，从而造成三极管损坏。通过加入集电极负载电阻，可以限制输出幅度，避免超过三极管的最大耐压值，从而保护三极管。</p>
<p>因此，三极管放大电路中并联一个集电极负载电阻是一种常见的电路设计技巧，可以提高电路的性能和稳定性，同时保护三极管免受过电压损坏。</p>
<p>在三极管放大电路中，集电极负载电阻的阻值会影响电路的放大倍数、直流工作点以及输出电阻等性能。</p>
<p>通常情况下，集电极负载电阻的阻值需要根据具体的电路设计要求来确定。一般来说，阻值不应过大或过小，一般取值范围在几百欧姆到几千欧姆之间。</p>
<p>如果集电极负载电阻的阻值太大，会导致放大倍数过低，使得电路的放大效果不理想。另外，由于三极管的输出电阻较小，集电极负载电阻的阻值过大还会导致电路的输出电阻过大，降低电路的输出功率。</p>
<p>如果集电极负载电阻的阻值太小，会导致放大倍数过高，使得电路容易失真或产生饱和现象。同时，由于直流工作点的不稳定性，集电极负载电阻的阻值过小还会导致直流工作点的漂移，降低电路的直流稳定性。</p>
<p>因此，在实际电路设计中，需要根据具体要求综合考虑电路性能和稳定性等因素，选取适当的集电极负载电阻阻值。</p>
<p>测试发声</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUZZER	P00</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_0;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_OUT_PP;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P0, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	GPIO_config();</span><br><span class="line">	EA = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123; <span class="comment">// 每个循环约4ms，每秒1000ms/4ms = 200次，即频率为200Hz</span></span><br><span class="line">		P00 = <span class="number">1</span>;</span><br><span class="line">		delay_ms(<span class="number">2</span>);</span><br><span class="line">		P00 = <span class="number">0</span>;</span><br><span class="line">		delay_ms(<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过控制delay_ms的时间，控制发声的频率，来观察蜂鸣器的发声情况。</p>
<p>乐理知识</p>
<p>乐理知识从专业角度来说，包含了很多内容，包括音高、音阶、节奏、和声、旋律、调性、节拍等等方面的知识。</p>
<p>补充知识，不做要求。<br />
1音高：音高是音乐中的一个基本元素，指的是声音高低的程度。常用的表示音高的符号是音符，不同的音高可以使用不同的音符来表示。<br />
2音阶：音阶是一组按照音高顺序排列的音符组成的序列。常用的音阶包括了大调音阶和小调音阶等。<br />
3节奏：节奏是指音乐中的强弱、快慢、持续时间等方面的时间关系。节奏可以通过节拍器或其他的打击乐器来表现。<br />
4和声：和声是指多个声音同时进行时的相互关系。和声可以表现出不同的和声效果，如和弦、和声进程等。<br />
5旋律：旋律是指音乐中的主旋律，是由一系列按照音高顺序排列的音符组成的。旋律可以使用不同的节奏来表现出不同的效果。<br />
6调性：调性是指音乐中的调性关系。常用的调性包括了大调和小调等。<br />
7节拍：节拍是指音乐中的基本的时间单位，用于表示节奏的强弱、快慢等方面的特征。节拍通常使用不同的时间符号来表示。<br />
8同音重复：同音重复是指在不同的位置或时间上出现相同的音符或音高。</p>
<p>在此呢，我们不研究更全面更深入的乐理知识，我们从我们的常识方面入手，了解简单的发声即可。</p>
<p>哆来咪发唆拉西哆</p>
<p>哆来咪发唆拉西哆（Do-Re-Mi-Fa-So-La-Ti-Do）是音乐中的一个音阶记号，也是西方音乐中最基本的一个音阶。它由八个不同的音符组成，分别是：Do、Re、Mi、Fa、So、La、Ti、Do。这些音符分别代表了一个八度内的不同音高。</p>
<p>在音乐教学中，哆来咪发唆拉西哆常常被用来作为基础训练的内容。通过唱出哆来咪发唆拉西哆，可以帮助学生了解不同音符之间的音高关系，掌握音乐中的基本音程和旋律。同时，哆来咪发唆拉西哆也是很多歌曲的基础，学会了这个音阶，就可以更好地理解和演唱这些歌曲。</p>
<p>哆来咪发唆拉西哆可以用不同的乐谱表示方式来呈现。以下是常见的两种表示方式：</p>
<p>1数字表示法：数字表示法将每个音符用数字来代表，Do为1，Re为2，Mi为3，Fa为4，So为5，La为6，Ti为7，Do（高八度）为8。因此，哆来咪发唆拉西哆的数字表示法为：1 2 3 4 5 6 7 8。</p>
<p>2符号表示法：符号表示法用特定的符号来表示每个音符，包括大写字母（如C、D、E、F、G、A、B）、升降符号（如#、b）和八度符号（如’）。哆来咪发唆拉西哆的符号表示法为：C D E F G A B C’。</p>
<p>需要注意的是，不同的乐器和音高区间可能使用不同的记谱方式，但哆来咪发唆拉西哆作为最基本的音阶，通常都可以用以上两种方式表示。</p>
<p>十二平均律</p>
<p>十二平均律是现代西方音乐中最广泛使用的音高系统，它的作用可以从以下几个方面来理解：</p>
<p>1方便协调和配合：由于十二平均律将八度音程划分成12个等分，每个等分的音高间隔相等，不同的调式可以使用相同的音高间隔，因此方便不同乐器、不同声部之间的协调和配合。</p>
<p>2增加音乐的表现力：十二平均律中的半音音程比纯律（一种古老的音高系统）中的半音更小，因此可以创造更多的音高变化，增加音乐的表现力。</p>
<p>3适应和反映现代音乐的需求：现代音乐中常常出现的复杂和离奇的调性变化，需要更加灵活和多变的音高体系，而十二平均律可以提供这种灵活性和多变性。</p>
<p>总之，十二平均律作为一种现代音乐基础的音高系统，为不同音乐风格和流派的发展提供了有力的支持，成为现代音乐的不可或缺的一部分。</p>
<p>专业的术语理解起来比较抽象，对于乐理不是很了解的可以这样理解：<br />
1我们将音乐的音高分为12个等分。类似我们拼音中的4声(类比说法，还是有区别的)<br />
2我们在12个音高中对应了我们的哆来咪发唆拉西哆<br />
3要发出不同的音高，需要不同的频率来发声。</p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E4%BA%8C%E5%B9%B3%E5%9D%87%E5%BE%8B#%E5%8D%81%E4%BA%8C%E5%B9%B3%E5%9D%87%E5%BE%8B%E8%A1%A8">维基百科 十二平均律</a></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675061640660-d48264be-72d1-462e-971a-af8a467310b9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_32%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="12.png" /></p>
<p>结合十二平均律和哆来咪发唆拉西哆的符号表示法，我们可以得到下表</p>
<table>
<thead>
<tr>
<th>音高</th>
<th>数字表示</th>
<th>符号表示</th>
<th>频率</th>
</tr>
</thead>
<tbody>
<tr>
<td>哆</td>
<td>1</td>
<td>C</td>
<td>440×2123≈523.2511</td>
</tr>
<tr>
<td>来</td>
<td>2</td>
<td>D</td>
<td>440×2125≈587.3295</td>
</tr>
<tr>
<td>咪</td>
<td>3</td>
<td>E</td>
<td>440×2127≈659.2551</td>
</tr>
<tr>
<td>发</td>
<td>4</td>
<td>F</td>
<td>440×2128≈698.4564</td>
</tr>
<tr>
<td>唆</td>
<td>5</td>
<td>G</td>
<td>440×21210≈783.9908</td>
</tr>
<tr>
<td>拉</td>
<td>6</td>
<td>A</td>
<td>440×21212=880880×1=880</td>
</tr>
<tr>
<td>西</td>
<td>7</td>
<td>B</td>
<td>880×2122≈987.7666</td>
</tr>
<tr>
<td>哆</td>
<td>8</td>
<td>C’</td>
<td>880×2123≈1,046.5022</td>
</tr>
</tbody>
</table>
<p>此处的频率，就是我们的发声频率。</p>
<p>乐理补充内容</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679712482783-cec0bf03-f056-4eec-813a-e8aff41fefe8.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_29%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="76.png" /></p>
<p>上表为 十二平均律基础率表与频率计算对照表：</p>
<p>哆来咪发唆拉西哆 分别对应 CDEFGABC下一组</p>
<p>上面分为大字二组大字一组大字组小字组小字一组小字二组小字三组小字四组。</p>
<p>其实可以观察，他们的频率都是翻倍的。这些可以理解为音高不同。（有时候我们说唱歌时调子起高了，就是选了一组频率比较高的发声）</p>
<p>通常有些频率单片机通过定时或者PWM不容易做到。</p>
<p>更完整的八度音阶Octave和音符对照表Note：</p>
<table>
<thead>
<tr>
<th>Octave→ Note↓</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
</tr>
</thead>
<tbody>
<tr>
<td>C</td>
<td>16.352 (−48)</td>
<td>32.703 (−36)</td>
<td>65.406 (−24)</td>
<td>130.81 (−12)</td>
<td>261.63 (0)</td>
<td>523.25 (+12)</td>
<td>1046.5 (+24)</td>
<td>2093.0 (+36)</td>
<td>4186.0 (+48)</td>
<td>8372.0 (+60)</td>
</tr>
<tr>
<td>C♯/D♭</td>
<td>17.324 (−47)</td>
<td>34.648 (−35)</td>
<td>69.296 (−23)</td>
<td>138.59 (−11)</td>
<td>277.18 (+1)</td>
<td>554.37 (+13)</td>
<td>1108.7 (+25)</td>
<td>2217.5 (+37)</td>
<td>4434.9 (+49)</td>
<td>8869.8 (+61)</td>
</tr>
<tr>
<td>D</td>
<td>18.354 (−46)</td>
<td>36.708 (−34)</td>
<td>73.416 (−22)</td>
<td>146.83 (−10)</td>
<td>293.66 (+2)</td>
<td>587.33 (+14)</td>
<td>1174.7 (+26)</td>
<td>2349.3 (+38)</td>
<td>4698.6 (+50)</td>
<td>9397.3 (+62)</td>
</tr>
<tr>
<td>D♯/E♭</td>
<td>19.445 (−45)</td>
<td>38.891 (−33)</td>
<td>77.782 (−21)</td>
<td>155.56 (−9)</td>
<td>311.13 (+3)</td>
<td>622.25 (+15)</td>
<td>1244.5 (+27)</td>
<td>2489.0 (+39)</td>
<td>4978.0 (+51)</td>
<td>9956.1 (+63)</td>
</tr>
<tr>
<td>E</td>
<td>20.602 (−44)</td>
<td>41.203 (−32)</td>
<td>82.407 (−20)</td>
<td>164.81 (−8)</td>
<td>329.63 (+4)</td>
<td>659.26 (+16)</td>
<td>1318.5 (+28)</td>
<td>2637.0 (+40)</td>
<td>5274.0 (+52)</td>
<td>10548 (+64)</td>
</tr>
<tr>
<td>F</td>
<td>21.827 (−43)</td>
<td>43.654 (−31)</td>
<td>87.307 (−19)</td>
<td>174.61 (−7)</td>
<td>349.23 (+5)</td>
<td>698.46 (+17)</td>
<td>1396.9 (+29)</td>
<td>2793.8 (+41)</td>
<td>5587.7 (+53)</td>
<td>11175 (+65)</td>
</tr>
<tr>
<td>F♯/G♭</td>
<td>23.125 (−42)</td>
<td>46.249 (−30)</td>
<td>92.499 (−18)</td>
<td>185.00 (−6)</td>
<td>369.99 (+6)</td>
<td>739.99 (+18)</td>
<td>1480.0 (+30)</td>
<td>2960.0 (+42)</td>
<td>5919.9 (+54)</td>
<td>11840 (+66)</td>
</tr>
<tr>
<td>G</td>
<td>24.500 (−41)</td>
<td>48.999 (−29)</td>
<td>97.999 (−17)</td>
<td>196.00 (−5)</td>
<td>392.00 (+7)</td>
<td>783.99 (+19)</td>
<td>1568.0 (+31)</td>
<td>3136.0 (+43)</td>
<td>6271.9 (+55)</td>
<td>12544 (+67)</td>
</tr>
<tr>
<td>G♯/A♭</td>
<td>25.957 (−40)</td>
<td>51.913 (−28)</td>
<td>103.83 (−16)</td>
<td>207.65 (−4)</td>
<td>415.30 (+8)</td>
<td>830.61 (+20)</td>
<td>1661.2 (+32)</td>
<td>3322.4 (+44)</td>
<td>6644.9 (+56)</td>
<td>13290 (+68)</td>
</tr>
<tr>
<td>A</td>
<td>27.500 (−39)</td>
<td>55.000 (−27)</td>
<td>110.00 (−15)</td>
<td>220.00 (−3)</td>
<td>440.00 (+9)</td>
<td>880.00 (+21)</td>
<td>1760.0 (+33)</td>
<td>3520.0 (+45)</td>
<td>7040.0 (+57)</td>
<td>14080 (+69)</td>
</tr>
<tr>
<td>A♯/B♭</td>
<td>29.135 (−38)</td>
<td>58.270 (−26)</td>
<td>116.54 (−14)</td>
<td>233.08 (−2)</td>
<td>466.16 (+10)</td>
<td>932.33 (+22)</td>
<td>1864.7 (+34)</td>
<td>3729.3 (+46)</td>
<td>7458.6 (+58)</td>
<td>14917 (+70)</td>
</tr>
<tr>
<td>B</td>
<td>30.868 (−37)</td>
<td>61.735 (−25)</td>
<td>123.47 (−13)</td>
<td>246.94 (−1)</td>
<td>493.88 (+11)</td>
<td>987.77 (+23)</td>
<td>1975.5 (+35)</td>
<td>3951.1 (+47)</td>
<td>7902.1 (+59)</td>
<td>15804 (+71)</td>
</tr>
</tbody>
</table>
<p>乐理应用</p>
<p>Timer测试发声</p>
<p>我们通过timer进行 【哆来咪发唆拉西哆】 测试，timer的延时比较准确。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">通过Timer控制高低电平，测试蜂鸣器是否发声</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUZZER	P00</span></span><br><span class="line"><span class="comment">//			   C	 D    E 	F	 G	 A	  B	   C`</span></span><br><span class="line"><span class="comment">// u16 hz[] = &#123;523, 587, 659, 698, 784, 880, 988, 1047&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//			 C`	   D`     E`   F`	  G`	A`	  B`    C``</span></span><br><span class="line">u16 hz[] = &#123;<span class="number">1047</span>, <span class="number">1175</span>, <span class="number">1319</span>, <span class="number">1397</span>, <span class="number">1568</span>, <span class="number">1760</span>, <span class="number">1976</span>, <span class="number">2093</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">    GPIO_InitStructure.Pin  = GPIO_Pin_0;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">    GPIO_InitStructure.Mode = GPIO_OUT_PP;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">    GPIO_Inilize(GPIO_P0, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIMER_config</span><span class="params">(u8 idx)</span> </span>&#123;</span><br><span class="line">    TIM_InitTypeDef		TIM_InitStructure;						<span class="comment">//结构定义</span></span><br><span class="line">    TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;	<span class="comment">//指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TIM_8BitAutoReload,TIM_16BitAutoReloadNoMask</span></span><br><span class="line">    TIM_InitStructure.TIM_Priority    = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">    TIM_InitStructure.TIM_Interrupt = ENABLE;					<span class="comment">//中断是否允许,   ENABLE或DISABLE</span></span><br><span class="line">    TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;		<span class="comment">//指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_Ext</span></span><br><span class="line">    TIM_InitStructure.TIM_ClkOut    = DISABLE;				<span class="comment">//是否输出高速脉冲, ENABLE或DISABLE</span></span><br><span class="line">    TIM_InitStructure.TIM_Value     = <span class="number">65536UL</span> - (MAIN_Fosc / (hz[idx] * <span class="number">2</span>));		<span class="comment">//初值,</span></span><br><span class="line">    TIM_InitStructure.TIM_Run       = ENABLE;					<span class="comment">//是否初始化后启动定时器, ENABLE或DISABLE</span></span><br><span class="line">    Timer_Inilize(Timer0,&amp;TIM_InitStructure);					<span class="comment">//初始化Timer0	  Timer0,Timer1,Timer2,Timer3,Timer4</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer0_call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    P00 = !P00;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    u8 idx = <span class="number">0</span>;</span><br><span class="line">    GPIO_config();</span><br><span class="line">    TIMER_config();</span><br><span class="line">    EA = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        TIMER_config(idx);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(++idx &gt; <span class="number">7</span>) &#123;</span><br><span class="line">            idx = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">				</span><br><span class="line">        delay_ms(<span class="number">250</span>);</span><br><span class="line">        delay_ms(<span class="number">250</span>);</span><br><span class="line">        delay_ms(<span class="number">250</span>);</span><br><span class="line">        delay_ms(<span class="number">250</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PWM测试发声</p>
<p>最准确的方式我们还可以选择PWM进行控制，这个也是常用的方式。</p>
<table>
<thead>
<tr>
<th>PWM</th>
<th>PWM通道</th>
<th>对应引脚</th>
</tr>
</thead>
<tbody>
<tr>
<td>PWMB</td>
<td>PWM5</td>
<td>P0.0</td>
</tr>
<tr>
<td>P1.7</td>
<td></td>
<td></td>
</tr>
<tr>
<td>P2.0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>PWM6</td>
<td>P0.1</td>
<td></td>
</tr>
<tr>
<td>P2.1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>P5.4</td>
<td></td>
<td></td>
</tr>
<tr>
<td>PWM7</td>
<td>P0.2</td>
<td></td>
</tr>
<tr>
<td>P2.2</td>
<td></td>
<td></td>
</tr>
<tr>
<td>P3.3</td>
<td></td>
<td></td>
</tr>
<tr>
<td>PWM8</td>
<td>P0.3</td>
<td></td>
</tr>
<tr>
<td>P2.3</td>
<td></td>
<td></td>
</tr>
<tr>
<td>P3.4</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">通过Timer控制高低电平，测试蜂鸣器是否发声</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PWM.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUZZER	P00</span></span><br><span class="line"><span class="comment">//			     C	  D    E	  F	   G	  A	   B	  C`</span></span><br><span class="line">u16 hz[] = &#123;<span class="number">523</span>, <span class="number">587</span>, <span class="number">659</span>, <span class="number">698</span>, <span class="number">784</span>, <span class="number">880</span>, <span class="number">988</span>, <span class="number">1047</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//			    	 C`	   D`     E`	 F`	   G`	  A`	   B`  	C``</span></span><br><span class="line">u16 hz1[] = &#123;<span class="number">1047</span>, <span class="number">1175</span>, <span class="number">1319</span>, <span class="number">1397</span>, <span class="number">1568</span>, <span class="number">1760</span>, <span class="number">1976</span>, <span class="number">2093</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">    GPIO_InitStructure.Pin  = GPIO_Pin_0;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">    GPIO_InitStructure.Mode = GPIO_OUT_PP;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">    GPIO_Inilize(GPIO_P0, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PWM_play</span><span class="params">(u16 hz_val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    u16 Peroid = MAIN_Fosc / hz_val - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    PWMx_InitDefine		PWMx_InitStructure;</span><br><span class="line">    <span class="comment">// 总配置</span></span><br><span class="line">    <span class="comment">// (MAIN_Fosc / 1000 - 1) 周期计数值</span></span><br><span class="line">    PWMx_InitStructure.PWM_Period   		= Peroid;	<span class="comment">//周期时间,   0~65535</span></span><br><span class="line">    PWMx_InitStructure.PWM_DeadTime 		= <span class="number">0</span>;								<span class="comment">//死区发生器设置, 0~255</span></span><br><span class="line">    PWMx_InitStructure.PWM_EnoSelect		= ENO5P;	<span class="comment">//输出通道选择,	ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P</span></span><br><span class="line">    PWMx_InitStructure.PWM_PS_SW    		= PWM5_SW_P00;<span class="comment">//切换端口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体PWM端口配置</span></span><br><span class="line">    <span class="comment">// pwm6</span></span><br><span class="line">    PWMx_InitStructure.PWM5_Mode    		=	CCMRn_PWM_MODE1;	<span class="comment">//模式,		CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2</span></span><br><span class="line">    PWMx_InitStructure.PWM5_Duty    		= Peroid / <span class="number">2</span>;			<span class="comment">//PWM4占空比时间, 0~Period</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// pwm6</span></span><br><span class="line">    PWMx_InitStructure.PWM_CC5Enable   = ENABLE;				<span class="comment">//开启PWM6P输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// PWM启动配置</span></span><br><span class="line">    PWMx_InitStructure.PWM_MainOutEnable= ENABLE;				<span class="comment">//主输出使能, ENABLE,DISABLE</span></span><br><span class="line">    PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;				<span class="comment">//使能计数器, ENABLE,DISABLE</span></span><br><span class="line">    PWM_Configuration(PWMB, &amp;PWMx_InitStructure);				<span class="comment">//初始化PWM,  PWMA,PWMB</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    u8 len;</span><br><span class="line">    u8 i;</span><br><span class="line">    GPIO_config();</span><br><span class="line">    <span class="comment">// EA = 1;</span></span><br><span class="line"></span><br><span class="line">    len = <span class="keyword">sizeof</span>(hz) / <span class="keyword">sizeof</span>(u16);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            PWM_play(hz[i]);</span><br><span class="line"></span><br><span class="line">            delay_ms(<span class="number">250</span>);</span><br><span class="line">            delay_ms(<span class="number">250</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PWM驱动封装</p>
<p>可以将蜂鸣器的代码进行封装，这样方便以后调用</p>
<p>Buzzer.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __BUZZER_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __BUZZER_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_beep</span><span class="params">(u16 hz)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_stop</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>Buzzer.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Buzzer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PWM.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">    GPIO_InitStructure.Pin  = GPIO_Pin_0;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">    GPIO_InitStructure.Mode = GPIO_OUT_PP;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">    GPIO_Inilize(GPIO_P0, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    GPIO_config();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_beep</span><span class="params">(u16 hz_val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    u16 Peroid = MAIN_Fosc / hz_val - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    PWMx_InitDefine		PWMx_InitStructure;</span><br><span class="line">    <span class="comment">// 总配置</span></span><br><span class="line">    <span class="comment">// (MAIN_Fosc / 1000 - 1) 周期计数值</span></span><br><span class="line">    PWMx_InitStructure.PWM_Period   		= Peroid;	<span class="comment">//周期时间,   0~65535</span></span><br><span class="line">    PWMx_InitStructure.PWM_DeadTime 		= <span class="number">0</span>;								<span class="comment">//死区发生器设置, 0~255</span></span><br><span class="line">    PWMx_InitStructure.PWM_EnoSelect		= ENO5P;	<span class="comment">//输出通道选择,	ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P</span></span><br><span class="line">    PWMx_InitStructure.PWM_PS_SW    		= PWM5_SW_P00;<span class="comment">//切换端口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体PWM端口配置</span></span><br><span class="line">    <span class="comment">// pwm6</span></span><br><span class="line">    PWMx_InitStructure.PWM5_Mode    		=	CCMRn_PWM_MODE1;	<span class="comment">//模式,		CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2</span></span><br><span class="line">    PWMx_InitStructure.PWM5_Duty    		= Peroid / <span class="number">2</span>;			<span class="comment">//PWM4占空比时间, 0~Period</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// pwm6</span></span><br><span class="line">    PWMx_InitStructure.PWM_CC5Enable   = ENABLE;				<span class="comment">//开启PWM6P输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// PWM启动配置</span></span><br><span class="line">    PWMx_InitStructure.PWM_MainOutEnable= ENABLE;				<span class="comment">//主输出使能, ENABLE,DISABLE</span></span><br><span class="line">    PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;				<span class="comment">//使能计数器, ENABLE,DISABLE</span></span><br><span class="line">    PWM_Configuration(PWMB, &amp;PWMx_InitStructure);				<span class="comment">//初始化PWM,  PWMA,PWMB</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_stop</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    PWMx_InitDefine		PWMx_InitStructure;</span><br><span class="line">    PWMx_InitStructure.PWM_MainOutEnable= DISABLE;				<span class="comment">//主输出使能, ENABLE,DISABLE</span></span><br><span class="line">    PWMx_InitStructure.PWM_CEN_Enable   = DISABLE;				<span class="comment">//使能计数器, ENABLE,DISABLE</span></span><br><span class="line">    PWM_Configuration(PWMB, &amp;PWMx_InitStructure);				<span class="comment">//初始化PWM,  PWMA,PWMB</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>乐谱</p>
<p>我们在此讨论的乐谱，只包含两个部分，一个是哆来咪发唆拉西哆，另外一个就是节拍，在发声过程中，节拍是指一个音的发音时长。</p>
<p>以两只老虎为例：<a href="http://www.jianpu.cn/pu/33/33945.htm">http://www.jianpu.cn/pu/33/33945.htm</a></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679660462825-27a79da4-7bfb-4c93-b241-2672e0b7a06d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_17%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="71.png" /></p>
<p>乐谱中的 1234567，就是我们所说的 哆来咪发唆拉西。</p>
<p>接下来我们理解节拍。</p>
<p>时长约定</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679660898323-193e8c0c-ac79-427e-8533-22a502e4f8a3.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="73.png" /></p>
<p>1231有4个音符，每个音符默认是4个单位。具体一个单位时长是多少，后面我们可以定义具体值。</p>
<p>音符后的-</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679661362676-892a01e2-cbb3-4bcf-9e37-0cd0c2ca2e06.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_9%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="75.png" /></p>
<p>通常表示休止符，用来控制乐曲的节奏和节拍，表示停顿一个节拍，也就是4个单位时间.</p>
<p>上图为例，345后面是一个横杠，表示上一个音持续发音，则345分别对应的音长为4个单位、4个单位、8个单位</p>
<p>音符的下划线</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679661233019-eaf6913b-5705-4ad3-abd6-361e3624b743.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_11%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="74.png" /></p>
<p>一条下划线表示，时间缩短一半。</p>
<p>上图为例：</p>
<p>1后面31没有任何修饰，每个占据4个单位;</p>
<p>256下面是一条长横线，其中6下面还有一条短杠。6的时长是一半的一边，则是1个单位。</p>
<p>356下面是一条长横线，5的时长理论上就是一半，为2个单位。（但是后面有个点）</p>
<p>音符后跟圆点</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679661233019-eaf6913b-5705-4ad3-abd6-361e3624b743.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_11%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="74.png" /></p>
<p>在简谱中，音符后面跟一个圆点表示这个音符的时值被延长了一半。例如，一个四分音符加上一个圆点，表示时值相当于一个四分音符加一个八分音符的时值。这个符号称为“附点”，它可以使节奏更加灵活。</p>
<p>以上图为例：</p>
<p>156下面是一条长横线，5的时长理论上就是一半，为2个单位，但是后面有个圆点，表示在现有基础上增加一半，也就是3个单位</p>
<p>两只老虎的音长</p>
<table>
<thead>
<tr>
<th>简谱</th>
<th>1231                            1231                           345-        345-</th>
</tr>
</thead>
<tbody>
<tr>
<td>音长</td>
<td>4444                            4444                           448              448</td>
</tr>
<tr>
<td>词</td>
<td>两只老虎                     两只老虎                    跑得快         跑得快</td>
</tr>
<tr>
<td>简谱</td>
<td>565431                 565431                  151             151</td>
</tr>
<tr>
<td>音长</td>
<td>313144                 313144                  448              448</td>
</tr>
<tr>
<td>词</td>
<td>一只没有眼睛       一只没有耳朵       真奇怪       真奇怪</td>
</tr>
</tbody>
</table>
<p>音符0</p>
<p>在音乐中，音符0一般表示一种特殊的音符，称为休止符或停顿符，通常用来表示音乐的停顿或静默部分。休止符可以有不同的时值，例如四分之一休止符、八分之一休止符等。在简谱中，通常用一个数字0来表示休止符，放在对应的位置上，表示在该位置上没有音符需要演奏。</p>
<p>音符上弧形</p>
<p>两个音之间没有暂停间隔，连音音符</p>
<p>抽象封装</p>
<p>将乐谱分为简谱和音长进行封装:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">u8 notes[] = &#123;</span><br><span class="line">	<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>,				<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>,				<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,		<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,</span><br><span class="line">	<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>,		<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>,		<span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,		<span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">u8 durations[] = &#123;</span><br><span class="line">	<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>,				<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>,				<span class="number">4</span>, <span class="number">4</span>, <span class="number">8</span>,		<span class="number">4</span>, <span class="number">4</span>, <span class="number">8</span>,</span><br><span class="line">	<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>,		<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>,		<span class="number">4</span>, <span class="number">4</span>, <span class="number">8</span>,		<span class="number">4</span>, <span class="number">4</span>, <span class="number">8</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>对Buzzer的封装定义更加简谱化，不需要考虑发声频率。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_beep</span><span class="params">(u8 note)</span></span>;</span><br><span class="line"></span><br><span class="line">u16 FREQS[] = &#123;<span class="number">523</span>, <span class="number">587</span>, <span class="number">659</span>, <span class="number">698</span>, <span class="number">784</span>, <span class="number">880</span>, <span class="number">988</span>, <span class="number">523</span> * <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_beep</span><span class="params">(u8 note)</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">	u16 hz = FREQS[note - <span class="number">1</span>];</span><br><span class="line">	u16 period = MAIN_Fosc / hz - <span class="number">1</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>调用时，就能完整的播放一首曲子了：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">len = <span class="keyword">sizeof</span>(notes) / <span class="keyword">sizeof</span>(u8);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len;i++) &#123;</span><br><span class="line">    Buzzer_beep(notes[i]);</span><br><span class="line">	d = durations[i] * <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">while</span>(d--) delay_ms(<span class="number">1</span>);</span><br><span class="line">	Buzzer_stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>几首曲子</p>
<p><a href="http://www.jianpu.cn/pu/11/111217.htm">http://www.jianpu.cn/pu/11/111217.htm</a></p>
<p><a href="http://www.jianpu.cn/pu/26/266965.htm">http://www.jianpu.cn/pu/26/266965.htm</a></p>
<p>天空之城源码</p>
<p>曲子设计</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	L1	1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	L2	2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	L3	3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	L4	4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	L5	5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	L6	6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	L7	7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N0 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	N1	L1 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	N2	L2 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	N3	L3 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	N4	L4 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	N5	L5 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	N6	L6 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	N7	L7 + 7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	H1	N1 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	H2	N2 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	H3	N3 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	H4	N4 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	H5	N5 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	H6	N6 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>	H7	N7 + 7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">u8 notes[] = &#123;</span><br><span class="line">    N6, N7, 			 H1, N7, H1, H3, 	  N7, N3, N3, 			N6, N5, N6, H1, 		 N5, N0, N3, N3,		N4, N3, N4, H1,</span><br><span class="line">    N3, N0, H1, H1, H1,  N7, N4, N4, N7,	  N7, N0, N6, N7, 		H1, N7, H1, H3,			 N7, N0, N3, N3,		N6, N5, N6, H1,</span><br><span class="line">    N5, N0, N3, 		 N4, H1, N7, N7, H1,  H2, H2, H3, H1, N0,   H1, N7, N6, N6, N7, N5,	 N6, N0, H1, H2,		H3, H2, H3, H5,</span><br><span class="line">    H2, N0, N5,	N5,		 H1, N7, H1, H3,	  H3, N0, N0,			N6, N7, H1, N7, H2, H2,  H1, N5, N5, N0,		H4, H3, H2, H1,</span><br><span class="line">    H3, 		 		 H3, N0, H3,		  H6, H5, H5,			H3, H2, H1, N0, H1, 	 H2, H1, H2, H2, H5, 	H3, N0, H3,</span><br><span class="line">    H6,	H5,				 H3, H2, H1, N0, H1,  H2, H1, H2, H2, N7,   N6, N0, </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">u8 durations[] = &#123;</span><br><span class="line">    <span class="number">2</span>, <span class="number">2</span>, 				<span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, 		  <span class="number">12</span>, <span class="number">2</span>, <span class="number">2</span>, 			<span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, 			<span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>,				<span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>,</span><br><span class="line">    <span class="number">8</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, 	    <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,			  <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, 			<span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,				<span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>,				<span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,</span><br><span class="line">    <span class="number">12</span>, <span class="number">2</span>, <span class="number">2</span>, 			<span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,		  <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, 		<span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,		<span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>,				<span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,</span><br><span class="line">    <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>,			<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,			  <span class="number">8</span>, <span class="number">4</span>, <span class="number">4</span>,				<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, 		<span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,				<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>,</span><br><span class="line">    <span class="number">16</span>, 				<span class="number">8</span>, <span class="number">4</span>,	<span class="number">4</span>,			  <span class="number">8</span>, <span class="number">4</span>, <span class="number">4</span>,				<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, 			<span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, 		    <span class="number">8</span>, <span class="number">4</span>, <span class="number">4</span>,</span><br><span class="line">    <span class="number">8</span>, <span class="number">8</span>,				<span class="number">2</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">2</span>, 		  <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, 		<span class="number">8</span>, <span class="number">4</span>, </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>频率设计</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">u16 FREQS[] = &#123;</span><br><span class="line">	<span class="number">523</span> * <span class="number">1</span>, <span class="number">587</span> * <span class="number">1</span>, <span class="number">659</span> * <span class="number">1</span>, <span class="number">698</span> * <span class="number">1</span>, <span class="number">784</span> * <span class="number">1</span>, <span class="number">880</span> * <span class="number">1</span>, <span class="number">988</span> * <span class="number">1</span>, </span><br><span class="line">	<span class="number">523</span> * <span class="number">2</span>, <span class="number">587</span> * <span class="number">2</span>, <span class="number">659</span> * <span class="number">2</span>, <span class="number">698</span> * <span class="number">2</span>, <span class="number">784</span> * <span class="number">2</span>, <span class="number">880</span> * <span class="number">2</span>, <span class="number">988</span> * <span class="number">2</span>, </span><br><span class="line">	<span class="number">523</span> * <span class="number">4</span>, <span class="number">587</span> * <span class="number">4</span>, <span class="number">659</span> * <span class="number">4</span>, <span class="number">698</span> * <span class="number">4</span>, <span class="number">784</span> * <span class="number">4</span>, <span class="number">880</span> * <span class="number">4</span>, <span class="number">988</span> * <span class="number">4</span>, </span><br><span class="line">	<span class="number">523</span> * <span class="number">8</span>, <span class="number">587</span> * <span class="number">8</span>, <span class="number">659</span> * <span class="number">8</span>, <span class="number">698</span> * <span class="number">8</span>, <span class="number">784</span> * <span class="number">8</span>, <span class="number">880</span> * <span class="number">8</span>, <span class="number">988</span> * <span class="number">8</span>, </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>练习题</p>
<p>1实现一个键盘小钢琴</p>
<p>2尝试播放几首曲子</p>
]]></content>
  </entry>
  <entry>
    <title>逻辑分析仪</title>
    <url>/%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90%E4%BB%AA.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="逻辑分析仪"><a class="markdownIt-Anchor" href="#逻辑分析仪"></a> 逻辑分析仪</h1>
<p>学习目标</p>
<p>1学会使用逻辑分析仪分析调试电路中的IO信号</p>
<p>学习内容</p>
<p>什么是逻辑分析仪</p>
<p>逻辑分析仪（Logic Analyzer）是一种工具，用于分析数字信号，例如控制信号，时钟信号等等。它可以用于调试和验证数字电路、嵌入式系统等等。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/jpeg/21441195/1678962499216-0ddd6a62-ed0d-4b22-836c-58d99ae64290.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_37%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0%2Finterlace%2C1" alt="21.jpg" /></p>
<p>本教程采用的是mini版USB 逻辑分析仪。总共有10个端口，其中8个为分析通道，一个时钟信号，一个是GND。</p>
<p>8路通道可以同时测8路信号。</p>
<p>软件安装</p>
<p>安装提供的安装包，根据实际情况进行安装选择所需要的版本</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042046393-ce7ab492-4ef7-49b3-b289-a9457959b4f8.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="43.png" /></p>
<p>●安装2.4.7版本</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042120651-115f1030-27c0-41dc-9e4e-6fa0bea194b3.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="37.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042131590-c49826ab-5777-4a34-9419-95b6359ff014.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="38.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042140014-abd7a6d8-88bf-4e4a-853d-3858ea701f31.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="39.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042156848-bf2d3b66-6ba6-4d6f-ab0d-72707feb39b5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="40.png" /></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042168321-5a19980e-dff4-4e00-b976-eaa5dcba94bd.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="41.png" /></p>
<p>功能介绍</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042179699-51884458-4a57-41b7-b9dd-024937a4cf96.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_55%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="42.png" /></p>
<p>大致关注几个区，后续过程中我们会陆续学会所有功能。</p>
<p>●主界面中的顶部，如果显示Disconnected，说明逻辑分析仪没有和PC电脑连接；如果显示Connected,表示已经连接</p>
<p>●菜单部分</p>
<p>●8个调试通道</p>
<p>●右侧功能部分，绿色按钮为调试按钮</p>
<p>使用逻辑分析仪测试点灯</p>
<p>分析测试</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678964797793-b1f402aa-9502-4d78-a476-6d9f6b16fa5e.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_31%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="01.png" /></p>
<p>测试P5.3端口是否是1秒钟高电平1秒钟低电平</p>
<p>接线</p>
<p>将逻辑分析仪的通道1线和开发板中的P5.3引脚连接。</p>
<p>将逻辑分析仪的GND线和开发板的GND连接。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678965322575-50c9ef72-f9f6-40fa-9ea2-460442eb3bfb.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="29.png" /></p>
<p>测试</p>
<p>将LED的代码烧录到开发板中，并且运行。</p>
<p>打开逻辑分析仪的软件(Logic)，查看是否和逻辑分析仪连接，点击按钮进行测试</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042992688-6992aecf-c4da-404b-93d8-fb8091e60eb0.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_55%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="44.png" /></p>
<p>●配置采样率，最高24MS/s</p>
<p>●点击绿色按钮进行采用</p>
<p>观察通道1，通过鼠标滚轮缩放，查看波形。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679043121549-76505f8d-d772-431c-89e1-d8e41865f19a.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_55%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="45.png" /></p>
<p>鼠标放到悬浮窗上，可以查看高低电平持续时间。</p>
<p>练习题</p>
<p>1安装逻辑分析仪调试软件</p>
<p>2使用逻辑分析仪调试IO口</p>
<p>3解决连不上的问题</p>
]]></content>
  </entry>
  <entry>
    <title>问题汇总✍️</title>
    <url>/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%E2%9C%8D%EF%B8%8F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="问题汇总️"><a class="markdownIt-Anchor" href="#问题汇总️"></a> 问题汇总✍️</h1>
<p>将问题通过评论留言形式进行汇总<br />
其他后期问题也会分类整理到此文档下</p>
<p>Keil相关问题</p>
<p>Keil C51安装问题</p>
<p>1文件安装路径问题：安装路径不要有空格和中文</p>
<p>2激活问题：需要用管理员权限打开keil</p>
<p>3启动问题：提供一个快捷的启动方式，方便程序以后打开</p>
<p>Keil中文内容乱码</p>
<p>如下图，中文内容乱码</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1688568026785-c217c0d9-8470-4172-8a37-7376653cd39d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_29%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>
<p>解决：</p>
<p>按照如下方式将编码改为GB2312</p>
<p>1打开Edit -&gt; Configuration …</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1688568133695-9b38116e-a1a9-4cb3-aade-9eb9a28c009c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_11%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p>
<p>2修改Editor -&gt; Encoding 为 Chinese GB2312 (Simplified)</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1688568173035-d3585e4f-f68f-4c2b-bbad-b36448b8dbd4.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_22%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_626%2Climit_0" alt="image.png" /></p>
<p>其他工具问题</p>
<p>STC-ISP烧录工具</p>
<p>1启动问题：不需要安装，解压即可使用，但是要提供一个快捷的启动方式，方便程序以后打开</p>
]]></content>
  </entry>
  <entry>
    <title>集成电路与机器人应用开发</title>
    <url>/%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF%E4%B8%8E%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>集成电路与机器人应用开发</p>
<p><a href="https://www.yuque.com/icheima/diyos/ymhslnvazbmn7m63"><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1682650340645-7d369c42-e5c0-4858-9716-f5ea39ebc9c3.png" alt="img" />自己动手写嵌入式操作系统 · 语雀什么是操作系统计算机的核心原理其实非常简单，初学计算机…</a></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/assets/88660/png/cover_3.png" alt="img" /><a href="https://www.yuque.com/icheima/th7wl6"><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/assets/88660/png/cover_3.png" alt="img" />就业指导课黑马程序员集成电路与机器人学科就业指导课集成电路与机器人应用开发</a></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://www.itheima.com/favicon.ico" alt="img" /></p>
<p>开源共享</p>
<p>知识库</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1685953251658-2afed896-1afe-45b8-bf06-fe1b0717fad7.png" alt="img" /></p>
<p>学习路线图</p>
<p>不积跬步无以至千里 short steps leads to thousands of miles</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1687328450648-4fd69b41-71b7-421f-aa60-0723a331c281.png" alt="img" /></p>
<p>模电数电基础</p>
<p>模拟电路和数字电路基础</p>
<p>1220 次看过</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1686828242361-250d15b1-db77-482d-b3f4-bb6613ee3c4e.png" alt="img" /></p>
<p><a href="/C%E8%AF%AD%E8%A8%80.md">C语言</a></p>
<a href="#">Post not found: C语言 C语言</a>
<a href="#">Post not found: C语言</a>
<p>C语言的应用极其广泛，从网站后台，到底层操作系统，到嵌入式开发，从多媒体应用到大型网络游戏，均可使用C语言来开发。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1685953014714-37401805-718c-4dad-bdd7-92fdcf3cafce.png" alt="img" /></p>
<p>STC8增强型单片机开发</p>
<p>2023国芯启航！</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1685956025573-041e3c72-0940-4e05-ae3f-e323ceeb975e.png" alt="img" /></p>
<p>Python与上位机开发</p>
<p>pyqt yyds</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1685956246495-60efe5bb-3ef0-4587-856f-f272e8380f95.png" alt="img" /></p>
<p>GD32/STM32开发</p>
<p>高性能嵌入式ARM微处理器开发</p>
<p>19485 次看过</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1685953279623-7e80a01a-490e-49af-bd38-6eebcc8cbea5.png" alt="img" /></p>
<p>平衡车案例</p>
<p>基于gd32/stm32的平衡车 gd32f470 stm32f429zgt6 pin2pin代替</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1685952760044-65937832-4231-432e-a9e3-040c8986180b.png" alt="img" /></p>
<p>OpenHarmony开发</p>
<p>开源鸿蒙操作系统</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1687232672518-0d66b22d-71ed-4003-88d9-fab86c24f379.png" alt="img" /></p>
<p>机器学习</p>
<p>机器学习是一种强大的技术，它使计算机能够从数据中学习并自动适应。通过机器学习，我们能够构建智能系统，使其具备从数</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1688616583850-f359626f-ba7a-4159-82df-f8e314c23328.png" alt="img" /></p>
<p>多路舵机机器人项目</p>
<p>在正确的时间，做出正确的动作，这就是机器人控制，机器人是多个自由度关节的组合。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/assets/88660/png/cover_3.png" alt="img" /></p>
<p>ROS机器人操作系统</p>
]]></content>
  </entry>
  <entry>
    <title>震动马达</title>
    <url>/%E9%9C%87%E5%8A%A8%E9%A9%AC%E8%BE%BE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="震动马达"><a class="markdownIt-Anchor" href="#震动马达"></a> 震动马达</h1>
<p>学习目标</p>
<p>1控制马达震动</p>
<p>学习内容</p>
<p>原理图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679398392241-4b7f4389-1adc-4eea-a43e-9fc4f0a336da.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_25%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="57.png" /></p>
<p>控制分析</p>
<p>S8050 NPN三极管特性</p>
<p>NPN型三极管的工作原理是基于PN结和PNP型晶体管的工作原理。</p>
<p>当外加正向电压时，发射区的P型半导体被注入少量的N型载流子（电子），这些电子被加速并向基区移动。在基区，电子与空穴结合，从而减少了空穴的浓度。当基区浓度低于发射区浓度时，电子会进一步扩散到集电区，导致集电区产生电流。</p>
<p>当外加反向电压时，PN结会被反向偏置。此时，电子和空穴被吸引到PN结中心，从而阻止了电流的流动。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679399750823-1cc6cbc0-be41-42fc-86a9-78cc127026b2.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_16%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="58.png" /></p>
<p>B: base,  基极。（理解：基于/根据 这个条件做什么事情）</p>
<p>E: emitter, 发射极。（理解：发射端，入口）</p>
<p>C: collector, 集电极。（理解：收集电的区域，用电的器件在这个区域）</p>
<p>NPN型三极管，C极为输入端，E极为输出端，B极为控制端</p>
<p>B极 为高电平时，E极到C极的电路截止，正常导通。</p>
<p>B极 为低电平时，E极到C极的电路打开，无法导通。</p>
<p>震动控制</p>
<p>通过P0.1引脚控制马达震动。</p>
<p>功能设计</p>
<p>实现震动马达的震动。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOTOR P01</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_1;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_OUT_PP;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P0, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	GPIO_config();</span><br><span class="line">	</span><br><span class="line">	EA = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">		MOTOR = <span class="number">1</span>;</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">		MOTOR = <span class="number">0</span>;</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">		delay_ms(<span class="number">250</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现的是1秒钟控制一次马达震动。</p>
<p>练习题</p>
<p>1实现震动马达震动</p>
<p>2通过串口控制马达的震动和停止</p>
]]></content>
  </entry>
  <entry>
    <title>震动马达PWM</title>
    <url>/%E9%9C%87%E5%8A%A8%E9%A9%AC%E8%BE%BEPWM.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="震动马达pwm"><a class="markdownIt-Anchor" href="#震动马达pwm"></a> 震动马达PWM</h1>
<p>学习目标</p>
<p>1学习如何在STC8H上配置PWMB</p>
<p>2掌握PWMB的各个配置</p>
<p>3学习如何使用PWMB控制震动马达</p>
<p>4掌握调试PWM的方法</p>
<p>学习内容</p>
<p>PWMB的应用</p>
<p>实现不同占空比下的震动的效果</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PWM.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;UART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PERIOD	(MAIN_Fosc / 1000)</span></span><br><span class="line"></span><br><span class="line">PWMx_Duty PWMB_Duty;</span><br><span class="line">u8 duty = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	GPIO_InitTypeDef	GPIO_InitStructure;		<span class="comment">//结构定义</span></span><br><span class="line">	GPIO_InitStructure.Pin  = GPIO_Pin_1;		<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">	GPIO_InitStructure.Mode = GPIO_OUT_PP;	<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">	GPIO_Inilize(GPIO_P0, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>	<span class="title">PWM_config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PWMx_InitDefine		PWMx_InitStructure;</span><br><span class="line"></span><br><span class="line">	PWMx_InitStructure.PWM_Period   		= PERIOD  - <span class="number">1</span>;	<span class="comment">//周期时间,   0~65535</span></span><br><span class="line">	PWMx_InitStructure.PWM_DeadTime 		= <span class="number">0</span>;								<span class="comment">//死区发生器设置, 0~255</span></span><br><span class="line">	PWMx_InitStructure.PWM_EnoSelect		= ENO6P;	<span class="comment">//输出通道选择,	ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P</span></span><br><span class="line">	</span><br><span class="line">	PWMx_InitStructure.PWM6_Mode    		=	CCMRn_PWM_MODE1;	<span class="comment">//模式,		CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2</span></span><br><span class="line">	PWMx_InitStructure.PWM6_Duty    		= PWMB_Duty.PWM6_Duty;	<span class="comment">//PWM4占空比时间, 0~Period</span></span><br><span class="line">	</span><br><span class="line">	PWMx_InitStructure.PWM_PS_SW    		=	PWM6_SW_P01;<span class="comment">//切换端口</span></span><br><span class="line"></span><br><span class="line">	PWMx_InitStructure.PWM_CC6Enable   = ENABLE;				<span class="comment">//开启PWM6输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line">	</span><br><span class="line">	PWMx_InitStructure.PWM_MainOutEnable= ENABLE;				<span class="comment">//主输出使能, ENABLE,DISABLE</span></span><br><span class="line">	PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;				<span class="comment">//使能计数器, ENABLE,DISABLE</span></span><br><span class="line">	PWM_Configuration(PWMB, &amp;PWMx_InitStructure);				<span class="comment">//初始化PWM,  PWMA,PWMB</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_config</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	COMx_InitDefine		COMx_InitStructure;					<span class="comment">//结构定义</span></span><br><span class="line">	COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;	<span class="comment">//模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit_BRTx</span></span><br><span class="line">	COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;			<span class="comment">//选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使用BRT_Timer2)</span></span><br><span class="line">	COMx_InitStructure.UART_BaudRate  = <span class="number">115200ul</span>;			<span class="comment">//波特率, 一般 110 ~ 115200</span></span><br><span class="line">	COMx_InitStructure.UART_RxEnable  = ENABLE;				<span class="comment">//接收允许,   ENABLE或DISABLE</span></span><br><span class="line">	COMx_InitStructure.BaudRateDouble = DISABLE;			<span class="comment">//波特率加倍, ENABLE或DISABLE</span></span><br><span class="line">	COMx_InitStructure.UART_Interrupt = ENABLE;				<span class="comment">//中断允许,   ENABLE或DISABLE</span></span><br><span class="line">	COMx_InitStructure.UART_Priority    = Priority_0;			<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">	COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31;	<span class="comment">//切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44</span></span><br><span class="line">	UART_Configuration(UART1, &amp;COMx_InitStructure);		<span class="comment">//初始化串口1 UART1,UART2,UART3,UART4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	u8 i;</span><br><span class="line">	UART_config();</span><br><span class="line">	GPIO_config();</span><br><span class="line">	PWM_config();</span><br><span class="line"></span><br><span class="line">	EA = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	PWMB_Duty.PWM6_Duty = PERIOD * duty / <span class="number">100</span>;</span><br><span class="line">	UpdatePwm(PWMB, &amp;PWMB_Duty);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;	</span><br><span class="line">		delay_ms(<span class="number">10</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(COM1.RX_TimeOut &gt; <span class="number">0</span>)		<span class="comment">//超时计数</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(--COM1.RX_TimeOut == <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(COM1.RX_Cnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">					<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;COM1.RX_Cnt; i++) &#123;</span><br><span class="line">						<span class="comment">// RX1_Buffer[i]接收的字节</span></span><br><span class="line">						<span class="comment">// <span class="doctag">TODO:</span>业务逻辑</span></span><br><span class="line">						</span><br><span class="line">						<span class="keyword">if</span>(RX1_Buffer[i] == <span class="number">0x01</span>) &#123;</span><br><span class="line">							<span class="comment">// 增加</span></span><br><span class="line">							<span class="keyword">if</span>(duty &lt; <span class="number">100</span>) &#123;</span><br><span class="line">								duty++;</span><br><span class="line">							&#125;</span><br><span class="line">							TX1_write2buff(duty);</span><br><span class="line">							PWMB_Duty.PWM6_Duty = PERIOD * duty / <span class="number">100</span>;</span><br><span class="line">							UpdatePwm(PWMB, &amp;PWMB_Duty);</span><br><span class="line">						&#125; <span class="keyword">else</span> <span class="keyword">if</span>(RX1_Buffer[i] == <span class="number">0x02</span>) &#123;</span><br><span class="line">							<span class="comment">// 减少</span></span><br><span class="line">							<span class="keyword">if</span>(duty &gt; <span class="number">0</span>) &#123;</span><br><span class="line">								duty--;</span><br><span class="line">							&#125;</span><br><span class="line">							TX1_write2buff(duty);</span><br><span class="line">							PWMB_Duty.PWM6_Duty = PERIOD * duty / <span class="number">100</span>;</span><br><span class="line">							UpdatePwm(PWMB, &amp;PWMB_Duty);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				COM1.RX_Cnt = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>练习题</p>
<p>1实现马达震动。</p>
<p>2分析电动牙刷从原理图到编码实现过程中的环节。</p>
]]></content>
  </entry>
  <entry>
    <title>黑板STC8H扩展板</title>
    <url>/%E9%BB%91%E9%A9%ACSTC8H%E6%89%A9%E5%B1%95%E6%9D%BF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="黑马stc8h扩展板"><a class="markdownIt-Anchor" href="#黑马stc8h扩展板"></a> 黑马STC8H扩展板</h1>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1687421231320-816ef8fd-1f1f-4f03-8c26-31ad46bf96aa.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_62%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_720%2Climit_0" alt="3D_PCB2_2023-06-22 (1).png" /></p>
<p>STC8H8K64U教育开发板</p>
<p>功能介绍</p>
<p>1LED灯</p>
<p>2震动马达</p>
<p>3蜂鸣器</p>
<p>4电位器</p>
<p>5数码管</p>
<p>6OLED SPI</p>
<p>7OLED I2C</p>
<p>8NTC热敏电阻</p>
<p>9RTC时钟</p>
<p>10温湿度传感器</p>
<p>11独立按键</p>
<p>12矩阵按键</p>
]]></content>
  </entry>
</search>
