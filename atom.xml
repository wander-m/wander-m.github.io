<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wanderer</title>
  
  <subtitle>My programming learning process</subtitle>
  <link href="https://wander-m.github.io/atom.xml" rel="self"/>
  
  <link href="https://wander-m.github.io/"/>
  <updated>2023-07-14T05:53:57.822Z</updated>
  <id>https://wander-m.github.io/</id>
  
  <author>
    <name>wander-m</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>I2C总线</title>
    <link href="https://wander-m.github.io/I2C%E6%80%BB%E7%BA%BF"/>
    <id>https://wander-m.github.io/I2C%E6%80%BB%E7%BA%BF</id>
    <published>2023-07-14T03:59:32.975Z</published>
    <updated>2023-07-14T05:53:57.822Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="i2c总线"><a class="markdownIt-Anchor" href="#i2c总线"></a> I2C总线</h1><p>学习目标</p><p>1了解I2C通讯协议</p><p>2理解I2C工作原理</p><p>3理解I2C原理图的设计</p><p>学习内容</p><p>基本原理</p><p>I2C（Inter-Integrated Circuit）是一种串行通信协议，用于在集成电路之间进行数据交换。它最初由飞利浦公司（Philips）开发，现已成为一种通用的串行通信协议，被广泛应用于各种电子设备和嵌入式系统中。</p><p>总线结构</p><p>I2C总线包括两根信号线：SDA（串行数据线）和SCL（串行时钟线）。这两根信号线共用一个总线，因此在总线上可以连接多个设备。在I2C总线上，每个设备都有一个唯一的地址，用于标识设备。</p><p>SCL线是时钟线，用于控制数据传输的速度和时序；SDA线是数据线，用于传输实际的数据.</p><p>设备的地址通常是由设备制造商确定的，并在设备的数据手册中公布。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679811945777-9da28b2d-414f-43af-bc02-77fdf78aaa18.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_46%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="78.png" /></p><p>总之我们搞明白几个关键名词就可以：</p><p>1Master: 主设备。通常是主控MCU</p><p>2Slave：从设备。通常是功能芯片，例如RTC时钟，陀螺仪，温湿度等等。</p><p>3SCL：时钟线，控制数据传输的速度和时序。</p><p>4SDA：数据线。传输数据的。</p><p>5地址：从设备地址。主设备通过地址进行访问。在总线中，每个从设备地址唯一。</p><p>上拉电阻</p><p>在I2C总线中，上拉电阻的大小通常是由以下几个因素决定的：</p><p>1总线长度：总线长度越长，上拉电阻的阻值就应该越小，以保证信号的稳定性。这是因为，总线长度越长，线路上的电容就越大，需要更多的电流来充电和放电，因此上拉电阻的阻值也应该相应地减小。</p><p>2总线上的设备数量：总线上连接的设备数量越多，需要更大的电流来充电和放电，以确保信号的稳定性。因此，当总线上连接的设备数量增加时，上拉电阻的阻值也应该相应地减小。</p><p>3总线上设备的最高工作频率：I2C总线的时钟频率通常在100kHz到400kHz之间。如果总线上的设备需要使用更高的时钟频率，则上拉电阻的阻值应该相应地减小，以确保设备能够在规定的时间内完成数据的传输。</p><p>总的来说，I2C总线中上拉电阻的大小需要根据具体的情况来确定，以保证总线的稳定性和可靠性。一般来说，上拉电阻的阻值应该在1kΩ到10kΩ之间。</p><p>信号电平</p><p>I2C总线的信号电平是基于器件的供电电压而定的，通常为3.3V或5V。在I2C总线上，SDA和SCL信号线都是开漏模式，因此需要外接上拉电阻，以确保信号电平的不确定性。</p><p>速度</p><p>I2C总线的速度是由其时钟频率决定的。I2C总线的时钟频率通常在100kHz到400kHz之间，其中100kHz是标准模式（Standard Mode），400kHz是快速模式（Fast Mode）。</p><p>●在标准模式下，I2C总线的时钟频率为100kHz，数据传输速率最高可以达到每秒约10kbps。标准模式适用于大多数的应用场景，可以满足许多设备的数据传输需求。</p><p>●在快速模式下，I2C总线的时钟频率为400kHz，数据传输速率最高可以达到每秒约40kbps。快速模式适用于一些需要更高速度的应用场景，例如传感器数据采集等。</p><p>此外，I2C总线还支持更高速度的高速模式（High Speed Mode）和超高速模式（Ultra-Fast Mode），它们的时钟频率分别为1MHz和5MHz。这些高速模式通常用于一些需要非常高速数据传输的应用场景。</p><p>需要注意的是，总线的速度不仅受时钟频率的影响，还受到总线长度、电容负载、上拉电阻大小等因素的影响。因此，在实际应用中，需要根据具体情况来确定总线的速度以确保数据传输的稳定性和可靠性。</p><p>STC8H芯片I2C引脚</p><p>STC8H内置了一组I2C接口。</p><table><thead><tr><th>I2C接口</th><th>功能</th><th>引脚</th></tr></thead><tbody><tr><td>I2C1</td><td>SCL</td><td>P1.4</td></tr><tr><td>SDA</td><td>P1.5</td><td></td></tr><tr><td>SCL</td><td>P2.4</td><td></td></tr><tr><td>SDA</td><td>P2.5</td><td></td></tr><tr><td>SCL</td><td>P3.2</td><td></td></tr><tr><td>SDA</td><td>P3.3</td><td></td></tr></tbody></table><p>I2C开发流程</p><p>总结起来，I2C总线编程开发步骤为以下：</p><p>1引脚功能配置</p><p>2I2C配置</p><p>3总线数据读取或写入</p><p>I2C引脚配置为开漏（OD）模式。</p><p>基本上所有的芯片平台都是这种流程，具体的代码写法可能有所差异，但是道理相通。</p><p>STC8H的I2C配置</p><p>以下是STC8H的I2C配置代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">I2C_config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">I2C_InitTypeDefI2C_InitStructure;</span><br><span class="line">I2C_InitStructure.I2C_Mode      = I2C_Mode_Master;<span class="comment">//主从选择   I2C_Mode_Master, I2C_Mode_Slave</span></span><br><span class="line">I2C_InitStructure.I2C_Enable    = ENABLE;<span class="comment">//I2C功能使能,   ENABLE, DISABLE</span></span><br><span class="line">I2C_InitStructure.I2C_MS_WDTA   = DISABLE;<span class="comment">//主机使能自动发送,  ENABLE, DISABLE</span></span><br><span class="line">I2C_InitStructure.I2C_MS_Interrupt = DISABLE;<span class="comment">//使能主机模式中断,  ENABLE, DISABLE</span></span><br><span class="line">I2C_InitStructure.I2C_Speed     = <span class="number">13</span>;<span class="comment">//总线速度=Fosc/2/(Speed*2+4),      0~63</span></span><br><span class="line">I2C_InitStructure.I2C_IoUse     = I2C_P33_P32;<span class="comment">//IO口切换   I2C_P14_P15, I2C_P24_P25, I2C_P33_P32</span></span><br><span class="line"></span><br><span class="line">I2C_Init(&amp;I2C_InitStructure);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>●I2C_MODE：模式，当前是Master还是Slave。</p><p>●I2C_Speed: 速度。100k或者400k，通过总线速度=Fosc/2/(Speed*2+4)公式计算。</p><p>STC8H的I2C读取与写入</p><p>stc8h提供了库函数，对I2C进行读取和写入。</p><p>读取 ReadNbyte</p><p>写入 WriteNbyte</p><p>由于库函数设计问题，这两个函数设计得不是很合理。因此，我们对两个函数进行扩展。</p><p>I2C_WriteNbyte</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">I2C_WriteNbyte</span><span class="params">(u8 addr, u8 reg, u8 *p, u8 number)</span> </span>&#123;</span><br><span class="line">EAXSFR();<span class="comment">/* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展SFR(XSFR) */</span></span><br><span class="line">Start();                                <span class="comment">//发送起始命令</span></span><br><span class="line">SendData((addr &lt;&lt; <span class="number">1</span>));                         <span class="comment">//发送设备地址+写命令</span></span><br><span class="line">RecvACK();</span><br><span class="line">SendData(reg);                         <span class="comment">//发送存储地址</span></span><br><span class="line">RecvACK();</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">SendData(*p++);</span><br><span class="line">RecvACK();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(--number);</span><br><span class="line">Stop();                                 <span class="comment">//发送停止命令</span></span><br><span class="line">EAXRAM();<span class="comment">/* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展RAM(XRAM) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I2C_ReadNbyte</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">I2C_ReadNbyte</span><span class="params">( u8 addr, u8 reg, u8 *p, u8 number)</span> </span>&#123;</span><br><span class="line">EAXSFR();<span class="comment">/* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展SFR(XSFR) */</span></span><br><span class="line">Start();                                <span class="comment">//发送起始命令</span></span><br><span class="line">SendData((addr &lt;&lt; <span class="number">1</span>));                         <span class="comment">//发送设备地址+写命令</span></span><br><span class="line">RecvACK();</span><br><span class="line">SendData(reg);                         <span class="comment">//发送存储地址</span></span><br><span class="line">RecvACK();</span><br><span class="line">Start();                                <span class="comment">//发送起始命令</span></span><br><span class="line">SendData((addr &lt;&lt; <span class="number">1</span>) | <span class="number">0x01</span>);           <span class="comment">//发送设备地址+读命令</span></span><br><span class="line">RecvACK();</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">*p = RecvData();</span><br><span class="line">p++;</span><br><span class="line"><span class="keyword">if</span>(number != <span class="number">1</span>) SendACK();          <span class="comment">//send ACK</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(--number);</span><br><span class="line">SendNAK();                              <span class="comment">//send no ACK</span></span><br><span class="line">Stop();                                 <span class="comment">//发送停止命令</span></span><br><span class="line">EAXRAM();<span class="comment">/* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展RAM(XRAM) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I2C地址问题</p><p>开发过程中，经常有address问题。由于翻译问题，和一些程序员编码命名问题，导致我们经常把address概念混淆。</p><p>通常我们关心的地址有:</p><p>1设备地址：具体说法就是从设备的访问地址。</p><p>2设备中要访问的地址：从设备中的寄存器地址。</p><p>设备地址</p><p>设备地址其实包含了两个地址，一个是读取从设备时的地址，一个是向从设备写入数据时的地址。这两个地址还不一样。这两个地址的来源需要翻看从设备的芯片手册，进行查看。</p><p>设备地址是8个位的，最后一位表示读还是写，1表示读，0表示写。(1读0写这个是默认的，但也不排除一些奇葩厂商芯片设计自定义反向操作，一切以实际为准)</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679823291931-040af461-30dd-4b91-84f9-e50112310499.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_39%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="80.png" /></p><p>上图中，就是一个I2C的从设备地址，最后一位决定是读还是写。</p><p>我们在查询用户手册的过程中，必须确认这个地址，但通常会碰到一些问题：</p><p>1只提供一个地址。</p><p>通常会明确说是读地址还是写地址，一定要查阅清楚。还有就是只提供了一个地址，没有明确说明通常是前七位组成的地址。</p><p>21种类型的从设备多个串联。一种类型的芯片通常地址是相同的，但是要访问具体的从设备需要唯一地址，否则不能正常工作。这个时候需要芯片支持地址扩展。</p><p>3多种类型的从设备地址相同。这个就需要从设备可以配置改地址的方式。</p><p>从设备寄存器地址</p><p>通常我们通过I2C总线要去写入或者读取的就是这些寄存器地址。对于寄存器地址数据含义，需要阅读芯片手册。</p><p>I2C通讯流程</p><p>对于一些已经提供了库函数的芯片平台，对于如何去使用I2C问题不大，因为有良好的API支持。</p><p>但是对于没有支持的，或者是需要清楚的了解过程的，需要去理解这个流程。</p><p>I2C通信流程如下：</p><p>1主设备发送起始信号（Start）。</p><p>2主设备发送从设备地址和读/写位，请求与从设备建立通信。</p><p>3从设备返回应答信号（ACK）。</p><p>4主设备发送要读/写的数据。</p><p>5从设备返回应答信号（ACK）。</p><p>6通信结束时，主设备发送停止信号（Stop）。</p><p>下面是每个步骤的详细说明：</p><p>1起始信号（Start）：主设备通过拉低SDA线而将SDA线从高电平转换成低电平，同时将SCL线拉高。这表示通信开始了。</p><p>2从设备地址和读/写位：主设备发送从设备地址和读/写位，告诉从设备要进行读或写操作。I2C总线支持多个从设备，因此地址是从设备的标识符。地址的最低位表示通信模式，0表示写模式，1表示读模式。</p><p>3应答信号（ACK）：从设备接收到地址后，会发送应答信号（ACK）表示已经准备好接收或发送数据。如果没有设备响应主设备发送的地址，则通信失败。</p><p>4发送数据：主设备向从设备发送要写入的数据。</p><p>5应答信号（ACK）：从设备接收到数据后，发送应答信号（ACK）表示已经成功接收数据。如果从设备没有成功接收到数据，将发送非应答信号（NACK）。</p><p>6停止信号（Stop）：通信结束后，主设备发送停止信号（Stop），将SDA线从低电平拉到高电平，同时将SCL线拉高。这表示通信结束了。</p><p>需要注意的是，在步骤2和步骤4中，如果主设备发送的数据超过了从设备的缓存，从设备将发送非应答信号（NACK）表示数据传输失败。主设备在收到非应答信号（NACK）后将终止通信。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679831622894-0972f077-0cc3-427c-b975-299cfaaeb1ed.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_28%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="81.png" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RTC时钟</title>
    <link href="https://wander-m.github.io/RTC%E6%97%B6%E9%92%9F"/>
    <id>https://wander-m.github.io/RTC%E6%97%B6%E9%92%9F</id>
    <published>2023-07-14T03:55:52.656Z</published>
    <updated>2023-07-14T05:45:35.095Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="rtc时钟"><a class="markdownIt-Anchor" href="#rtc时钟"></a> RTC时钟</h1><p>学习目标</p><p>1理解RTC时钟的基本原理和使用方法。</p><p>2学会使用STC8H单片机的RTC时钟模块进行时间的读取和设置。</p><p>3掌握使用RTC时钟进行定时和闹钟功能的实现，了解时钟中断的工作原理。</p><p>4了解I2C总线的基本原理和特点</p><p>5掌握I2C通讯的使用</p><p>6掌握中断处理</p><p>7熟悉从芯片手册获取有效信息</p><p>学习内容</p><p>RTC时钟</p><p>RTC时钟是一种实时时钟芯片，通常与微控制器或计算机等设备配合使用，提供高精度的时间和日期信息，以便于设备进行时间相关的操作，如记录数据、定时执行任务、闹钟提醒等。</p><p>RTC时钟的应用场景非常广泛，例如计算机主板、智能家居、物联网设备、工业自动化等领域。在这些应用中，RTC时钟可以提供高精度的时间戳、定时任务、日历功能等，从而为系统提供更加可靠的时间基准。</p><p>除了时间和日期信息，一些RTC时钟芯片还集成了温度传感器、电池备份等功能，以提供更加全面的服务。例如，在断电情况下，RTC时钟的备用电池可以维持时钟的运行，以保证时间和日期信息的准确性。</p><p>以下是几种常见的RTC时钟芯片及其特点和应用场景：</p><p>1DS1302：DS1302是一款低功耗时钟模块，集成了时钟、日历和时钟报警功能，能够以BCD格式存储时间和日期信息。它具有低功耗、简单易用、成本低等特点，适用于需要长时间运行且功耗要求较低的应用场景。</p><p>2DS3231：DS3231是一款高精度的I2C RTC时钟芯片，能够以二进制格式存储时间和日期信息，并具有时钟报警、温度补偿等功能。它具有高精度、低功耗、高可靠性等特点，适用于对时钟精度要求较高的应用场景，如电子钟、精密计时器等。</p><p>3PCF8563：PCF8563是一款低功耗的I2C RTC时钟芯片，能够以BCD格式存储时间和日期信息，并具有时钟报警、时钟输出等功能。它具有低功耗、集成度高、工作稳定等特点，适用于需要长时间运行且功耗要求较低的应用场景。</p><p>4RV-4162-C7：RV-4162-C7是一款高精度的I2C RTC时钟芯片，能够以二进制格式存储时间和日期信息，并具有时钟输出、时钟同步、时钟校准等功能。它具有高精度、低功耗、抗干扰能力强等特点，适用于对时钟精度要求较高的应用场景，如高精度计时器、高精度工控系统等。</p><p>5MCP7940N：MCP7940N是一款低功耗的I2C RTC时钟芯片，能够以BCD格式存储时间和日期信息，并具有时钟输出、时钟同步、时钟报警等功能。它具有低功耗、成本低等特点，适用于需要长时间运行且功耗要求较低的应用场景，如电子钟、自动售货机等。</p><p>我们开发板中采用的是PCF8563</p><p>原理图</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1687663694534-36cd384f-2ca8-49bf-952b-0f2673612dd2.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_25%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679815587725-5510dd78-70ed-4e4f-b16b-f809ec7af44c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_25%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="79.png" /></p><p>原理图外围设计：</p><p>1外部电池: 确保断电后能正常工作</p><p>2晶振：确保震荡频率准确。</p><p>3肖特基二极管：防止电流倒灌。</p><p>引脚说明：</p><p>1INT： 中断引脚。当触发到定时任务时，会触发引脚高低电平变化。</p><p>2SCL和SDA：为I2C通讯的两个引脚。用来保证MCU和RTC时钟芯片间进行通讯的。</p><p>PCF8563寄存器</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681484430721-82c753f7-2b2a-43c9-bffd-d9379df85b4d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_43%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="118.png" /></p><p>控制与状态寄存器</p><p>用来配置控制和状态切换的寄存器。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681484737997-3485c5bc-05e4-4bd8-84d3-60b9acd00de0.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_43%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="119.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681484747822-d69f7cea-c0d8-4d24-9175-e328f8d15969.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_43%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="120.png" /></p><p>RTC寄存器数据读取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">I2C_ReadNbyte(RTC_ADDR, <span class="number">0x02</span>, dat, <span class="number">7</span>);</span><br><span class="line">second = (dat[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">0</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x07</span>) * <span class="number">10</span>;</span><br><span class="line">minute = (dat[<span class="number">1</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x07</span>) * <span class="number">10</span>;</span><br><span class="line">hour = (dat[<span class="number">2</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">2</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x03</span>) * <span class="number">10</span>;</span><br><span class="line">day = (dat[<span class="number">3</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">3</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x03</span>) * <span class="number">10</span>;</span><br><span class="line">weekday = dat[<span class="number">4</span>] &amp; <span class="number">0x07</span>;</span><br><span class="line">month = (dat[<span class="number">5</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">5</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x01</span>) * <span class="number">10</span>;</span><br><span class="line">year = ((dat[<span class="number">6</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>) * <span class="number">10</span> + (dat[<span class="number">6</span>] &amp; <span class="number">0x0F</span>);</span><br><span class="line">year += ((dat[<span class="number">5</span>] &gt;&gt; <span class="number">7</span>) &amp; <span class="number">0x01</span>) * <span class="number">100</span> + <span class="number">1900</span>;</span><br></pre></td></tr></table></figure><p>RTC寄存器数据写入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="number">2023</span>;</span><br><span class="line">month = <span class="number">12</span>;</span><br><span class="line">day = <span class="number">31</span>;</span><br><span class="line">weekday = <span class="number">0</span>;</span><br><span class="line">hour = <span class="number">23</span>;</span><br><span class="line">minute = <span class="number">59</span>;</span><br><span class="line">second = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">if</span>(year &gt;= <span class="number">2000</span>) &#123;</span><br><span class="line">    c = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">tmp[<span class="number">0</span>] = ((second / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (second % <span class="number">10</span>);</span><br><span class="line">tmp[<span class="number">1</span>] = ((minute / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (minute % <span class="number">10</span>);</span><br><span class="line">tmp[<span class="number">2</span>] = ((hour / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (hour % <span class="number">10</span>);</span><br><span class="line">tmp[<span class="number">3</span>] = ((day / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (day % <span class="number">10</span>);</span><br><span class="line">tmp[<span class="number">4</span>] = weekday % <span class="number">7</span>;</span><br><span class="line">tmp[<span class="number">5</span>] = (c &lt;&lt; <span class="number">7</span>) + ((month / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (month % <span class="number">10</span>);</span><br><span class="line">tmp[<span class="number">6</span>] = (u8)(((year % <span class="number">1000</span>) / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (u8)((year % <span class="number">1000</span>) % <span class="number">10</span>);</span><br><span class="line">I2C_WriteNbyte(RTC_ADDR, <span class="number">0x02</span>, tmp, <span class="number">7</span>);</span><br></pre></td></tr></table></figure><p>RTC闹钟设置</p><p>通过配置寄存器来配置闹钟</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681517343876-40f0bd02-b796-4f0c-b70a-bdf90d69a78e.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_40%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="122.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681517356218-896416cf-ec55-4ab9-9bf4-d62db3ed1609.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_40%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="123.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681517369649-37a549ae-e9b7-4527-b8f1-01c44854406c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_40%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="124.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681517382506-9ac3e631-de5f-48f7-9abb-193d2d821a29.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_40%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="125.png" /></p><p>闹钟事件触发后，通过外部中断触发，操作流程如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681562722017-919af022-3cc6-4f60-9b3f-368ada45dfde.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="121.png" /></p><p>打开alarm功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">u8 config;</span><br><span class="line"><span class="comment">// 先读配置</span></span><br><span class="line">I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 再去设置, 设置的时候别动别人的配置</span></span><br><span class="line">config |= <span class="number">0x02</span>;</span><br><span class="line">config &amp;= ~<span class="number">0x08</span>;<span class="comment">//clear clock标记</span></span><br><span class="line">I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>alarm的中断回调</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ext_int3_call</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">u8 tmp[<span class="number">7</span>];</span><br><span class="line">u16 year;</span><br><span class="line">u8 month, day, weekday, hour, minute, second, c = <span class="number">0</span>;</span><br><span class="line">u8 config[<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;alarm \r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取状态</span></span><br><span class="line">I2C_ReadNbyte(RTC_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;config: %d\r\n&quot;</span>, (<span class="keyword">int</span>)config[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断闹钟是否被激活</span></span><br><span class="line"><span class="keyword">if</span>((config[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x01</span> == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//清除 alarm 标记</span></span><br><span class="line">config[<span class="number">0</span>] &amp;= ~<span class="number">0x08</span>;</span><br><span class="line">I2C_WriteNbyte(RTC_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">I2C_ReadNbyte(RTC_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;config: %d\r\n&quot;</span>, (<span class="keyword">int</span>)config[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RTC计数器设置</p><p>通过配置寄存器来配置计数器。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681560356723-92542690-9130-45e7-a4a7-994c38471d85.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_40%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="127.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681560365972-14783e60-56f0-4848-97ea-4d45e292366c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_39%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="128.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681562733608-db096cad-bab0-42fe-9967-d8de9cf5c676.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="129.png" /></p><p>打开timer功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">u8 config;</span><br><span class="line"><span class="comment">// 先读配置</span></span><br><span class="line">I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 再去设置, 设置的时候别动别人的配置</span></span><br><span class="line">config |= <span class="number">0x01</span>;</span><br><span class="line">config &amp;= ~<span class="number">0x04</span>;<span class="comment">//clear timer标记</span></span><br><span class="line">I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>timer的中断回调</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">u8 config[<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">I2C_ReadNbyte(RTC_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;config: %d\r\n&quot;</span>, (<span class="keyword">int</span>)config[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>((config[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x01</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;timer \r\n&quot;</span>);</span><br><span class="line">config[<span class="number">0</span>] &amp;= ~<span class="number">0x04</span>;</span><br><span class="line">I2C_WriteNbyte(RTC_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>驱动封装</p><p>头文件封装</p><p>PCF8563.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __PCF8563_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __PCF8563_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;I2C.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_SCLP32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_SDAP33</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_INTP37</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_ADDR0x51</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_ADDR_W0xA2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_ADDR_R0xA3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_SCL_INIT()&#123;P3M1 |= 0x04, P3M0 |= 0x04;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_SDA_INIT()&#123;P3M1 |= 0x08, P3M0 |= 0x08;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCF8563_INT_INIT()&#123;P3M1 &amp;= ~0x80, P3M0 &amp;= ~0x80, INT_CLKO |=  (1 &lt;&lt; 5);&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//u16 year;</span></span><br><span class="line"><span class="comment">//u8 month, day, weekday, hour, minute, second</span></span><br><span class="line"><span class="comment">// 定义clock</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">u16 year;</span><br><span class="line">u8 month;</span><br><span class="line">u8 day;</span><br><span class="line">u8 weekday;</span><br><span class="line">u8 hour;</span><br><span class="line">u8 minute;</span><br><span class="line">u8 second;</span><br><span class="line">&#125; Clock_t;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义alarm</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">u8 hour;</span><br><span class="line">u8 enableHour;</span><br><span class="line">u8 minute;</span><br><span class="line">u8 enableMinute;</span><br><span class="line">u8 day;</span><br><span class="line">u8 enableDay;</span><br><span class="line">u8 weekday;</span><br><span class="line">u8 enableWeekday;</span><br><span class="line">&#125; Alarm_t;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 国产芯片的HZ1有问题，不要使用，建议使用HZ64</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TimerFreq</span>&#123;</span> HZ4096 = <span class="number">0</span>, HZ64 = <span class="number">1</span>, HZ1 = <span class="number">2</span>, HZ1_60 = <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">PCF8563_on_alarm</span><span class="params">(<span class="keyword">void</span>)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">PCF8563_on_timer</span><span class="params">(<span class="keyword">void</span>)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_get_clock</span><span class="params">(Clock_t *c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_set_clock</span><span class="params">(Clock_t c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_enable_alarm</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_set_alarm</span><span class="params">(Alarm_t a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_disable_alarm</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_enable_timer</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_set_timer</span><span class="params">(<span class="keyword">enum</span> TimerFreq freq, u8 period)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_disable_timer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>●定义结构体Clock_t表示时间数据，通过这个结构体承载数据，方便读取和设置。</p><p>●定义结构体Alarm_t表示闹钟数据，通过这个结构体承载数据，方便读取和设置。</p><p>●定义枚举TimerFreq限定计时器设置的范围。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PCF8563.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">PCF8563_SCL_INIT();</span><br><span class="line">PCF8563_SDA_INIT();</span><br><span class="line">PCF8563_INT_INIT();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_get_clock</span><span class="params">(Clock_t *c)</span> </span>&#123;</span><br><span class="line">u8 dat[<span class="number">7</span>];</span><br><span class="line">I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x02</span>, dat, <span class="number">7</span>);</span><br><span class="line">c-&gt;second = (dat[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">0</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x07</span>) * <span class="number">10</span>;</span><br><span class="line">c-&gt;minute = (dat[<span class="number">1</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x07</span>) * <span class="number">10</span>;</span><br><span class="line">c-&gt;hour = (dat[<span class="number">2</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">2</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x03</span>) * <span class="number">10</span>;</span><br><span class="line">c-&gt;day = (dat[<span class="number">3</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">3</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x03</span>) * <span class="number">10</span>;</span><br><span class="line">c-&gt;weekday = dat[<span class="number">4</span>] &amp; <span class="number">0x07</span>;</span><br><span class="line">c-&gt;month = (dat[<span class="number">5</span>] &amp; <span class="number">0x0F</span>) + ((dat[<span class="number">5</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x01</span>) * <span class="number">10</span>;</span><br><span class="line">c-&gt;year = ((dat[<span class="number">6</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>) * <span class="number">10</span> + (dat[<span class="number">6</span>] &amp; <span class="number">0x0F</span>);</span><br><span class="line">c-&gt;year += ((dat[<span class="number">5</span>] &gt;&gt; <span class="number">7</span>) &amp; <span class="number">0x01</span>) * <span class="number">100</span> + <span class="number">1900</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_set_clock</span><span class="params">(Clock_t clk)</span> </span>&#123;</span><br><span class="line">u8 tmp[<span class="number">7</span>];</span><br><span class="line">u8 c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(clk.year &gt;= <span class="number">2000</span>) &#123;</span><br><span class="line">c = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">tmp[<span class="number">0</span>] = ((clk.second / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (clk.second % <span class="number">10</span>);</span><br><span class="line">tmp[<span class="number">1</span>] = ((clk.minute / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (clk.minute % <span class="number">10</span>);</span><br><span class="line">tmp[<span class="number">2</span>] = ((clk.hour / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (clk.hour % <span class="number">10</span>);</span><br><span class="line">tmp[<span class="number">3</span>] = ((clk.day / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (clk.day % <span class="number">10</span>);</span><br><span class="line">tmp[<span class="number">4</span>] = clk.weekday % <span class="number">7</span>;</span><br><span class="line">tmp[<span class="number">5</span>] = (c &lt;&lt; <span class="number">7</span>) + ((clk.month / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (clk.month % <span class="number">10</span>);</span><br><span class="line">tmp[<span class="number">6</span>] = (u8)(((clk.year % <span class="number">1000</span>) / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (u8)((clk.year % <span class="number">1000</span>) % <span class="number">10</span>);</span><br><span class="line">I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x02</span>, tmp, <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_enable_alarm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">u8 config;</span><br><span class="line"><span class="comment">// 先读配置</span></span><br><span class="line">I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 再去设置, 设置的时候别动别人的配置</span></span><br><span class="line">config |= <span class="number">0x02</span>;</span><br><span class="line">config &amp;= ~<span class="number">0x08</span>;<span class="comment">//clear clock标记</span></span><br><span class="line">I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_set_alarm</span><span class="params">(Alarm_t a)</span> </span>&#123;</span><br><span class="line">u8 tmp[<span class="number">4</span>];</span><br><span class="line">tmp[<span class="number">0</span>] = ((a.minute / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (a.minute % <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(a.enableMinute == <span class="number">0</span>) &#123;</span><br><span class="line">tmp[<span class="number">0</span>] += (<span class="number">1</span> &lt;&lt; <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line">tmp[<span class="number">1</span>] = ((a.hour / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (a.hour % <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(a.enableHour == <span class="number">0</span>) &#123;</span><br><span class="line">tmp[<span class="number">1</span>] += (<span class="number">1</span> &lt;&lt; <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line">tmp[<span class="number">2</span>] = ((a.day / <span class="number">10</span>) &lt;&lt; <span class="number">4</span>) + (a.day % <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(a.enableDay == <span class="number">0</span>) &#123;</span><br><span class="line">tmp[<span class="number">2</span>] += (<span class="number">1</span> &lt;&lt; <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line">tmp[<span class="number">3</span>] = a.weekday % <span class="number">7</span>;</span><br><span class="line"><span class="keyword">if</span>(a.enableWeekday == <span class="number">0</span>) &#123;</span><br><span class="line">tmp[<span class="number">3</span>] += (<span class="number">1</span> &lt;&lt; <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line">I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x09</span>, tmp, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_disable_alarm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">u8 config[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 先读配置</span></span><br><span class="line">I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 再去设置, 设置的时候别动别人的配置</span></span><br><span class="line">config[<span class="number">0</span>] &amp;= ~<span class="number">0x02</span>;</span><br><span class="line">config[<span class="number">0</span>] &amp;= ~<span class="number">0x08</span>;<span class="comment">//clear clock标记</span></span><br><span class="line">I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_enable_timer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">u8 config;</span><br><span class="line"><span class="comment">// 先读配置</span></span><br><span class="line">I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 再去设置, 设置的时候别动别人的配置</span></span><br><span class="line">config |= <span class="number">0x01</span>;</span><br><span class="line">config &amp;= ~<span class="number">0x04</span>;<span class="comment">//clear timer标记</span></span><br><span class="line">I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_set_timer</span><span class="params">(<span class="keyword">enum</span> TimerFreq freq, u8 period)</span> </span>&#123;</span><br><span class="line">u8 config;</span><br><span class="line">config = freq + (<span class="number">1</span> &lt;&lt; <span class="number">7</span>);<span class="comment">//计数频率 + timer enable</span></span><br><span class="line">I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x0E</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">config = period; <span class="comment">// config, period</span></span><br><span class="line">I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x0F</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PCF8563_disable_timer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">u8 config[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 先读配置</span></span><br><span class="line">I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 再去设置, 设置的时候别动别人的配置</span></span><br><span class="line">config[<span class="number">0</span>] &amp;= ~<span class="number">0x01</span>;</span><br><span class="line">config[<span class="number">0</span>] &amp;= ~<span class="number">0x04</span>;<span class="comment">//clear timer标记</span></span><br><span class="line">I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ext_INT3</span> <span class="params">(<span class="keyword">void</span>)</span> interrupt INT3_VECTOR</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 config[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 先读配置</span></span><br><span class="line">I2C_ReadNbyte(PCF8563_ADDR, <span class="number">0x01</span>, &amp;config, <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 判断闹钟是否被激活 Alarm Flag &amp;&amp; AIE</span></span><br><span class="line"><span class="keyword">if</span>((config[<span class="number">0</span>] &amp; <span class="number">0x08</span>) &amp;&amp; (config[<span class="number">0</span>] &amp; <span class="number">0x02</span>)) &#123;</span><br><span class="line"><span class="comment">//清除 alarm 标记</span></span><br><span class="line">config[<span class="number">0</span>] &amp;= ~<span class="number">0x08</span>;</span><br><span class="line">I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">PCF8563_on_alarm();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断计时器是否被激活 Timer Flag &amp;&amp; TIE</span></span><br><span class="line"><span class="keyword">if</span>((config[<span class="number">0</span>] &amp; <span class="number">0x04</span>) &amp;&amp; (config[<span class="number">0</span>] &amp; <span class="number">0x01</span>)) &#123;</span><br><span class="line"><span class="comment">//清除 timer 标记</span></span><br><span class="line">config[<span class="number">0</span>] &amp;= ~<span class="number">0x04</span>;</span><br><span class="line">I2C_WriteNbyte(PCF8563_ADDR, <span class="number">0x01</span>, config, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">PCF8563_on_timer();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>●Ext_INT3中断函数为当前STC8H平台可用的。如果切换平台需要进行对应的移植操作。</p><p>BCD（Binary-Coded Decimal）</p><p>BCD（Binary-Coded Decimal）是一种用二进制编码表示十进制数字的格式。</p><p>在BCD格式中，每个十进制数位用4个二进制位来表示。BCD的目的是使得数字的编码与显示更加直观和容易处理。在BCD格式中，每个十进制数位的取值范围是0到9。</p><p>例如，数字5用BCD表示为0101，数字9用BCD表示为1001。这种表示方法使得每个十进制数位都独立地编码，方便在数字处理和显示设备上进行操作。</p><p>10进制数转BCD数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 十位取出左移4位 + 个位 (得到BCD数)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITE_BCD(val) ((val / 10) &lt;&lt; 4) + (val % 10)</span></span><br></pre></td></tr></table></figure><p>BCD数转10进制数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将高4位乘以10 + 低四位 (得到10进制数)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ_BCD(val) (val &gt;&gt; 4) * 10 + (val &amp; 0x0F) </span></span><br></pre></td></tr></table></figure><p>一些状态分析</p><p>PCF8563的规则：</p><p>1通电后，就开始工作，内部可配置寄存器(时间，闹钟，定时器)</p><p>2如果已经有电池，但是单片机断电了，单片机重新通电后，单片机应该遵守PCF8563中已经配置的规则(时间，闹钟，定时器)</p><p>程序设计</p><p>通过串口发送指令来设置PCF8653的功能</p><table><thead><tr><th>功能</th><th>指令描述</th><th>功能描述</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>开关指令</td><td>指令</td><td>类型</td><td>动作</td><td>无效字符</td><td>打开alarm规则</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>0x010x010x010x000x000x000x000x000x000x00</td><td>打开alarm示例</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>指令</td><td>类型</td><td>动作</td><td>无效字符</td><td>关闭alarm规则</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>0x010x010x000x000x000x000x000x000x000x00</td><td>关闭alarm示例</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>指令</td><td>类型</td><td>动作</td><td>无效字符</td><td>打开timer规则</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>0x010x020x010x000x000x000x000x000x000x00</td><td>打开timer示例</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>指令</td><td>类型</td><td>动作</td><td>无效字符</td><td>关闭timer规则</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>0x010x020x000x000x000x000x000x000x000x00</td><td>关闭timer示例</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>设置指令</td><td>指令</td><td>类型</td><td>year</td><td>M</td><td>d</td><td>w</td><td>h</td><td>m</td><td>s</td><td>设置clock规则</td></tr><tr><td>0x020x000x070xE70x040x140x040x170x3b0x37</td><td>设置clock示例</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2023-04-20 4 23:59:55</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>0x020x000x070xE70x040x150x050x170x3b0x37</td><td>设置clock示例</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2023-04-21 5 23:59:55</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>指令</td><td>类型</td><td>d</td><td>w</td><td>h</td><td>m</td><td>ed</td><td>ew</td><td>eh</td><td>em</td><td>设置Alarm规则</td></tr><tr><td>0x020x010x150x050x000x000x000x000x010x01</td><td>设置Alarm示例</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>21 5 0:0   0|0|1|1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>0x020x010x150x050x000x000x000x000x010x01</td><td>设置Alarm示例</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>21 5 0:0   0|0|1|1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>指令</td><td>类型</td><td>src</td><td>cnt</td><td>无效字符</td><td>设置Timer规则</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>0x020x020x020x010x000x000x000x000x000x00</td><td>设置Timer示例</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2 1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>测试策略</p><p>1测试时钟设置</p><p>●向串口发送设置时间的数据</p><p>2023-04-20 4 23:59:55</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x02 0x00 0x07 0xE7 0x04 0x14 0x04 0x17 0x3b 0x37</span><br></pre></td></tr></table></figure><p>2023-04-21 5 23:59:55</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x02 0x00 0x07 0xE7 0x04 0x15 0x05 0x17 0x3b 0x37</span><br></pre></td></tr></table></figure><p>2单独测试Alarm</p><p>●向串口发送设置Alarm的指令</p><p>21 5 0:0 0|0|1|1</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x02 0x01 0x15 0x05 0x00 0x00 0x00 0x00 0x01 0x01</span><br></pre></td></tr></table></figure><p>○day: 21</p><p>○weekday: 5</p><p>○hour: 0</p><p>○minute: 0</p><p>○enable day: 0</p><p>○enable weekday: 0</p><p>○enable hour: 1</p><p>○enable minute: 1</p><p>●向串口发送打开Alarm的指令</p><p>打开Alarm</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x01 0x01 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00</span><br></pre></td></tr></table></figure><p>●向串口发送设置时间指令，参考前面时间设置，将时间设置到alarm的前几秒，方便测试。</p><p>●等待Alarm时间到来，观察日志打印，如果触发alarm会有日志显示，说明触发成功。</p><p>●向串口发送关闭Alarm的指令</p><p>关闭Alarm</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x01 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00</span><br></pre></td></tr></table></figure><p>●向串口发送设置时间指令，参考前面时间设置，将时间设置到alarm的前几秒，方便测试。</p><p>●等待Alarm时间到来，观察日志打印，如果到了alarm时间，不打印日志，说明关闭成功。</p><p>3单独测试Timer</p><p>●向串口发送设置Timer的指令</p><p>2 1</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x02 0x02 0x02 0x01 0x00 0x00 0x00 0x00 0x00 0x00</span><br></pre></td></tr></table></figure><p>○2: hz位0x02，也就是 1 HZ，参考文档。</p><p>○1： 计数为1次，即countdown</p><p>●向串口发送打开Timer的指令</p><p>打开timer</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x01 0x02 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00</span><br></pre></td></tr></table></figure><p>●观察日志打印，如果按照1秒间隔打印日志，则说明打开timer成功</p><p>●向串口发送关闭Timer指令</p><p>关闭timer</p><figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x01 0x02 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00</span><br></pre></td></tr></table></figure><p>●观察日志打印，如果不再打印日志，则说明关闭timer成功</p><p>4Alarm和Timer的联调1</p><p>●同时打开Alarm和Timer，指令参考前面</p><p>●观察日志打印，如果有Alarm日志打印，同时也有Timer日志，说明成功</p><p>5Alarm和Timer的联调2</p><p>●同时关闭Alarm和Timer，指令参考前面</p><p>●观察日志打印，如果没有Alarm日志打印，同时也没有Timer日志，说明成功</p><p>6Alarm和Timer的联调3</p><p>●同时打开Alarm和Timer，指令参考前面</p><p>●关闭Alarm，指令参考前面</p><p>●观察日志，如果只有timer日志，说明成功</p><p>7Alarm和Timer的联调4</p><p>●同时打开Alarm和Timer，指令参考前面</p><p>●关闭Timer， 指令参考前面</p><p>●观察日志，如果只有Alarm日志，说明成功</p><p>有源晶振和无源晶振</p><p>晶振可分为有源晶振与无源晶振。一般我们说的“晶振”指的是有源晶振，而无源晶振通常叫“晶体”，或者叫“谐振器”。两者最大的区别是：</p><p>●有源晶振自身即可起振</p><p>●无源晶振则需要外加专门的时钟电路才能起振</p><p>总体来看，有源晶振的精度、稳定度等方面均要好于无源晶振，尤其是在精密测量领域，大部分用的都是高档的有源晶振，以方便把各种补偿技术集成在一起，减少设计复杂性。</p><table><thead><tr><th></th><th>无源晶振</th><th>有源晶振</th></tr></thead><tbody><tr><td>别名</td><td>晶体/谐振器</td><td>振荡器</td></tr><tr><td>引脚数量</td><td>2个</td><td>4个</td></tr><tr><td></td><td>借助时钟电路产生震荡信号</td><td>自身可产生振荡信号</td></tr><tr><td>特性</td><td>精度较低、信号质量较差、稳定性较差</td><td>精度高、信号质量较好、稳定性较强</td></tr><tr><td>价格</td><td>较低</td><td>较高</td></tr></tbody></table><p>练习题</p><p>1设置时间，并在数码管显示。</p><p>2设置闹钟，到闹钟时间，则播放音乐或者震动。</p><p>3制作码表，通过独立按键控制开始或停止，通过数码管显示码表读数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>蜂鸣器</title>
    <link href="https://wander-m.github.io/%E8%9C%82%E9%B8%A3%E5%99%A8"/>
    <id>https://wander-m.github.io/%E8%9C%82%E9%B8%A3%E5%99%A8</id>
    <published>2023-07-14T03:36:46.114Z</published>
    <updated>2023-07-14T05:45:16.907Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="蜂鸣器"><a class="markdownIt-Anchor" href="#蜂鸣器"></a> 蜂鸣器</h1><p>学习目标</p><p>1理解原理图</p><p>2了解蜂鸣器分类</p><p>3实现蜂鸣器的简单发声</p><p>4了解简单的乐理知识</p><p>5实现音符播放</p><p>6实现音乐播放</p><p>学习内容</p><p>蜂鸣器</p><p>蜂鸣器是一种能够产生固定频率的声音的电子元件。它通常由振膜、震荡器、放大器和声音反馈电路等部分组成。振膜是蜂鸣器中最核心的部分，它能够将电信号转换为机械振动，产生声音。震荡器提供稳定的电信号，用于驱动振膜产生振动。放大器用于放大电信号的幅度，以便产生足够的声音。声音反馈电路可以提供反馈信号，帮助系统稳定。</p><p>蜂鸣器广泛应用于电子设备中，例如电子钟、警报器、电子琴等。它们的声音频率通常在1 kHz到10 kHz之间，具有尖锐而刺耳的特点。蜂鸣器的种类很多，例如电磁式蜂鸣器、压电式蜂鸣器、有源蜂鸣器、无源蜂鸣器等等。不同类型的蜂鸣器具有不同的特点和应用场景。</p><p>电子爱好者和开发者通常会使用蜂鸣器作为一种简单而有效的提示器件。例如，在嵌入式系统中，可以通过控制蜂鸣器发出不同的声音来实现提示、警报、提醒等功能。一些开发板和单片机也通常带有蜂鸣器接口，方便开发者使用。</p><p>通常我们在开发中用到最多的是 有源蜂鸣器和无源蜂鸣器。有源的直接接电源即可发声。无源的需要连接一个变化频率的电源上，才能发出声音。</p><p>原理图</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679637431181-58eb7f83-624b-4b33-86d6-1ef4b99d5bb3.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_39%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="70.png" /></p><p>●采用P0.0引脚控制三极管的导通</p><p>肖特基二极管：</p><p>当蜂鸣器在工作时，会产生电磁感应。</p><p>当电源关闭或蜂鸣器停止振动时，会产生一个瞬态的电压峰值，这会产生反向电流，可能会对电路及蜂鸣器造成损害或影响其寿命。肖特基二极管可以通过其低的正向电压降和快速反向恢复特性，有效地防止反向电流损害电路。</p><p>此外，肖特基二极管的快速开关特性也能够减小蜂鸣器电路中的开关噪声和干扰，提高电路的稳定性和可靠性。因此，在蜂鸣器电路中加入肖特基二极管是一种常见的电路保护和稳定化措施。</p><p>肖特基二极管的作用</p><p>1快速开关：肖特基二极管具有快速的反向恢复特性，可以快速地从导通到截止转变，因此它通常用于高频开关电路中。</p><p>2低正向压降：与普通二极管相比，肖特基二极管具有更低的正向电压降，因此在需要低功耗和高效率的电路中使用时，肖特基二极管可以降低电路中的功耗和热损失。</p><p>3防反向漏电流：由于肖特基二极管是由金属和半导体接触组成的，因此在正向偏置时，不会发生少数载流子注入的现象，从而降低了漏电流。</p><p>4温度特性好：由于金属与半导体接触，所以肖特基二极管具有良好的温度特性。在高温环境下，肖特基二极管的电性能仍能保持稳定。</p><p>因此，肖特基二极管在高频开关电路、低功耗电路和功率电子等领域中得到了广泛的应用。</p><p>三极管并联电阻</p><p>在三极管的放大电路中，通常会并联一个电阻，这个电阻被称为集电极负载电阻。</p><p>这个集电极负载电阻的作用是：</p><p>1稳定直流工作点：集电极负载电阻可以使三极管的直流工作点更加稳定。由于三极管是非线性器件，其直流放大倍数随着工作点的改变而变化。通过加入集电极负载电阻，可以限制直流工作点的漂移，保证放大电路的直流稳定性。</p><p>2改善交流性能：集电极负载电阻还可以改善放大电路的交流性能。通过控制集电极电流，可以改变三极管的放大倍数，从而实现对输入信号的放大。同时，集电极负载电阻还可以限制输出幅度，避免过度放大造成信号失真。</p><p>3防止三极管损坏：当输入信号过大时，三极管的集电极电压可能会超过其最大耐压值，从而造成三极管损坏。通过加入集电极负载电阻，可以限制输出幅度，避免超过三极管的最大耐压值，从而保护三极管。</p><p>因此，三极管放大电路中并联一个集电极负载电阻是一种常见的电路设计技巧，可以提高电路的性能和稳定性，同时保护三极管免受过电压损坏。</p><p>在三极管放大电路中，集电极负载电阻的阻值会影响电路的放大倍数、直流工作点以及输出电阻等性能。</p><p>通常情况下，集电极负载电阻的阻值需要根据具体的电路设计要求来确定。一般来说，阻值不应过大或过小，一般取值范围在几百欧姆到几千欧姆之间。</p><p>如果集电极负载电阻的阻值太大，会导致放大倍数过低，使得电路的放大效果不理想。另外，由于三极管的输出电阻较小，集电极负载电阻的阻值过大还会导致电路的输出电阻过大，降低电路的输出功率。</p><p>如果集电极负载电阻的阻值太小，会导致放大倍数过高，使得电路容易失真或产生饱和现象。同时，由于直流工作点的不稳定性，集电极负载电阻的阻值过小还会导致直流工作点的漂移，降低电路的直流稳定性。</p><p>因此，在实际电路设计中，需要根据具体要求综合考虑电路性能和稳定性等因素，选取适当的集电极负载电阻阻值。</p><p>测试发声</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUZZERP00</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">GPIO_InitTypeDefGPIO_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">GPIO_InitStructure.Pin  = GPIO_Pin_0;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">GPIO_InitStructure.Mode = GPIO_OUT_PP;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">GPIO_Inilize(GPIO_P0, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">GPIO_config();</span><br><span class="line">EA = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123; <span class="comment">// 每个循环约4ms，每秒1000ms/4ms = 200次，即频率为200Hz</span></span><br><span class="line">P00 = <span class="number">1</span>;</span><br><span class="line">delay_ms(<span class="number">2</span>);</span><br><span class="line">P00 = <span class="number">0</span>;</span><br><span class="line">delay_ms(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过控制delay_ms的时间，控制发声的频率，来观察蜂鸣器的发声情况。</p><p>乐理知识</p><p>乐理知识从专业角度来说，包含了很多内容，包括音高、音阶、节奏、和声、旋律、调性、节拍等等方面的知识。</p><p>补充知识，不做要求。<br />1音高：音高是音乐中的一个基本元素，指的是声音高低的程度。常用的表示音高的符号是音符，不同的音高可以使用不同的音符来表示。<br />2音阶：音阶是一组按照音高顺序排列的音符组成的序列。常用的音阶包括了大调音阶和小调音阶等。<br />3节奏：节奏是指音乐中的强弱、快慢、持续时间等方面的时间关系。节奏可以通过节拍器或其他的打击乐器来表现。<br />4和声：和声是指多个声音同时进行时的相互关系。和声可以表现出不同的和声效果，如和弦、和声进程等。<br />5旋律：旋律是指音乐中的主旋律，是由一系列按照音高顺序排列的音符组成的。旋律可以使用不同的节奏来表现出不同的效果。<br />6调性：调性是指音乐中的调性关系。常用的调性包括了大调和小调等。<br />7节拍：节拍是指音乐中的基本的时间单位，用于表示节奏的强弱、快慢等方面的特征。节拍通常使用不同的时间符号来表示。<br />8同音重复：同音重复是指在不同的位置或时间上出现相同的音符或音高。</p><p>在此呢，我们不研究更全面更深入的乐理知识，我们从我们的常识方面入手，了解简单的发声即可。</p><p>哆来咪发唆拉西哆</p><p>哆来咪发唆拉西哆（Do-Re-Mi-Fa-So-La-Ti-Do）是音乐中的一个音阶记号，也是西方音乐中最基本的一个音阶。它由八个不同的音符组成，分别是：Do、Re、Mi、Fa、So、La、Ti、Do。这些音符分别代表了一个八度内的不同音高。</p><p>在音乐教学中，哆来咪发唆拉西哆常常被用来作为基础训练的内容。通过唱出哆来咪发唆拉西哆，可以帮助学生了解不同音符之间的音高关系，掌握音乐中的基本音程和旋律。同时，哆来咪发唆拉西哆也是很多歌曲的基础，学会了这个音阶，就可以更好地理解和演唱这些歌曲。</p><p>哆来咪发唆拉西哆可以用不同的乐谱表示方式来呈现。以下是常见的两种表示方式：</p><p>1数字表示法：数字表示法将每个音符用数字来代表，Do为1，Re为2，Mi为3，Fa为4，So为5，La为6，Ti为7，Do（高八度）为8。因此，哆来咪发唆拉西哆的数字表示法为：1 2 3 4 5 6 7 8。</p><p>2符号表示法：符号表示法用特定的符号来表示每个音符，包括大写字母（如C、D、E、F、G、A、B）、升降符号（如#、b）和八度符号（如’）。哆来咪发唆拉西哆的符号表示法为：C D E F G A B C’。</p><p>需要注意的是，不同的乐器和音高区间可能使用不同的记谱方式，但哆来咪发唆拉西哆作为最基本的音阶，通常都可以用以上两种方式表示。</p><p>十二平均律</p><p>十二平均律是现代西方音乐中最广泛使用的音高系统，它的作用可以从以下几个方面来理解：</p><p>1方便协调和配合：由于十二平均律将八度音程划分成12个等分，每个等分的音高间隔相等，不同的调式可以使用相同的音高间隔，因此方便不同乐器、不同声部之间的协调和配合。</p><p>2增加音乐的表现力：十二平均律中的半音音程比纯律（一种古老的音高系统）中的半音更小，因此可以创造更多的音高变化，增加音乐的表现力。</p><p>3适应和反映现代音乐的需求：现代音乐中常常出现的复杂和离奇的调性变化，需要更加灵活和多变的音高体系，而十二平均律可以提供这种灵活性和多变性。</p><p>总之，十二平均律作为一种现代音乐基础的音高系统，为不同音乐风格和流派的发展提供了有力的支持，成为现代音乐的不可或缺的一部分。</p><p>专业的术语理解起来比较抽象，对于乐理不是很了解的可以这样理解：<br />1我们将音乐的音高分为12个等分。类似我们拼音中的4声(类比说法，还是有区别的)<br />2我们在12个音高中对应了我们的哆来咪发唆拉西哆<br />3要发出不同的音高，需要不同的频率来发声。</p><p><a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E4%BA%8C%E5%B9%B3%E5%9D%87%E5%BE%8B#%E5%8D%81%E4%BA%8C%E5%B9%B3%E5%9D%87%E5%BE%8B%E8%A1%A8">维基百科 十二平均律</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1675061640660-d48264be-72d1-462e-971a-af8a467310b9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_32%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="12.png" /></p><p>结合十二平均律和哆来咪发唆拉西哆的符号表示法，我们可以得到下表</p><table><thead><tr><th>音高</th><th>数字表示</th><th>符号表示</th><th>频率</th></tr></thead><tbody><tr><td>哆</td><td>1</td><td>C</td><td>440×2123≈523.2511</td></tr><tr><td>来</td><td>2</td><td>D</td><td>440×2125≈587.3295</td></tr><tr><td>咪</td><td>3</td><td>E</td><td>440×2127≈659.2551</td></tr><tr><td>发</td><td>4</td><td>F</td><td>440×2128≈698.4564</td></tr><tr><td>唆</td><td>5</td><td>G</td><td>440×21210≈783.9908</td></tr><tr><td>拉</td><td>6</td><td>A</td><td>440×21212=880880×1=880</td></tr><tr><td>西</td><td>7</td><td>B</td><td>880×2122≈987.7666</td></tr><tr><td>哆</td><td>8</td><td>C’</td><td>880×2123≈1,046.5022</td></tr></tbody></table><p>此处的频率，就是我们的发声频率。</p><p>乐理补充内容</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679712482783-cec0bf03-f056-4eec-813a-e8aff41fefe8.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_29%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="76.png" /></p><p>上表为 十二平均律基础率表与频率计算对照表：</p><p>哆来咪发唆拉西哆 分别对应 CDEFGABC下一组</p><p>上面分为大字二组大字一组大字组小字组小字一组小字二组小字三组小字四组。</p><p>其实可以观察，他们的频率都是翻倍的。这些可以理解为音高不同。（有时候我们说唱歌时调子起高了，就是选了一组频率比较高的发声）</p><p>通常有些频率单片机通过定时或者PWM不容易做到。</p><p>更完整的八度音阶Octave和音符对照表Note：</p><table><thead><tr><th>Octave→ Note↓</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>C</td><td>16.352 (−48)</td><td>32.703 (−36)</td><td>65.406 (−24)</td><td>130.81 (−12)</td><td>261.63 (0)</td><td>523.25 (+12)</td><td>1046.5 (+24)</td><td>2093.0 (+36)</td><td>4186.0 (+48)</td><td>8372.0 (+60)</td></tr><tr><td>C♯/D♭</td><td>17.324 (−47)</td><td>34.648 (−35)</td><td>69.296 (−23)</td><td>138.59 (−11)</td><td>277.18 (+1)</td><td>554.37 (+13)</td><td>1108.7 (+25)</td><td>2217.5 (+37)</td><td>4434.9 (+49)</td><td>8869.8 (+61)</td></tr><tr><td>D</td><td>18.354 (−46)</td><td>36.708 (−34)</td><td>73.416 (−22)</td><td>146.83 (−10)</td><td>293.66 (+2)</td><td>587.33 (+14)</td><td>1174.7 (+26)</td><td>2349.3 (+38)</td><td>4698.6 (+50)</td><td>9397.3 (+62)</td></tr><tr><td>D♯/E♭</td><td>19.445 (−45)</td><td>38.891 (−33)</td><td>77.782 (−21)</td><td>155.56 (−9)</td><td>311.13 (+3)</td><td>622.25 (+15)</td><td>1244.5 (+27)</td><td>2489.0 (+39)</td><td>4978.0 (+51)</td><td>9956.1 (+63)</td></tr><tr><td>E</td><td>20.602 (−44)</td><td>41.203 (−32)</td><td>82.407 (−20)</td><td>164.81 (−8)</td><td>329.63 (+4)</td><td>659.26 (+16)</td><td>1318.5 (+28)</td><td>2637.0 (+40)</td><td>5274.0 (+52)</td><td>10548 (+64)</td></tr><tr><td>F</td><td>21.827 (−43)</td><td>43.654 (−31)</td><td>87.307 (−19)</td><td>174.61 (−7)</td><td>349.23 (+5)</td><td>698.46 (+17)</td><td>1396.9 (+29)</td><td>2793.8 (+41)</td><td>5587.7 (+53)</td><td>11175 (+65)</td></tr><tr><td>F♯/G♭</td><td>23.125 (−42)</td><td>46.249 (−30)</td><td>92.499 (−18)</td><td>185.00 (−6)</td><td>369.99 (+6)</td><td>739.99 (+18)</td><td>1480.0 (+30)</td><td>2960.0 (+42)</td><td>5919.9 (+54)</td><td>11840 (+66)</td></tr><tr><td>G</td><td>24.500 (−41)</td><td>48.999 (−29)</td><td>97.999 (−17)</td><td>196.00 (−5)</td><td>392.00 (+7)</td><td>783.99 (+19)</td><td>1568.0 (+31)</td><td>3136.0 (+43)</td><td>6271.9 (+55)</td><td>12544 (+67)</td></tr><tr><td>G♯/A♭</td><td>25.957 (−40)</td><td>51.913 (−28)</td><td>103.83 (−16)</td><td>207.65 (−4)</td><td>415.30 (+8)</td><td>830.61 (+20)</td><td>1661.2 (+32)</td><td>3322.4 (+44)</td><td>6644.9 (+56)</td><td>13290 (+68)</td></tr><tr><td>A</td><td>27.500 (−39)</td><td>55.000 (−27)</td><td>110.00 (−15)</td><td>220.00 (−3)</td><td>440.00 (+9)</td><td>880.00 (+21)</td><td>1760.0 (+33)</td><td>3520.0 (+45)</td><td>7040.0 (+57)</td><td>14080 (+69)</td></tr><tr><td>A♯/B♭</td><td>29.135 (−38)</td><td>58.270 (−26)</td><td>116.54 (−14)</td><td>233.08 (−2)</td><td>466.16 (+10)</td><td>932.33 (+22)</td><td>1864.7 (+34)</td><td>3729.3 (+46)</td><td>7458.6 (+58)</td><td>14917 (+70)</td></tr><tr><td>B</td><td>30.868 (−37)</td><td>61.735 (−25)</td><td>123.47 (−13)</td><td>246.94 (−1)</td><td>493.88 (+11)</td><td>987.77 (+23)</td><td>1975.5 (+35)</td><td>3951.1 (+47)</td><td>7902.1 (+59)</td><td>15804 (+71)</td></tr></tbody></table><p>乐理应用</p><p>Timer测试发声</p><p>我们通过timer进行 【哆来咪发唆拉西哆】 测试，timer的延时比较准确。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">通过Timer控制高低电平，测试蜂鸣器是否发声</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUZZERP00</span></span><br><span class="line"><span class="comment">//   C D    E F G A  B   C`</span></span><br><span class="line"><span class="comment">// u16 hz[] = &#123;523, 587, 659, 698, 784, 880, 988, 1047&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C`   D`     E`   F`  G`A`  B`    C``</span></span><br><span class="line">u16 hz[] = &#123;<span class="number">1047</span>, <span class="number">1175</span>, <span class="number">1319</span>, <span class="number">1397</span>, <span class="number">1568</span>, <span class="number">1760</span>, <span class="number">1976</span>, <span class="number">2093</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    GPIO_InitTypeDefGPIO_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">    GPIO_InitStructure.Pin  = GPIO_Pin_0;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">    GPIO_InitStructure.Mode = GPIO_OUT_PP;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">    GPIO_Inilize(GPIO_P0, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIMER_config</span><span class="params">(u8 idx)</span> </span>&#123;</span><br><span class="line">    TIM_InitTypeDefTIM_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">    TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;<span class="comment">//指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TIM_8BitAutoReload,TIM_16BitAutoReloadNoMask</span></span><br><span class="line">    TIM_InitStructure.TIM_Priority    = Priority_0;<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">    TIM_InitStructure.TIM_Interrupt = ENABLE;<span class="comment">//中断是否允许,   ENABLE或DISABLE</span></span><br><span class="line">    TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;<span class="comment">//指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_Ext</span></span><br><span class="line">    TIM_InitStructure.TIM_ClkOut    = DISABLE;<span class="comment">//是否输出高速脉冲, ENABLE或DISABLE</span></span><br><span class="line">    TIM_InitStructure.TIM_Value     = <span class="number">65536UL</span> - (MAIN_Fosc / (hz[idx] * <span class="number">2</span>));<span class="comment">//初值,</span></span><br><span class="line">    TIM_InitStructure.TIM_Run       = ENABLE;<span class="comment">//是否初始化后启动定时器, ENABLE或DISABLE</span></span><br><span class="line">    Timer_Inilize(Timer0,&amp;TIM_InitStructure);<span class="comment">//初始化Timer0  Timer0,Timer1,Timer2,Timer3,Timer4</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer0_call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    P00 = !P00;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    u8 idx = <span class="number">0</span>;</span><br><span class="line">    GPIO_config();</span><br><span class="line">    TIMER_config();</span><br><span class="line">    EA = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        TIMER_config(idx);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(++idx &gt; <span class="number">7</span>) &#123;</span><br><span class="line">            idx = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        delay_ms(<span class="number">250</span>);</span><br><span class="line">        delay_ms(<span class="number">250</span>);</span><br><span class="line">        delay_ms(<span class="number">250</span>);</span><br><span class="line">        delay_ms(<span class="number">250</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PWM测试发声</p><p>最准确的方式我们还可以选择PWM进行控制，这个也是常用的方式。</p><table><thead><tr><th>PWM</th><th>PWM通道</th><th>对应引脚</th></tr></thead><tbody><tr><td>PWMB</td><td>PWM5</td><td>P0.0</td></tr><tr><td>P1.7</td><td></td><td></td></tr><tr><td>P2.0</td><td></td><td></td></tr><tr><td>PWM6</td><td>P0.1</td><td></td></tr><tr><td>P2.1</td><td></td><td></td></tr><tr><td>P5.4</td><td></td><td></td></tr><tr><td>PWM7</td><td>P0.2</td><td></td></tr><tr><td>P2.2</td><td></td><td></td></tr><tr><td>P3.3</td><td></td><td></td></tr><tr><td>PWM8</td><td>P0.3</td><td></td></tr><tr><td>P2.3</td><td></td><td></td></tr><tr><td>P3.4</td><td></td><td></td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">通过Timer控制高低电平，测试蜂鸣器是否发声</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PWM.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUZZERP00</span></span><br><span class="line"><span class="comment">//     C  D    E  F   G  A   B  C`</span></span><br><span class="line">u16 hz[] = &#123;<span class="number">523</span>, <span class="number">587</span>, <span class="number">659</span>, <span class="number">698</span>, <span class="number">784</span>, <span class="number">880</span>, <span class="number">988</span>, <span class="number">1047</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//     C`   D`     E` F`   G`  A`   B`  C``</span></span><br><span class="line">u16 hz1[] = &#123;<span class="number">1047</span>, <span class="number">1175</span>, <span class="number">1319</span>, <span class="number">1397</span>, <span class="number">1568</span>, <span class="number">1760</span>, <span class="number">1976</span>, <span class="number">2093</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    GPIO_InitTypeDefGPIO_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">    GPIO_InitStructure.Pin  = GPIO_Pin_0;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">    GPIO_InitStructure.Mode = GPIO_OUT_PP;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">    GPIO_Inilize(GPIO_P0, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PWM_play</span><span class="params">(u16 hz_val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    u16 Peroid = MAIN_Fosc / hz_val - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    PWMx_InitDefinePWMx_InitStructure;</span><br><span class="line">    <span class="comment">// 总配置</span></span><br><span class="line">    <span class="comment">// (MAIN_Fosc / 1000 - 1) 周期计数值</span></span><br><span class="line">    PWMx_InitStructure.PWM_Period   = Peroid;<span class="comment">//周期时间,   0~65535</span></span><br><span class="line">    PWMx_InitStructure.PWM_DeadTime = <span class="number">0</span>;<span class="comment">//死区发生器设置, 0~255</span></span><br><span class="line">    PWMx_InitStructure.PWM_EnoSelect= ENO5P;<span class="comment">//输出通道选择,ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P</span></span><br><span class="line">    PWMx_InitStructure.PWM_PS_SW    = PWM5_SW_P00;<span class="comment">//切换端口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体PWM端口配置</span></span><br><span class="line">    <span class="comment">// pwm6</span></span><br><span class="line">    PWMx_InitStructure.PWM5_Mode    =CCMRn_PWM_MODE1;<span class="comment">//模式,CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2</span></span><br><span class="line">    PWMx_InitStructure.PWM5_Duty    = Peroid / <span class="number">2</span>;<span class="comment">//PWM4占空比时间, 0~Period</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// pwm6</span></span><br><span class="line">    PWMx_InitStructure.PWM_CC5Enable   = ENABLE;<span class="comment">//开启PWM6P输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// PWM启动配置</span></span><br><span class="line">    PWMx_InitStructure.PWM_MainOutEnable= ENABLE;<span class="comment">//主输出使能, ENABLE,DISABLE</span></span><br><span class="line">    PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;<span class="comment">//使能计数器, ENABLE,DISABLE</span></span><br><span class="line">    PWM_Configuration(PWMB, &amp;PWMx_InitStructure);<span class="comment">//初始化PWM,  PWMA,PWMB</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    u8 len;</span><br><span class="line">    u8 i;</span><br><span class="line">    GPIO_config();</span><br><span class="line">    <span class="comment">// EA = 1;</span></span><br><span class="line"></span><br><span class="line">    len = <span class="keyword">sizeof</span>(hz) / <span class="keyword">sizeof</span>(u16);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            PWM_play(hz[i]);</span><br><span class="line"></span><br><span class="line">            delay_ms(<span class="number">250</span>);</span><br><span class="line">            delay_ms(<span class="number">250</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PWM驱动封装</p><p>可以将蜂鸣器的代码进行封装，这样方便以后调用</p><p>Buzzer.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __BUZZER_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __BUZZER_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_beep</span><span class="params">(u16 hz)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_stop</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>Buzzer.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Buzzer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PWM.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    GPIO_InitTypeDefGPIO_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">    GPIO_InitStructure.Pin  = GPIO_Pin_0;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">    GPIO_InitStructure.Mode = GPIO_OUT_PP;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">    GPIO_Inilize(GPIO_P0, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    GPIO_config();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_beep</span><span class="params">(u16 hz_val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    u16 Peroid = MAIN_Fosc / hz_val - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    PWMx_InitDefinePWMx_InitStructure;</span><br><span class="line">    <span class="comment">// 总配置</span></span><br><span class="line">    <span class="comment">// (MAIN_Fosc / 1000 - 1) 周期计数值</span></span><br><span class="line">    PWMx_InitStructure.PWM_Period   = Peroid;<span class="comment">//周期时间,   0~65535</span></span><br><span class="line">    PWMx_InitStructure.PWM_DeadTime = <span class="number">0</span>;<span class="comment">//死区发生器设置, 0~255</span></span><br><span class="line">    PWMx_InitStructure.PWM_EnoSelect= ENO5P;<span class="comment">//输出通道选择,ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P</span></span><br><span class="line">    PWMx_InitStructure.PWM_PS_SW    = PWM5_SW_P00;<span class="comment">//切换端口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体PWM端口配置</span></span><br><span class="line">    <span class="comment">// pwm6</span></span><br><span class="line">    PWMx_InitStructure.PWM5_Mode    =CCMRn_PWM_MODE1;<span class="comment">//模式,CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2</span></span><br><span class="line">    PWMx_InitStructure.PWM5_Duty    = Peroid / <span class="number">2</span>;<span class="comment">//PWM4占空比时间, 0~Period</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// pwm6</span></span><br><span class="line">    PWMx_InitStructure.PWM_CC5Enable   = ENABLE;<span class="comment">//开启PWM6P输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// PWM启动配置</span></span><br><span class="line">    PWMx_InitStructure.PWM_MainOutEnable= ENABLE;<span class="comment">//主输出使能, ENABLE,DISABLE</span></span><br><span class="line">    PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;<span class="comment">//使能计数器, ENABLE,DISABLE</span></span><br><span class="line">    PWM_Configuration(PWMB, &amp;PWMx_InitStructure);<span class="comment">//初始化PWM,  PWMA,PWMB</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_stop</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    PWMx_InitDefinePWMx_InitStructure;</span><br><span class="line">    PWMx_InitStructure.PWM_MainOutEnable= DISABLE;<span class="comment">//主输出使能, ENABLE,DISABLE</span></span><br><span class="line">    PWMx_InitStructure.PWM_CEN_Enable   = DISABLE;<span class="comment">//使能计数器, ENABLE,DISABLE</span></span><br><span class="line">    PWM_Configuration(PWMB, &amp;PWMx_InitStructure);<span class="comment">//初始化PWM,  PWMA,PWMB</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乐谱</p><p>我们在此讨论的乐谱，只包含两个部分，一个是哆来咪发唆拉西哆，另外一个就是节拍，在发声过程中，节拍是指一个音的发音时长。</p><p>以两只老虎为例：<a href="http://www.jianpu.cn/pu/33/33945.htm">http://www.jianpu.cn/pu/33/33945.htm</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679660462825-27a79da4-7bfb-4c93-b241-2672e0b7a06d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_17%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="71.png" /></p><p>乐谱中的 1234567，就是我们所说的 哆来咪发唆拉西。</p><p>接下来我们理解节拍。</p><p>时长约定</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679660898323-193e8c0c-ac79-427e-8533-22a502e4f8a3.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="73.png" /></p><p>1231有4个音符，每个音符默认是4个单位。具体一个单位时长是多少，后面我们可以定义具体值。</p><p>音符后的-</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679661362676-892a01e2-cbb3-4bcf-9e37-0cd0c2ca2e06.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_9%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="75.png" /></p><p>通常表示休止符，用来控制乐曲的节奏和节拍，表示停顿一个节拍，也就是4个单位时间.</p><p>上图为例，345后面是一个横杠，表示上一个音持续发音，则345分别对应的音长为4个单位、4个单位、8个单位</p><p>音符的下划线</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679661233019-eaf6913b-5705-4ad3-abd6-361e3624b743.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_11%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="74.png" /></p><p>一条下划线表示，时间缩短一半。</p><p>上图为例：</p><p>1后面31没有任何修饰，每个占据4个单位;</p><p>256下面是一条长横线，其中6下面还有一条短杠。6的时长是一半的一边，则是1个单位。</p><p>356下面是一条长横线，5的时长理论上就是一半，为2个单位。（但是后面有个点）</p><p>音符后跟圆点</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679661233019-eaf6913b-5705-4ad3-abd6-361e3624b743.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_11%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="74.png" /></p><p>在简谱中，音符后面跟一个圆点表示这个音符的时值被延长了一半。例如，一个四分音符加上一个圆点，表示时值相当于一个四分音符加一个八分音符的时值。这个符号称为“附点”，它可以使节奏更加灵活。</p><p>以上图为例：</p><p>156下面是一条长横线，5的时长理论上就是一半，为2个单位，但是后面有个圆点，表示在现有基础上增加一半，也就是3个单位</p><p>两只老虎的音长</p><table><thead><tr><th>简谱</th><th>1231                            1231                           345-        345-</th></tr></thead><tbody><tr><td>音长</td><td>4444                            4444                           448              448</td></tr><tr><td>词</td><td>两只老虎                     两只老虎                    跑得快         跑得快</td></tr><tr><td>简谱</td><td>565431                 565431                  151             151</td></tr><tr><td>音长</td><td>313144                 313144                  448              448</td></tr><tr><td>词</td><td>一只没有眼睛       一只没有耳朵       真奇怪       真奇怪</td></tr></tbody></table><p>音符0</p><p>在音乐中，音符0一般表示一种特殊的音符，称为休止符或停顿符，通常用来表示音乐的停顿或静默部分。休止符可以有不同的时值，例如四分之一休止符、八分之一休止符等。在简谱中，通常用一个数字0来表示休止符，放在对应的位置上，表示在该位置上没有音符需要演奏。</p><p>音符上弧形</p><p>两个音之间没有暂停间隔，连音音符</p><p>抽象封装</p><p>将乐谱分为简谱和音长进行封装:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">u8 notes[] = &#123;</span><br><span class="line"><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,</span><br><span class="line"><span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">u8 durations[] = &#123;</span><br><span class="line"><span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>,<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>,<span class="number">4</span>, <span class="number">4</span>, <span class="number">8</span>,<span class="number">4</span>, <span class="number">4</span>, <span class="number">8</span>,</span><br><span class="line"><span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>,<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>,<span class="number">4</span>, <span class="number">4</span>, <span class="number">8</span>,<span class="number">4</span>, <span class="number">4</span>, <span class="number">8</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对Buzzer的封装定义更加简谱化，不需要考虑发声频率。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_beep</span><span class="params">(u8 note)</span></span>;</span><br><span class="line"></span><br><span class="line">u16 FREQS[] = &#123;<span class="number">523</span>, <span class="number">587</span>, <span class="number">659</span>, <span class="number">698</span>, <span class="number">784</span>, <span class="number">880</span>, <span class="number">988</span>, <span class="number">523</span> * <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_beep</span><span class="params">(u8 note)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">u16 hz = FREQS[note - <span class="number">1</span>];</span><br><span class="line">u16 period = MAIN_Fosc / hz - <span class="number">1</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用时，就能完整的播放一首曲子了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">len = <span class="keyword">sizeof</span>(notes) / <span class="keyword">sizeof</span>(u8);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len;i++) &#123;</span><br><span class="line">    Buzzer_beep(notes[i]);</span><br><span class="line">d = durations[i] * <span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span>(d--) delay_ms(<span class="number">1</span>);</span><br><span class="line">Buzzer_stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几首曲子</p><p><a href="http://www.jianpu.cn/pu/11/111217.htm">http://www.jianpu.cn/pu/11/111217.htm</a></p><p><a href="http://www.jianpu.cn/pu/26/266965.htm">http://www.jianpu.cn/pu/26/266965.htm</a></p><p>天空之城源码</p><p>曲子设计</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>L11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>L22</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>L33</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>L44</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>L55</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>L66</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>L77</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N0 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>N1L1 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>N2L2 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>N3L3 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>N4L4 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>N5L5 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>N6L6 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>N7L7 + 7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>H1N1 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>H2N2 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>H3N3 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>H4N4 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>H5N5 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>H6N6 + 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>H7N7 + 7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">u8 notes[] = &#123;</span><br><span class="line">    N6, N7,  H1, N7, H1, H3,   N7, N3, N3, N6, N5, N6, H1,  N5, N0, N3, N3,N4, N3, N4, H1,</span><br><span class="line">    N3, N0, H1, H1, H1,  N7, N4, N4, N7,  N7, N0, N6, N7, H1, N7, H1, H3, N7, N0, N3, N3,N6, N5, N6, H1,</span><br><span class="line">    N5, N0, N3,  N4, H1, N7, N7, H1,  H2, H2, H3, H1, N0,   H1, N7, N6, N6, N7, N5, N6, N0, H1, H2,H3, H2, H3, H5,</span><br><span class="line">    H2, N0, N5,N5, H1, N7, H1, H3,  H3, N0, N0,N6, N7, H1, N7, H2, H2,  H1, N5, N5, N0,H4, H3, H2, H1,</span><br><span class="line">    H3,   H3, N0, H3,  H6, H5, H5,H3, H2, H1, N0, H1,  H2, H1, H2, H2, H5, H3, N0, H3,</span><br><span class="line">    H6,H5, H3, H2, H1, N0, H1,  H2, H1, H2, H2, N7,   N6, N0, </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">u8 durations[] = &#123;</span><br><span class="line">    <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,   <span class="number">12</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>,<span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>,</span><br><span class="line">    <span class="number">8</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,     <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,  <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,<span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>,<span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,</span><br><span class="line">    <span class="number">12</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,  <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,<span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>,<span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,</span><br><span class="line">    <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>,<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,  <span class="number">8</span>, <span class="number">4</span>, <span class="number">4</span>,<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>,<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>,</span><br><span class="line">    <span class="number">16</span>, <span class="number">8</span>, <span class="number">4</span>,<span class="number">4</span>,  <span class="number">8</span>, <span class="number">4</span>, <span class="number">4</span>,<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>,     <span class="number">8</span>, <span class="number">4</span>, <span class="number">4</span>,</span><br><span class="line">    <span class="number">8</span>, <span class="number">8</span>,<span class="number">2</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">2</span>,   <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">4</span>, </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>频率设计</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">u16 FREQS[] = &#123;</span><br><span class="line"><span class="number">523</span> * <span class="number">1</span>, <span class="number">587</span> * <span class="number">1</span>, <span class="number">659</span> * <span class="number">1</span>, <span class="number">698</span> * <span class="number">1</span>, <span class="number">784</span> * <span class="number">1</span>, <span class="number">880</span> * <span class="number">1</span>, <span class="number">988</span> * <span class="number">1</span>, </span><br><span class="line"><span class="number">523</span> * <span class="number">2</span>, <span class="number">587</span> * <span class="number">2</span>, <span class="number">659</span> * <span class="number">2</span>, <span class="number">698</span> * <span class="number">2</span>, <span class="number">784</span> * <span class="number">2</span>, <span class="number">880</span> * <span class="number">2</span>, <span class="number">988</span> * <span class="number">2</span>, </span><br><span class="line"><span class="number">523</span> * <span class="number">4</span>, <span class="number">587</span> * <span class="number">4</span>, <span class="number">659</span> * <span class="number">4</span>, <span class="number">698</span> * <span class="number">4</span>, <span class="number">784</span> * <span class="number">4</span>, <span class="number">880</span> * <span class="number">4</span>, <span class="number">988</span> * <span class="number">4</span>, </span><br><span class="line"><span class="number">523</span> * <span class="number">8</span>, <span class="number">587</span> * <span class="number">8</span>, <span class="number">659</span> * <span class="number">8</span>, <span class="number">698</span> * <span class="number">8</span>, <span class="number">784</span> * <span class="number">8</span>, <span class="number">880</span> * <span class="number">8</span>, <span class="number">988</span> * <span class="number">8</span>, </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>练习题</p><p>1实现一个键盘小钢琴</p><p>2尝试播放几首曲子</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数码管2</title>
    <link href="https://wander-m.github.io/%E6%95%B0%E7%A0%81%E7%AE%A12"/>
    <id>https://wander-m.github.io/%E6%95%B0%E7%A0%81%E7%AE%A12</id>
    <published>2023-07-14T03:28:48.298Z</published>
    <updated>2023-07-14T05:45:02.950Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数码管2"><a class="markdownIt-Anchor" href="#数码管2"></a> 数码管2</h1><p>学习目标</p><p>1理解自定义码表</p><p>2数码管驱动封装</p><p>3掌握数字走马灯实现</p><p>学习内容</p><p>驱动封装</p><p>根据前面的内容可以将代码进行封装，封装后作为一个独立的整体出现：</p><p>Nixie.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __NIXIE_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __NIXIE_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据输入</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIX_DIP44</span></span><br><span class="line"><span class="comment">// 移位</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIX_SCKP42</span></span><br><span class="line"><span class="comment">// 锁存</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>NIX_RCKP43</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIX_DI_INIT()&#123;P4M1 &amp;=~ 0x10,P4M0 &amp;= ~0x10;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIX_SCK_INIT()&#123;P4M1 &amp;=~ 0x04,P4M0 &amp;= ~0x04;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIX_RCK_INIT()&#123;P4M1 &amp;=~ 0x08,P4M0 &amp;= ~0x08;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie_display</span><span class="params">(u8 index, u8 dat)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>●定义 Nixie_init() 函数，负责对GPIO相关的初始化</p><p>●定义 Nixie_display()函数负责显示</p><p>Nixie.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Nixie.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">NIX_DI_INIT();</span><br><span class="line">NIX_SCK_INIT();</span><br><span class="line">NIX_RCK_INIT();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Nixie_out</span><span class="params">(u8 d)</span> </span>&#123;</span><br><span class="line">u8 i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="comment">//位输入</span></span><br><span class="line">NIX_DI = (d &amp; (<span class="number">1</span> &lt;&lt; i));</span><br><span class="line"><span class="comment">// 移位操作</span></span><br><span class="line">NIX_SCK = <span class="number">0</span>;</span><br><span class="line">NOP2();</span><br><span class="line">NIX_SCK = <span class="number">1</span>;</span><br><span class="line">NOP2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie_display</span><span class="params">(u8 index, u8 dat)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 显示数字</span></span><br><span class="line">Nixie_out(dat);</span><br><span class="line"><span class="comment">// 在哪个上显示</span></span><br><span class="line">Nixie_out(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 锁存</span></span><br><span class="line">NIX_RCK = <span class="number">0</span>;</span><br><span class="line">NOP2();</span><br><span class="line">NIX_RCK = <span class="number">1</span>;</span><br><span class="line">NOP2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上为Nixie.h的实现，也是对之前代码的封装处理。</p><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Nixie.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">u8 dat, idx;</span><br><span class="line">Nixie_init();</span><br><span class="line">EA = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dat = 0b01010101;</span></span><br><span class="line">dat = <span class="number">0xF9</span>;</span><br><span class="line"><span class="comment">//idx = 0b00000001</span></span><br><span class="line">idx = <span class="number">0x04</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">Nixie_display(idx, dat);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上为 main.c中使用我们封装的驱动。以上代码就会很简洁。</p><p>封装的一些疑问</p><p>封装的特点</p><p>封装是面向对象程序设计中的一个重要概念，它将数据和行为封装在一起，形成一个独立的单元。下面是封装的特点：</p><p>1数据隐藏：封装可以隐藏数据，只对外界公开必要的接口，从而保证数据的安全性和可靠性。</p><p>2接口统一：封装可以将数据和行为组织在一起，形成一个类或对象，通过统一的接口对外提供服务，便于使用和管理。</p><p>3信息隐藏：封装可以隐藏实现细节，只对外界公开必要的信息，从而降低了程序的复杂度和耦合度，提高了程序的可维护性和可扩展性。</p><p>4可重用性：封装可以将数据和行为封装成一个独立的单元，便于复用和重复利用，提高了程序的开发效率和代码的可重用性。</p><p>5封装和继承相结合：封装和继承是面向对象程序设计中的两个重要概念，它们相互配合，可以构建出更加复杂、灵活和可扩展的程序。</p><p>总之，封装是面向对象程序设计的核心思想之一，它可以提高程序的可靠性、安全性、可维护性和可扩展性，是程序设计中不可或缺的重要概念。</p><p>当前设计问题</p><p>接口设计：定义初始化(Nixie_init)，和具体功能(Nixie_display)，初始化和芯片开发板设计相关，功能的定义和业务相关。</p><p>初始化问题：为什么不用库函数？首先是可以使用库函数的。观察使用库函数和不是库函数的区别。一个初始化写在头文件，一个写在c文件。c文件是实现，做到抛开平台相关是最好的方案，也就是换了芯片平台，实现不动，通过改变头中的配置，就可以做到移植。（当然，理想状态是这样的，还得看实现复杂度。目标明确，尽量做到这个，为移植提供最少变化方案，这个是共识）</p><p>自定义码表</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669604412157-8c33feed-f853-45a4-a50c-f1ef339d7d12.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128105958.png" /></p><table><thead><tr><th>索引</th><th>显示值</th><th>导通管脚</th><th>共阳</th><th>共阴</th><th></th><th></th></tr></thead><tbody><tr><td>二进制</td><td>16进制</td><td>二进制</td><td>16进制</td><td></td><td></td><td></td></tr><tr><td>0</td><td>0</td><td>，，F，E，D，C，B，A</td><td>1100 0000</td><td>0xC0</td><td>0011 1111</td><td>0x3F</td></tr><tr><td>1</td><td>1</td><td>， ，，，，C，B，</td><td>1111 1001</td><td>0xF9</td><td></td><td></td></tr><tr><td>2</td><td>2</td><td>，G，，E，D，，B，A</td><td>1010 0100</td><td>0xA4</td><td></td><td></td></tr><tr><td>3</td><td>3</td><td>，G，，，D，C，B，A</td><td>1011 0000</td><td>0xB0</td><td></td><td></td></tr><tr><td>4</td><td>4</td><td>，G，F，，，C，B，</td><td>1001 1001</td><td>0x99</td><td></td><td></td></tr><tr><td>5</td><td>5</td><td>，G，F，，D，C，，A</td><td>1001 0010</td><td>0x92</td><td></td><td></td></tr><tr><td>6</td><td>6</td><td>，G，F，E，D，C，，A</td><td>1000 0010</td><td>0x82</td><td></td><td></td></tr><tr><td>7</td><td>7</td><td>，，，，，C，B，A</td><td>1111 1000</td><td>0xF8</td><td></td><td></td></tr><tr><td>8</td><td>8</td><td>，G，F，E，D，C，B，A</td><td>1000 0000</td><td>0x80</td><td></td><td></td></tr><tr><td>9</td><td>9</td><td>，G，F，，D，C，B，A</td><td>1001 0000</td><td>0x90</td><td></td><td></td></tr><tr><td>10</td><td>0.</td><td>DP，，F，E，D，C，B，A</td><td>0100 0000</td><td>0x64</td><td></td><td></td></tr><tr><td>11</td><td>1.</td><td>DP ， ，，，，C，B，</td><td>0111 1001</td><td>0x79</td><td></td><td></td></tr><tr><td>12</td><td>2.</td><td>DP，G，，E，D，，B，A</td><td>0010 0100</td><td>0x24</td><td></td><td></td></tr><tr><td>13</td><td>3.</td><td>DP，G，，，D，C，B，A</td><td>0011 0000</td><td>0x30</td><td></td><td></td></tr><tr><td>14</td><td>4.</td><td>DP，G，F，，，C，B，</td><td>0001 1001</td><td>0x19</td><td></td><td></td></tr><tr><td>15</td><td>5.</td><td>DP，G，F，，D，C，，A</td><td>0001 0010</td><td>0x12</td><td></td><td></td></tr><tr><td>16</td><td>6.</td><td>DP，G，F，E，D，C，，A</td><td>0000 0010</td><td>0x02</td><td></td><td></td></tr><tr><td>17</td><td>7.</td><td>DP，，，，，C，B，A</td><td>0111 1000</td><td>0x78</td><td></td><td></td></tr><tr><td>18</td><td>8.</td><td>DP，G，F，E，D，C，B，A</td><td>0000 0000</td><td>0x00</td><td></td><td></td></tr><tr><td>19</td><td>9.</td><td>DP，G，F，，D，C，B，A</td><td>0001 0000</td><td>0x10</td><td></td><td></td></tr><tr><td>20</td><td>.</td><td>DP，，，，，，，</td><td>0111 1111</td><td>0x7F</td><td></td><td></td></tr><tr><td>21</td><td>-</td><td>，G，，，，，，</td><td>1011 1111</td><td>0xBF</td><td></td><td></td></tr><tr><td>22</td><td>A</td><td>，G，F，E，，C，B，A</td><td>1000 1000</td><td>0x88</td><td></td><td></td></tr><tr><td>23</td><td>b</td><td>，G，F，E，D，C，，</td><td>1000 0011</td><td>0x83</td><td></td><td></td></tr><tr><td>24</td><td>C</td><td>，，F，E，D，，，A</td><td>1100 0110</td><td>0xC6</td><td></td><td></td></tr><tr><td>25</td><td>d</td><td>，G，，E，D，C，B，</td><td>1010 0001</td><td>0xA1</td><td></td><td></td></tr><tr><td>26</td><td>E</td><td>，G，F，E，D，，，A</td><td>1000 0110</td><td>0x86</td><td></td><td></td></tr><tr><td>27</td><td>F</td><td>，G，F，E，，，，A</td><td>1000 1110</td><td>0x8E</td><td></td><td></td></tr><tr><td>28</td><td>H</td><td>，G，F，E，，C，B，</td><td>1000 1001</td><td>0x89</td><td></td><td></td></tr><tr><td>29</td><td>J</td><td>，，，，D，C，B，</td><td>1111 0001</td><td>0xF1</td><td></td><td></td></tr><tr><td>30</td><td>L</td><td>，，F，E，D，，，</td><td>1100 0111</td><td>0xC7</td><td></td><td></td></tr><tr><td>31</td><td>P</td><td>，G，F，E，，，B，A</td><td>1000 1100</td><td>0x8C</td><td></td><td></td></tr><tr><td>32</td><td>q</td><td>，G，F，，，C，B，A</td><td>1001 1000</td><td>0x98</td><td></td><td></td></tr><tr><td>33</td><td>U</td><td>，，F，E，D，C，B，</td><td>1100 0001</td><td>0xC1</td><td></td><td></td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">u8 code LED_TABLE[] = </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 0 1 2-&gt; 9</span></span><br><span class="line"><span class="number">0xC0</span>,<span class="number">0xF9</span>,<span class="number">0xA4</span>,<span class="number">0xB0</span>,<span class="number">0x99</span>,<span class="number">0x92</span>,<span class="number">0x82</span>,<span class="number">0xF8</span>,<span class="number">0x80</span>,<span class="number">0x90</span>,</span><br><span class="line"><span class="comment">// 0  1. 2. -&gt; 9.</span></span><br><span class="line">  <span class="number">0x64</span>,<span class="number">0x79</span>,<span class="number">0x24</span>,<span class="number">0x30</span>,<span class="number">0x19</span>,<span class="number">0x12</span>,<span class="number">0x02</span>,<span class="number">0x78</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,</span><br><span class="line"><span class="comment">// . -</span></span><br><span class="line"><span class="number">0x7F</span>, <span class="number">0xBF</span></span><br><span class="line"><span class="comment">// AbCdEFHJLPqU</span></span><br><span class="line"><span class="number">0x88</span>,<span class="number">0x83</span>,<span class="number">0xC6</span>,<span class="number">0xA1</span>,<span class="number">0x86</span>,<span class="number">0x8E</span>,<span class="number">0x89</span>,<span class="number">0xF1</span>,<span class="number">0xC7</span>,<span class="number">0x8C</span>,<span class="number">0x98</span>,<span class="number">0xC1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie_display</span><span class="params">(u8 index, u8 dat)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 显示数字</span></span><br><span class="line">Nixie_out(LED_TABLE[dat]);</span><br><span class="line"><span class="comment">// 在哪个上显示</span></span><br><span class="line">Nixie_out((<span class="number">1</span> &lt;&lt; index));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 锁存</span></span><br><span class="line">NIX_RCK = <span class="number">0</span>;</span><br><span class="line">NOP2();</span><br><span class="line">NIX_RCK = <span class="number">1</span>;</span><br><span class="line">NOP2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>●index在没有封装前，一个bit表示一个灯。封装后表示灯的下标。这样设计符合人的思考习惯，函数就是让人调得舒服</p><p>●dat在没有封装前，是自己来总结灯的开灭，封装后表示自己定义的字符，通过下标访问。这样简化操作。还是为了调用舒服。</p><p>数字走马灯实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Nixie.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">u8 dat, idx, i;</span><br><span class="line">Nixie_init();</span><br><span class="line">EA = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>;i++) &#123;</span><br><span class="line">Nixie_display(i, i);</span><br><span class="line">delay_ms(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>●调整帧率来控制显示，达到走马灯的效果</p><p>扩展知识</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689020175803-ba464ddf-006f-4a55-8cb4-524d4338e0a2.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p><p>原理图中，大部分引脚我们已经知道了，但是还有些引脚功能不清楚。</p><p>●RESET： 10号引脚。</p><p>●OUTPUT_ENABLE: 13号引脚。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679629474932-54a38609-dde1-400a-9272-7d523b3a800b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_57%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="68.png" /></p><p>以上是芯片手册的管脚定义。</p><p>●10号引脚：SCLR，移位寄存器清零端。</p><p>●13号引脚：G，输出使能端。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679629671006-bebd4c64-5684-44bb-8496-2880459a53aa.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_58%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="69.png" /></p><p>以上是手册中的真值表。</p><p>我们的原理图中 10号引脚(SCLR)为 VCC 高电平，13号引脚(G)为GND 低电平。对照以上表，我们进行观察。</p><p>1如果有需求，我们可以控制SCLR引脚进行寄存器的清理，当然需要开发板中进行引脚设计。</p><p>2G引脚我们设置为GND（即低电平），如果配置为高电平，则不再亮灯输出。</p><p>串行输入并行输出</p><p>其实我们的 74hc595就是串行输入数据，然后并行输出信号的芯片。</p><p>并行输入串行输出</p><p>其实也有种需求，模拟信号需要变为二进制数据，那这种就需要并行输入串行输出。和74hc595正好相反。</p><p>目前常见的芯片有74HC165。协议解析方式按照芯片手册来，通常和74hc595相反。</p><p>练习题</p><p>1实现走马灯效果</p><p>2通过串口控制显示</p><p>3通过独立按键进行数码管显示控制</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数码管</title>
    <link href="https://wander-m.github.io/%E6%95%B0%E7%A0%81%E7%AE%A1"/>
    <id>https://wander-m.github.io/%E6%95%B0%E7%A0%81%E7%AE%A1</id>
    <published>2023-07-14T03:22:39.309Z</published>
    <updated>2023-07-14T05:44:45.218Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数码管"><a class="markdownIt-Anchor" href="#数码管"></a> 数码管</h1><p>学习目标</p><p>1理解数码管电路原理</p><p>2理解74HC595移位寄存器原理</p><p>3了解74HC595移位寄存器电路设计</p><p>4加强二进制操作</p><p>5驱动74HC595移位寄存器控制数码管</p><p>学习内容</p><p>数码管结构</p><p>共阴与共阳</p><p>共阳数码管是指将所有发光二极管的阳极接到一起，形成公共阳极（COM）的数码管，共阳数码管在应用的时候，应该将 COM 端口接到正极，当某一段发光二极管的阴极为低电平的时候，相对应的段就点亮，当某一字段的阴极为高电平的时候，相对应段就不亮。</p><p>1位数码管</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669604412157-8c33feed-f853-45a4-a50c-f1ef339d7d12.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128105958.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669607780459-1bd14482-358d-4f97-a6c9-5b5bfeb29aa1.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_55%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128115607.png" /></p><p>2位数码管</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669604309404-17f70805-1619-4d6f-b4a2-18b56644d47c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_15%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128105822.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669608453153-10c37b28-99ce-4095-b424-696e2db16939.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_30%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128120713.png" /></p><p>4位数码管</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669604061516-d6194d35-88b9-49cd-8ee9-b208a0c74da7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_44%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128105410.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669608971316-48c28fc5-16ac-4f9b-aad4-04f0db2f9f55.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_57%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128121600.png" /></p><p>移位寄存器</p><p>74HC595 是一款 8 位 CMOS 移位寄存器。8 位并行输出端口为可控的三态输出，一 个串行输出端口，可以实现多级芯片串行控制，组成 8n 位（n 为芯片数量）并行输  。</p><p>优点：通过逻辑操作来控制LED的状态，少量的引脚控制更多的状态。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669604412157-8c33feed-f853-45a4-a50c-f1ef339d7d12.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128105958.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1669613133672-1ae7b249-5da1-465a-85c6-16a58db32249.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_30%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221128132522.png" /></p><p>原理图</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689020680059-bd8a76ac-85d1-4973-88c0-2e820e414193.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_45%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p><p>移位寄存器数据流程</p><p>移位寄存器的引脚：</p><p>1LATCH_CLOCK:  锁存时钟</p><p>2SHIFT_CLOCK: 移位时钟</p><p>3A:  数据输入信号管脚</p><p>4QA~QH: 数据信号转化出来的高低电平</p><p>5SQH: 串行数据输出管脚</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679543002928-356ea502-bf0d-4216-b4c1-1c462c97936d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_55%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="63.png" /></p><p>上图帮我们认识了几个管脚的作用：</p><p>●A：数据信号输入</p><p>●QA~QH: 高低电平输出</p><p>同时再次加深了我们对74HC595功能的理解：将数据转换为高低电平的一个工具</p><p>移位寄存器控制流程</p><p>数量流程中，数据变成高低电平过程清楚了。但是数据是给到芯片的，给这个过程是比较讲究的。</p><p>也就是我们传统说法，要按照规矩来传递数据。数据传递是要通过协议的。</p><p>我们通过 数据输入信号管脚(原理图上标记为A)来输入数据。我们必须清楚的知道，一个引脚给数据，其实就是给高低电平信号，一个高低电平信号只能表示一个bit，而我们又8给输出口，理论上需要给8次高低电平才能满足8个端口的输出要求。但是如何去界定8给高低电平呢，就需要用时间去界定。提供了两个引脚：</p><p>1LATCH_CLOCK:  锁存时钟引脚</p><p>2SHIFT_CLOCK: 移位时钟引脚</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689019963991-06a459ee-4900-4a09-a04a-7182386481a9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_41%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p><p>移位：由低电平变为高电平，表示记录一个位的电平。</p><p>锁存：由低电平变为高电平，表示将记录的数据应用到电路中。</p><p>移位寄存器串联</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689020175803-ba464ddf-006f-4a55-8cb4-524d4338e0a2.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p><p>本案例中是有两个移位寄存器U1和U2的。分别关注两个移位寄存器的A和SQH.</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689020343869-f85185c9-03cd-42c4-8755-7f2f37cf45f0.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_29%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p><p>通过流程我们可以明确以下结论:</p><p>1移位寄存器通过A输入数据</p><p>2移位寄存器通过SQH输出数据</p><p>3两个移位寄存器通过将一个的SQH输出到另外一个的输入A口，两个移位寄存器就串联了</p><p>4末端的移位寄存器输出口悬空表示不输出</p><p>5数据会传递到末端，也就是数据会先填充的是末端。</p><p>串联后控制流程需要有所改变，改变如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689020414801-39cc738d-9b16-4a65-830c-7a8f96111ff2.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_42%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689047275493-66741e6f-2aaf-4acf-b49b-371981639cd8.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_37%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p><p>●Logic分析仪</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689046464727-036674c8-17e8-4e4d-a97c-698bd0f5bed7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_36%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p><p>●Digtals</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1689047348553-e37ed05c-1bfc-4805-b73a-5b9ba1885d25.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_41%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p><p>实现数码管显示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据输入</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIX_DIP44</span></span><br><span class="line"><span class="comment">// 移位</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIX_SCKP42</span></span><br><span class="line"><span class="comment">// 锁存</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>NIX_RCKP43</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">GPIO_InitTypeDefGPIO_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">GPIO_InitStructure.Pin  = GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">GPIO_InitStructure.Mode = GPIO_OUT_PP;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">GPIO_Inilize(GPIO_P4, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">u8 i, dat, idx;</span><br><span class="line">GPIO_config();</span><br><span class="line">EA = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dat = 0b01010101;决定显示的数字内容</span></span><br><span class="line">dat = <span class="number">0xF9</span>;</span><br><span class="line"><span class="comment">//idx = 0b00000001;决定显示哪几位</span></span><br><span class="line">idx = <span class="number">0x04</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="comment">//位输入 &gt; 0 的值可以统一认作1</span></span><br><span class="line">NIX_DI = (dat &amp; (<span class="number">1</span> &lt;&lt; i));</span><br><span class="line"><span class="comment">// 移位操作</span></span><br><span class="line">NIX_SCK = <span class="number">0</span>;</span><br><span class="line">NOP2();</span><br><span class="line">NIX_SCK = <span class="number">1</span>;</span><br><span class="line">NOP2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="comment">//位输入 &gt; 0 的值可以统一认作1</span></span><br><span class="line">NIX_DI = (idx &amp; (<span class="number">1</span> &lt;&lt; i));</span><br><span class="line"><span class="comment">// 移位操作</span></span><br><span class="line">NIX_SCK = <span class="number">0</span>;</span><br><span class="line">NOP2();</span><br><span class="line">NIX_SCK = <span class="number">1</span>;</span><br><span class="line">NOP2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 锁存</span></span><br><span class="line"><span class="comment">// 移位操作</span></span><br><span class="line">NIX_RCK = <span class="number">0</span>;</span><br><span class="line">NOP2();</span><br><span class="line">NIX_RCK = <span class="number">1</span>;</span><br><span class="line">NOP2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习题</p><p>1实现数码管数字显示</p><p>2通过串口控制数码管显示（串口指令，两个字节，一个控制显示，一个控制哪一个灯显示）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>独立按键</title>
    <link href="https://wander-m.github.io/%E7%8B%AC%E7%AB%8B%E6%8C%89%E9%94%AE"/>
    <id>https://wander-m.github.io/%E7%8B%AC%E7%AB%8B%E6%8C%89%E9%94%AE</id>
    <published>2023-07-14T03:19:03.626Z</published>
    <updated>2023-07-14T05:44:28.450Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="独立按键"><a class="markdownIt-Anchor" href="#独立按键"></a> 独立按键</h1><p>学习目标</p><p>1能够读取按键操作</p><p>2能够处理按键消抖</p><p>学习内容</p><p>原理图</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679479677974-7acb80f4-a532-431b-8ebe-098174ce8d22.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="61.png" /></p><p>按键消抖</p><p>1软件延时法：在按键按下时，使用软件延时一段时间，例如10毫秒，然后再检测按键是否还处于按下状态，如果是，则认为按键有效。这种方法简单易行，但会浪费一定的处理器时间，同时需要根据实际情况调整延时时间。</p><p>2硬件滤波法：在按键输入引脚上添加RC滤波电路，可以有效地去除按键信号上的瞬间噪声。这种方法对于高频噪声的去除效果较好，但需要一定的电路设计能力。</p><p>3程序消抖法：在程序中记录按键前后两次的状态，如果两次状态不同，则认为按键有效。这种方法可以根据需要调整检测时间，消抖效果较好，但需要额外的程序设计。</p><p>我们采用程序消抖法。</p><p>软件设计</p><p>要求</p><p>当用户按下，或者松开按键时，捕获到这个事件。将事件通过串口发出来。</p><p>分析</p><p>监控引脚的高低电平变化。记录状态，比对实时状态。</p><p>●监控：死循环去读取电平信息</p><p>●记录与比对：通过变量记录，实时拿到当前状态，与记录的上一次进行比对。</p><p>实现</p><p>通过状态记录，记录每个按键的状态。默认得定义状态的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;UART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY1P51</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY2P52</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY3P53</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY4P54</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UP1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DOWN0</span></span><br><span class="line"></span><br><span class="line">u8 key1_state = UP; </span><br><span class="line">u8 key2_state = UP; </span><br><span class="line">u8 key3_state = UP; </span><br><span class="line">u8 key4_state = UP; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">GPIO_InitTypeDefGPIO_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">GPIO_InitStructure.Pin  = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">GPIO_InitStructure.Mode = GPIO_PullUp;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">GPIO_Inilize(GPIO_P5, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_config</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">COMx_InitDefineCOMx_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;<span class="comment">//模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit_BRTx</span></span><br><span class="line">COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;<span class="comment">//选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使用BRT_Timer2)</span></span><br><span class="line">COMx_InitStructure.UART_BaudRate  = <span class="number">115200ul</span>;<span class="comment">//波特率, 一般 110 ~ 115200</span></span><br><span class="line">COMx_InitStructure.UART_RxEnable  = ENABLE;<span class="comment">//接收允许,   ENABLE或DISABLE</span></span><br><span class="line">COMx_InitStructure.BaudRateDouble = DISABLE;<span class="comment">//波特率加倍, ENABLE或DISABLE</span></span><br><span class="line">COMx_InitStructure.UART_Interrupt = ENABLE;<span class="comment">//中断允许,   ENABLE或DISABLE</span></span><br><span class="line">COMx_InitStructure.UART_Priority    = Priority_0;<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31;<span class="comment">//切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44</span></span><br><span class="line">UART_Configuration(UART1, &amp;COMx_InitStructure);<span class="comment">//初始化串口1 UART1,UART2,UART3,UART4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIMER_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">TIM_InitTypeDefTIM_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;<span class="comment">//指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TIM_8BitAutoReload,TIM_16BitAutoReloadNoMask</span></span><br><span class="line">TIM_InitStructure.TIM_Priority    = Priority_0;<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">TIM_InitStructure.TIM_Interrupt = ENABLE;<span class="comment">//中断是否允许,   ENABLE或DISABLE</span></span><br><span class="line">TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;<span class="comment">//指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_Ext</span></span><br><span class="line">TIM_InitStructure.TIM_ClkOut    = DISABLE;<span class="comment">//是否输出高速脉冲, ENABLE或DISABLE</span></span><br><span class="line">TIM_InitStructure.TIM_Value     = <span class="number">65536UL</span> - (MAIN_Fosc / <span class="number">1000UL</span>);<span class="comment">//初值,</span></span><br><span class="line">TIM_InitStructure.TIM_Run       = ENABLE;<span class="comment">//是否初始化后启动定时器, ENABLE或DISABLE</span></span><br><span class="line">Timer_Inilize(Timer0,&amp;TIM_InitStructure);<span class="comment">//初始化Timer0  Timer0,Timer1,Timer2,Timer3,Timer4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer0_call</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(KEY1 == UP &amp;&amp; key1_state == DOWN) &#123;</span><br><span class="line"><span class="comment">// up</span></span><br><span class="line">key1_state = UP;</span><br><span class="line"></span><br><span class="line">PrintString1(<span class="string">&quot;key1 up\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(KEY1 == DOWN &amp;&amp; key1_state == UP) &#123;</span><br><span class="line"><span class="comment">// down</span></span><br><span class="line">key1_state = DOWN;</span><br><span class="line"></span><br><span class="line">PrintString1(<span class="string">&quot;key1 down\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(KEY2 == UP &amp;&amp; key2_state == DOWN) &#123;</span><br><span class="line"><span class="comment">// up</span></span><br><span class="line">key2_state = UP;</span><br><span class="line"></span><br><span class="line">PrintString1(<span class="string">&quot;key2 up\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(KEY2 == DOWN &amp;&amp; key2_state == UP) &#123;</span><br><span class="line"><span class="comment">// down</span></span><br><span class="line">key2_state = DOWN;</span><br><span class="line"></span><br><span class="line">PrintString1(<span class="string">&quot;key2 down\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(KEY3 == UP &amp;&amp; key3_state == DOWN) &#123;</span><br><span class="line"><span class="comment">// up</span></span><br><span class="line">key3_state = UP;</span><br><span class="line"></span><br><span class="line">PrintString1(<span class="string">&quot;key3 up\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(KEY3 == DOWN &amp;&amp; key3_state == UP) &#123;</span><br><span class="line"><span class="comment">// down</span></span><br><span class="line">key3_state = DOWN;</span><br><span class="line"></span><br><span class="line">PrintString1(<span class="string">&quot;key3 down\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(KEY4 == UP &amp;&amp; key4_state == DOWN) &#123;</span><br><span class="line"><span class="comment">// up</span></span><br><span class="line">key4_state = UP;</span><br><span class="line"></span><br><span class="line">PrintString1(<span class="string">&quot;key4 up\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(KEY4 == DOWN &amp;&amp; key4_state == UP) &#123;</span><br><span class="line"><span class="comment">// down</span></span><br><span class="line">key4_state = DOWN;</span><br><span class="line"></span><br><span class="line">PrintString1(<span class="string">&quot;key4 down\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">GPIO_config();</span><br><span class="line">UART_config();</span><br><span class="line">TIMER_config();</span><br><span class="line">EA = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态记录优化</p><p>通过一个值，表示多个状态，节省内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">u8 key_state = <span class="number">0x0F</span>;<span class="comment">// 默认全部抬起</span></span><br><span class="line"><span class="comment">// 省略逻辑......</span></span><br><span class="line"><span class="comment">/////////// 表示方式 /////////////</span></span><br><span class="line"><span class="comment">// key1的抬起和按下状态表示方式</span></span><br><span class="line">(key_state &amp; <span class="number">0x01</span>) &gt;&gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// key2的抬起和按下状态表示方式</span></span><br><span class="line">(key_state &amp; <span class="number">0x02</span>) &gt;&gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// key3的抬起和按下状态表示方式</span></span><br><span class="line">(key_state &amp; <span class="number">0x04</span>) &gt;&gt; <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// key4的抬起和按下状态表示方式</span></span><br><span class="line">(key_state &amp; <span class="number">0x08</span>) &gt;&gt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///////// 设置方式 ////////////</span></span><br><span class="line"><span class="comment">// key1 设置抬起状态</span></span><br><span class="line">key_state |= <span class="number">0x01</span>;</span><br><span class="line"><span class="comment">// key1 设置按下状态</span></span><br><span class="line">key_state &amp;= ~<span class="number">0x01</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key2 设置抬起状态</span></span><br><span class="line">key_state |= <span class="number">0x02</span>;</span><br><span class="line"><span class="comment">// key2 设置按下状态</span></span><br><span class="line">key_state &amp;= ~<span class="number">0x02</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key3 设置抬起状态</span></span><br><span class="line">key_state |= <span class="number">0x04</span>;</span><br><span class="line"><span class="comment">// key3 设置按下状态</span></span><br><span class="line">key_state &amp;= ~<span class="number">0x04</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key4 设置抬起状态</span></span><br><span class="line">key_state |= <span class="number">0x08</span>;</span><br><span class="line"><span class="comment">// key4 设置按下状态</span></span><br><span class="line">key_state &amp;= ~<span class="number">0x08</span>;</span><br></pre></td></tr></table></figure><p>方法判断设置优化</p><p>代码便于阅读，方便维护。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_KEY_UP(idx)(((key_state &amp; (1 <span class="meta-string">&lt;&lt; idx))) &gt;</span>&gt; idx) == UP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_KEY_DOWN(idx)(((key_state &amp; (1 <span class="meta-string">&lt;&lt; idx))) &gt;</span>&gt; idx) == DOWN</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SET_KEY_UP(idx)key_state |= (1 &lt;&lt; idx)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SET_KEY_DOWN(idx)key_state &amp;= ~(1 &lt;&lt; idx)</span></span><br></pre></td></tr></table></figure><p>练习题</p><p>1实现按键操作</p><p>2通过按键控制震动马达震动</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>热敏电阻</title>
    <link href="https://wander-m.github.io/%E7%83%AD%E6%95%8F%E7%94%B5%E9%98%BB"/>
    <id>https://wander-m.github.io/%E7%83%AD%E6%95%8F%E7%94%B5%E9%98%BB</id>
    <published>2023-07-14T03:16:38.820Z</published>
    <updated>2023-07-14T05:44:14.022Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="热敏电阻"><a class="markdownIt-Anchor" href="#热敏电阻"></a> 热敏电阻</h1><p>学习目标</p><p>学习内容</p><p>NTC(Negative Temperature Coefficient)是指随温度上升电阻减小、具有负温度系数的热敏电阻现象和材料。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679935972816-c498f840-d799-429d-9ba0-0e96d62b4248.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_30%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="83.png" /></p><table><thead><tr><th>ADC功能</th><th>引脚</th></tr></thead><tbody><tr><td>ADC0</td><td>P1.0</td></tr><tr><td>ADC1</td><td>P1.1</td></tr><tr><td>ADC2</td><td>P5.4</td></tr><tr><td>ADC3</td><td>P1.3</td></tr><tr><td>ADC4</td><td>P1.4</td></tr><tr><td>ADC5</td><td>P1.5</td></tr><tr><td>ADC6</td><td>P1.6</td></tr><tr><td>ADC7</td><td>P1.7</td></tr><tr><td>ADC8</td><td>P0.0</td></tr><tr><td>ADC9</td><td>P0.1</td></tr><tr><td>ADC10</td><td>P0.2</td></tr><tr><td>ADC11</td><td>P0.3</td></tr><tr><td>ADC12</td><td>P0.4</td></tr><tr><td>ADC13</td><td>P0.5</td></tr><tr><td>ADC14</td><td>P0.6</td></tr></tbody></table><p>温度计算步骤</p><p>1通过ADC得到电压</p><p>∵4096<em>A<strong>D</strong>C</em><em><em>V</em>=2.5<em>V<strong>n</strong>t**c</em>∴<em>V<strong>n</strong>t**c</em>=2.5×4096<em>A<strong>D</strong>C</em></em><em>V</em></p><p>这里ADC_V就是通过ADC通道读到的数值，范围是0-4096</p><p>V_ntc即为对应的电压值</p><p>2通过欧姆定律得到阻值</p><p><em>X</em><em><em>r**V</em>−<em>n<strong>t</strong>c</em>=10<em>K</em>3.3−<em>V</em>−<em>n<strong>t</strong>c</em>=10<em>K</em>+<em>X</em></em><em>r</em>3.3</p><p>即整个线路上的电流是固定的，则热敏电阻的阻值X_r = V_ntc * 10 / (3.3 - V_ntc)</p><p>3通过阻值查表得到温度</p><p>根据阻值对照该热敏电阻提供的对照表，得到对应的温度值</p><p>热敏电阻与温度对照表</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1680230095472-72c9d21d-e679-4103-9e3b-522cd5d6488b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="NTC对照表.png" /></p><p>采用表的方式来记录 电阻值和温度的关系。</p><p>其中，表中记录的是阻值，下标记录的是温度。可以通过阻值比对，查询出下标，下标就是对应的温度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line">u16 code temp_table[]= &#123;</span><br><span class="line"><span class="number">58354</span>, <span class="comment">// -55</span></span><br><span class="line"><span class="number">55464</span>, <span class="comment">// -54</span></span><br><span class="line"><span class="number">52698</span>, <span class="comment">// -53</span></span><br><span class="line"><span class="number">50048</span>, <span class="comment">// -52</span></span><br><span class="line"><span class="number">47515</span>, <span class="comment">// -51</span></span><br><span class="line"><span class="number">45097</span>, <span class="comment">// -50</span></span><br><span class="line"><span class="number">42789</span>, <span class="comment">// -49</span></span><br><span class="line"><span class="number">40589</span>, <span class="comment">// -48</span></span><br><span class="line"><span class="number">38492</span>, <span class="comment">// -47</span></span><br><span class="line"><span class="number">36496</span>, <span class="comment">// -46</span></span><br><span class="line"><span class="number">34597</span>, <span class="comment">// -45</span></span><br><span class="line"><span class="number">32791</span>, <span class="comment">// -44</span></span><br><span class="line"><span class="number">31075</span>, <span class="comment">// -43</span></span><br><span class="line"><span class="number">29444</span>, <span class="comment">// -42</span></span><br><span class="line"><span class="number">27896</span>, <span class="comment">// -41</span></span><br><span class="line"><span class="number">26427</span>, <span class="comment">// -40</span></span><br><span class="line"><span class="number">25034</span>, <span class="comment">// -39</span></span><br><span class="line"><span class="number">23713</span>, <span class="comment">// -38</span></span><br><span class="line"><span class="number">22460</span>, <span class="comment">// -37</span></span><br><span class="line"><span class="number">21273</span>, <span class="comment">// -36</span></span><br><span class="line"><span class="number">20148</span>, <span class="comment">// -35</span></span><br><span class="line"><span class="number">19083</span>, <span class="comment">// -34</span></span><br><span class="line"><span class="number">18075</span>, <span class="comment">// -33</span></span><br><span class="line"><span class="number">17120</span>, <span class="comment">// -32</span></span><br><span class="line"><span class="number">16216</span>, <span class="comment">// -31</span></span><br><span class="line"><span class="number">15361</span>, <span class="comment">// -30</span></span><br><span class="line"><span class="number">14551</span>, <span class="comment">// -29</span></span><br><span class="line"><span class="number">13785</span>, <span class="comment">// -28</span></span><br><span class="line"><span class="number">13061</span>, <span class="comment">// -27</span></span><br><span class="line"><span class="number">12376</span>, <span class="comment">// -26</span></span><br><span class="line"><span class="number">11728</span>, <span class="comment">// -25</span></span><br><span class="line"><span class="number">11114</span>, <span class="comment">// -24</span></span><br><span class="line"><span class="number">10535</span>, <span class="comment">// -23</span></span><br><span class="line"><span class="number">9986</span>,  <span class="comment">// -22</span></span><br><span class="line"><span class="number">9468</span>,  <span class="comment">// -21</span></span><br><span class="line"><span class="number">8977</span>,  <span class="comment">// -20</span></span><br><span class="line"><span class="number">8513</span>,  <span class="comment">// -19</span></span><br><span class="line"><span class="number">8075</span>,  <span class="comment">// -18</span></span><br><span class="line"><span class="number">7660</span>,  <span class="comment">// -17</span></span><br><span class="line"><span class="number">7267</span>,  <span class="comment">// -16</span></span><br><span class="line"><span class="number">6896</span>,  <span class="comment">// -15</span></span><br><span class="line"><span class="number">6545</span>,  <span class="comment">// -14</span></span><br><span class="line"><span class="number">6212</span>,  <span class="comment">// -13</span></span><br><span class="line"><span class="number">5898</span>,  <span class="comment">// -12</span></span><br><span class="line"><span class="number">5601</span>,  <span class="comment">// -11</span></span><br><span class="line"><span class="number">5319</span>,  <span class="comment">// -10</span></span><br><span class="line"><span class="number">5053</span>,  <span class="comment">// -9</span></span><br><span class="line"><span class="number">4801</span>,  <span class="comment">// -8</span></span><br><span class="line"><span class="number">4562</span>,  <span class="comment">// -7</span></span><br><span class="line"><span class="number">4336</span>,  <span class="comment">// -6</span></span><br><span class="line"><span class="number">4122</span>,  <span class="comment">// -5</span></span><br><span class="line"><span class="number">3920</span>,  <span class="comment">// -4</span></span><br><span class="line"><span class="number">3728</span>,  <span class="comment">// -3</span></span><br><span class="line"><span class="number">3546</span>,  <span class="comment">// -2</span></span><br><span class="line"><span class="number">3374</span>,  <span class="comment">// -1</span></span><br><span class="line"><span class="number">3211</span>,  <span class="comment">// 0</span></span><br><span class="line"><span class="number">3057</span>,  <span class="comment">// 1</span></span><br><span class="line"><span class="number">2910</span>,  <span class="comment">// 2</span></span><br><span class="line"><span class="number">2771</span>,  <span class="comment">// 3</span></span><br><span class="line"><span class="number">2639</span>,  <span class="comment">// 4</span></span><br><span class="line"><span class="number">2515</span>,  <span class="comment">// 5</span></span><br><span class="line"><span class="number">2396</span>,  <span class="comment">// 6</span></span><br><span class="line"><span class="number">2284</span>,  <span class="comment">// 7</span></span><br><span class="line"><span class="number">2177</span>,  <span class="comment">// 8</span></span><br><span class="line"><span class="number">2076</span>,  <span class="comment">// 9</span></span><br><span class="line"><span class="number">1978</span>,  <span class="comment">// 10</span></span><br><span class="line"><span class="number">1889</span>,  <span class="comment">// 11</span></span><br><span class="line"><span class="number">1802</span>,  <span class="comment">// 12</span></span><br><span class="line"><span class="number">1720</span>,  <span class="comment">// 13</span></span><br><span class="line"><span class="number">1642</span>,  <span class="comment">// 14</span></span><br><span class="line"><span class="number">1568</span>,  <span class="comment">// 15</span></span><br><span class="line"><span class="number">1497</span>,  <span class="comment">// 16</span></span><br><span class="line"><span class="number">1430</span>,  <span class="comment">// 17</span></span><br><span class="line"><span class="number">1366</span>,  <span class="comment">// 18</span></span><br><span class="line"><span class="number">1306</span>,  <span class="comment">// 19</span></span><br><span class="line"><span class="number">1248</span>,  <span class="comment">// 20</span></span><br><span class="line"><span class="number">1193</span>,  <span class="comment">// 21</span></span><br><span class="line"><span class="number">1141</span>,  <span class="comment">// 22</span></span><br><span class="line"><span class="number">1092</span>,  <span class="comment">// 23</span></span><br><span class="line"><span class="number">1044</span>,  <span class="comment">// 24</span></span><br><span class="line"><span class="number">1000</span>,  <span class="comment">// 25</span></span><br><span class="line"><span class="number">957</span>,   <span class="comment">// 26</span></span><br><span class="line"><span class="number">916</span>,   <span class="comment">// 27</span></span><br><span class="line"><span class="number">877</span>,   <span class="comment">// 28</span></span><br><span class="line"><span class="number">840</span>,   <span class="comment">// 29</span></span><br><span class="line"><span class="number">805</span>,   <span class="comment">// 30</span></span><br><span class="line"><span class="number">771</span>,   <span class="comment">// 31</span></span><br><span class="line"><span class="number">739</span>,   <span class="comment">// 32</span></span><br><span class="line"><span class="number">709</span>,   <span class="comment">// 33</span></span><br><span class="line"><span class="number">679</span>,   <span class="comment">// 34</span></span><br><span class="line"><span class="number">652</span>,   <span class="comment">// 35</span></span><br><span class="line"><span class="number">625</span>,   <span class="comment">// 36</span></span><br><span class="line"><span class="number">600</span>,   <span class="comment">// 37</span></span><br><span class="line"><span class="number">576</span>,   <span class="comment">// 38</span></span><br><span class="line"><span class="number">552</span>,   <span class="comment">// 39</span></span><br><span class="line"><span class="number">530</span>,   <span class="comment">// 40</span></span><br><span class="line"><span class="number">509</span>,   <span class="comment">// 41</span></span><br><span class="line"><span class="number">489</span>,   <span class="comment">// 42</span></span><br><span class="line"><span class="number">470</span>,   <span class="comment">// 43</span></span><br><span class="line"><span class="number">452</span>,   <span class="comment">// 44</span></span><br><span class="line"><span class="number">434</span>,   <span class="comment">// 45</span></span><br><span class="line"><span class="number">417</span>,   <span class="comment">// 46</span></span><br><span class="line"><span class="number">401</span>,   <span class="comment">// 47</span></span><br><span class="line"><span class="number">386</span>,   <span class="comment">// 48</span></span><br><span class="line"><span class="number">371</span>,   <span class="comment">// 49</span></span><br><span class="line"><span class="number">358</span>,   <span class="comment">// 50</span></span><br><span class="line"><span class="number">344</span>,   <span class="comment">// 51</span></span><br><span class="line"><span class="number">331</span>,   <span class="comment">// 52</span></span><br><span class="line"><span class="number">318</span>,   <span class="comment">// 53</span></span><br><span class="line"><span class="number">306</span>,   <span class="comment">// 54</span></span><br><span class="line"><span class="number">295</span>,   <span class="comment">// 55</span></span><br><span class="line"><span class="number">284</span>,   <span class="comment">// 56</span></span><br><span class="line"><span class="number">274</span>,   <span class="comment">// 57</span></span><br><span class="line"><span class="number">264</span>,   <span class="comment">// 58</span></span><br><span class="line"><span class="number">254</span>,   <span class="comment">// 59</span></span><br><span class="line"><span class="number">245</span>,   <span class="comment">// 60</span></span><br><span class="line"><span class="number">236</span>,   <span class="comment">// 61</span></span><br><span class="line"><span class="number">228</span>,   <span class="comment">// 62</span></span><br><span class="line"><span class="number">220</span>,   <span class="comment">// 63</span></span><br><span class="line"><span class="number">212</span>,   <span class="comment">// 64</span></span><br><span class="line"><span class="number">205</span>,   <span class="comment">// 65</span></span><br><span class="line"><span class="number">198</span>,   <span class="comment">// 66</span></span><br><span class="line"><span class="number">191</span>,   <span class="comment">// 67</span></span><br><span class="line"><span class="number">184</span>,   <span class="comment">// 68</span></span><br><span class="line"><span class="number">178</span>,   <span class="comment">// 69</span></span><br><span class="line"><span class="number">172</span>,   <span class="comment">// 70</span></span><br><span class="line"><span class="number">166</span>,   <span class="comment">// 71</span></span><br><span class="line"><span class="number">160</span>,   <span class="comment">// 72</span></span><br><span class="line"><span class="number">155</span>,   <span class="comment">// 73</span></span><br><span class="line"><span class="number">150</span>,   <span class="comment">// 74</span></span><br><span class="line"><span class="number">145</span>,   <span class="comment">// 75</span></span><br><span class="line"><span class="number">140</span>,   <span class="comment">// 76</span></span><br><span class="line"><span class="number">135</span>,   <span class="comment">// 77</span></span><br><span class="line"><span class="number">131</span>,   <span class="comment">// 78</span></span><br><span class="line"><span class="number">126</span>,   <span class="comment">// 79</span></span><br><span class="line"><span class="number">122</span>,   <span class="comment">// 80</span></span><br><span class="line"><span class="number">118</span>,   <span class="comment">// 81</span></span><br><span class="line"><span class="number">115</span>,   <span class="comment">// 82</span></span><br><span class="line"><span class="number">111</span>,   <span class="comment">// 83</span></span><br><span class="line"><span class="number">107</span>,   <span class="comment">// 84</span></span><br><span class="line"><span class="number">104</span>,   <span class="comment">// 85</span></span><br><span class="line"><span class="number">101</span>,   <span class="comment">// 86</span></span><br><span class="line"><span class="number">97</span>,    <span class="comment">// 87</span></span><br><span class="line"><span class="number">94</span>,    <span class="comment">// 88</span></span><br><span class="line"><span class="number">91</span>,    <span class="comment">// 89</span></span><br><span class="line"><span class="number">89</span>,    <span class="comment">// 90</span></span><br><span class="line"><span class="number">86</span>,    <span class="comment">// 91</span></span><br><span class="line"><span class="number">83</span>,    <span class="comment">// 92</span></span><br><span class="line"><span class="number">81</span>,    <span class="comment">// 93</span></span><br><span class="line"><span class="number">78</span>,    <span class="comment">// 94</span></span><br><span class="line"><span class="number">76</span>,    <span class="comment">// 95</span></span><br><span class="line"><span class="number">74</span>,    <span class="comment">// 96</span></span><br><span class="line"><span class="number">71</span>,    <span class="comment">// 97</span></span><br><span class="line"><span class="number">69</span>,    <span class="comment">// 98</span></span><br><span class="line"><span class="number">67</span>,    <span class="comment">// 99</span></span><br><span class="line"><span class="number">65</span>,    <span class="comment">// 100</span></span><br><span class="line"><span class="number">63</span>,    <span class="comment">// 101</span></span><br><span class="line"><span class="number">61</span>,    <span class="comment">// 102</span></span><br><span class="line"><span class="number">60</span>,    <span class="comment">// 103</span></span><br><span class="line"><span class="number">58</span>,    <span class="comment">// 104</span></span><br><span class="line"><span class="number">56</span>,    <span class="comment">// 105</span></span><br><span class="line"><span class="number">55</span>,    <span class="comment">// 106</span></span><br><span class="line"><span class="number">53</span>,    <span class="comment">// 107</span></span><br><span class="line"><span class="number">52</span>,    <span class="comment">// 108</span></span><br><span class="line"><span class="number">50</span>,    <span class="comment">// 109</span></span><br><span class="line"><span class="number">49</span>,    <span class="comment">// 110</span></span><br><span class="line"><span class="number">47</span>,    <span class="comment">// 111</span></span><br><span class="line"><span class="number">46</span>,    <span class="comment">// 112</span></span><br><span class="line"><span class="number">45</span>,    <span class="comment">// 113</span></span><br><span class="line"><span class="number">43</span>,    <span class="comment">// 114</span></span><br><span class="line"><span class="number">42</span>,    <span class="comment">// 115</span></span><br><span class="line"><span class="number">41</span>,    <span class="comment">// 116</span></span><br><span class="line"><span class="number">40</span>,    <span class="comment">// 117</span></span><br><span class="line"><span class="number">39</span>,    <span class="comment">// 118</span></span><br><span class="line"><span class="number">38</span>,    <span class="comment">// 119</span></span><br><span class="line"><span class="number">37</span>,    <span class="comment">// 120</span></span><br><span class="line"><span class="number">36</span>,    <span class="comment">// 121</span></span><br><span class="line"><span class="number">35</span>,    <span class="comment">// 122</span></span><br><span class="line"><span class="number">34</span>,    <span class="comment">// 123</span></span><br><span class="line"><span class="number">33</span>,    <span class="comment">// 124</span></span><br><span class="line"><span class="number">32</span>,    <span class="comment">// 125</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;NTC.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ADC.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    GPIO_InitTypeDefGPIO_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">    GPIO_InitStructure.Pin  = NTC_GPIO_PIN;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">    GPIO_InitStructure.Mode = GPIO_HighZ;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">    GPIO_Inilize(NTC_GPIO, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ADC_config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ADC_InitTypeDefADC_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">    ADC_InitStructure.ADC_SMPduty   = <span class="number">31</span>;<span class="comment">//ADC 模拟信号采样时间控制, 0~31（注意： SMPDUTY 一定不能设置小于 10）</span></span><br><span class="line">    ADC_InitStructure.ADC_CsSetup   = <span class="number">0</span>;<span class="comment">//ADC 通道 选择时间控制 0(默认),1</span></span><br><span class="line">    ADC_InitStructure.ADC_CsHold    = <span class="number">1</span>;<span class="comment">//ADC 通道 选择保持时间控制 0,1(默认),2,3</span></span><br><span class="line">    ADC_InitStructure.ADC_Speed     = ADC_SPEED_2X1T;<span class="comment">//设置 ADC 工作时钟频率ADC_SPEED_2X1T~ADC_SPEED_2X16T</span></span><br><span class="line">    ADC_InitStructure.ADC_Power     = ENABLE;<span class="comment">//ADC功率允许/关闭ENABLE,DISABLE</span></span><br><span class="line">    ADC_InitStructure.ADC_AdjResult = ADC_RIGHT_JUSTIFIED;<span class="comment">//ADC结果调整,ADC_LEFT_JUSTIFIED,ADC_RIGHT_JUSTIFIED</span></span><br><span class="line">    ADC_InitStructure.ADC_Priority    = Priority_0;<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">    ADC_InitStructure.ADC_Interrupt = DISABLE;<span class="comment">//中断允许ENABLE,DISABLE</span></span><br><span class="line">    ADC_Inilize(&amp;ADC_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">    ADC_PowerControl(ENABLE);<span class="comment">//单独的ADC电源操作函数, ENABLE或DISABLE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化NTC</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTC_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    GPIO_config();</span><br><span class="line">    ADC_config();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">search_temp</span><span class="params">(<span class="keyword">float</span> rst_Rx10)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, min_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算数组长度</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(temp_table) / <span class="keyword">sizeof</span>(u16);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录最小差值 </span></span><br><span class="line"><span class="keyword">float</span> min_diff = <span class="built_in">abs</span>(rst_Rx10 - temp_table[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line"><span class="comment">// 计算数组里每一个阻值和rst_Rx10的差值</span></span><br><span class="line"><span class="keyword">float</span> diff = <span class="built_in">abs</span>(rst_Rx10 - temp_table[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到差值最小元素对应的索引i</span></span><br><span class="line"><span class="keyword">if</span>(diff &lt; min_diff)&#123;</span><br><span class="line"><span class="comment">// 如果有更小的差值，赋值</span></span><br><span class="line">min_diff = diff;</span><br><span class="line">min_index = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;len: %d R: %.2f min_diff: %.2f min_index: %d \n&quot;</span>, len, rst_Rx10, min_diff, min_index);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取温度值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NTC_get_temperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    u16 adc_value;</span><br><span class="line">    <span class="keyword">float</span> rst_V;</span><br><span class="line">    <span class="keyword">float</span> rst_R;</span><br><span class="line">    <span class="keyword">int</span> rst_T;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取对应的ADC值</span></span><br><span class="line">    adc_value = Get_ADCResult(NTC_ACD_CH);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// adc_value返回的值范围 0 -&gt; 4096</span></span><br><span class="line">    <span class="comment">// 等同于P05引脚的电压值和Vref的占比  1024</span></span><br><span class="line">    <span class="comment">// X = ADC_V  * Vref / 4096</span></span><br><span class="line">    <span class="comment">// 计算电压</span></span><br><span class="line">    rst_V = adc_value * <span class="number">2.5</span> / <span class="number">4096</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算电阻值</span></span><br><span class="line">    rst_R = rst_V * <span class="number">10</span> / (<span class="number">3.3</span> - rst_V);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9.36KΩ 将阻值兑换成温度</span></span><br><span class="line">    rst_T = search_temp(rst_R * <span class="number">100</span>) - <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ADC: %d voltage: %.2f R = %.2f T = %d℃ \n&quot;</span>, adc_value, rst_V, rst_R, (<span class="keyword">int</span>)rst_T);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> rst_T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>电位器案例(ADC)</title>
    <link href="https://wander-m.github.io/%E7%94%B5%E4%BD%8D%E5%99%A8%E6%A1%88%E4%BE%8B(ADC)"/>
    <id>https://wander-m.github.io/%E7%94%B5%E4%BD%8D%E5%99%A8%E6%A1%88%E4%BE%8B(ADC)</id>
    <published>2023-07-14T02:48:37.909Z</published>
    <updated>2023-07-14T05:43:55.936Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="电位器案例adc"><a class="markdownIt-Anchor" href="#电位器案例adc"></a> 电位器案例(ADC)</h1><p>学习目标</p><p>1理解模数转换器（ADC）的基本原理和应用场景；</p><p>2掌握STC8H中ADC模块的结构和工作原理；</p><p>3学会使用STC8H的ADC的电路设计；</p><p>4掌握通过编程获取ADC数据</p><p>5学会基本的调试策略</p><p>学习内容</p><p>案例介绍</p><p>通过控制滑动变阻器，来观察电压变化。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1688957866606-cc508d2d-7930-4b67-a131-f9e40782d1f7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_26%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p><p>1通过万用表测量 P0.5位置的电压</p><p>2通过代码读取出 P0.5位置的电压</p><p>万用表测量</p><p>1调整万用表到电压测量位</p><p>2正极接P0.5</p><p>3负极接GND</p><p>4读取值</p><p>ADC概念</p><p>ADC(Analog to Digital Converter 模数转换器）是一种将模拟信号转换为数字信号的电路。在电子系统中，模拟信号常常需要转换为数字信号进行处理和存储。模数转换的基本原理是将模拟信号进行采样，并将采样值量化为数字表示。</p><p>●采样：是指在一定时间间隔内对模拟信号进行测量，并将测量值存储在数字形式的数据中</p><p>●量化：是将这些连续的模拟信号值离散化为一系列数字值，通常使用二进制表示。</p><p>简单理解，ADC是把模拟信号转换为数字信号的工具，我们可以认为，一个信号有强弱之分，强弱的体现为电压的高低。在数字电路中，只有0和1之分，也就是高电平或低电平。那么体现不了这个强弱。ADC的作用就是体现强弱，精确化的拿到具体的值。</p><p>应用场景：</p><p>1医疗设备：如心电图、血压计之类。</p><p>2音频信号处理：在数字音频处理中，ADC将模拟音频信号转换为数字信号，然后可以进行数字信号处理和存储。</p><p>3电力系统：测量电压。</p><p>总之，需要知道信号强弱的，需要将模拟信号转为数字信号的都会用到ADC。</p><p>STC8H芯片有15个通道的ADC功能引脚：</p><table><thead><tr><th>ADC功能</th><th>引脚</th></tr></thead><tbody><tr><td>ADC0</td><td>P1.0</td></tr><tr><td>ADC1</td><td>P1.1</td></tr><tr><td>ADC2</td><td>P5.4</td></tr><tr><td>ADC3</td><td>P1.3</td></tr><tr><td>ADC4</td><td>P1.4</td></tr><tr><td>ADC5</td><td>P1.5</td></tr><tr><td>ADC6</td><td>P1.6</td></tr><tr><td>ADC7</td><td>P1.7</td></tr><tr><td>ADC8</td><td>P0.0</td></tr><tr><td>ADC9</td><td>P0.1</td></tr><tr><td>ADC10</td><td>P0.2</td></tr><tr><td>ADC11</td><td>P0.3</td></tr><tr><td>ADC12</td><td>P0.4</td></tr><tr><td>ADC13</td><td>P0.5</td></tr><tr><td>ADC14</td><td>P0.6</td></tr></tbody></table><p>代码实现</p><p>IO初始化为高阻输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    GPIO_InitTypeDefGPIO_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">    GPIO_InitStructure.Pin  = GPIO_Pin_5;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">    GPIO_InitStructure.Mode = GPIO_HighZ;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">    GPIO_Inilize(GPIO_P0, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ADC配置逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ADC_config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ADC_InitTypeDefADC_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">ADC_InitStructure.ADC_SMPduty   = <span class="number">31</span>;<span class="comment">//ADC 模拟信号采样时间控制, 0~31（注意： SMPDUTY 一定不能设置小于 10）</span></span><br><span class="line">ADC_InitStructure.ADC_CsSetup   = <span class="number">0</span>;<span class="comment">//ADC 通道选择时间控制 0(默认),1</span></span><br><span class="line">ADC_InitStructure.ADC_CsHold    = <span class="number">1</span>;<span class="comment">//ADC 通道选择保持时间控制 0,1(默认),2,3</span></span><br><span class="line">ADC_InitStructure.ADC_Speed     = ADC_SPEED_2X1T;<span class="comment">//设置 ADC 工作时钟频率ADC_SPEED_2X1T~ADC_SPEED_2X16T</span></span><br><span class="line">ADC_InitStructure.ADC_Power     = ENABLE;<span class="comment">//ADC功率允许/关闭ENABLE,DISABLE</span></span><br><span class="line">ADC_InitStructure.ADC_AdjResult = ADC_RIGHT_JUSTIFIED;<span class="comment">//ADC结果调整,ADC_LEFT_JUSTIFIED,ADC_RIGHT_JUSTIFIED</span></span><br><span class="line">ADC_InitStructure.ADC_Priority    = Priority_0;<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">ADC_InitStructure.ADC_Interrupt = DISABLE;<span class="comment">//中断允许ENABLE,DISABLE</span></span><br><span class="line">ADC_Inilize(&amp;ADC_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">ADC_PowerControl(ENABLE);<span class="comment">//单独的ADC电源操作函数, ENABLE或DISABLE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据读取与转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = Get_ADCResult(ADC_CH13);</span><br><span class="line">v = result * <span class="number">2.5</span> / <span class="number">4096</span>;</span><br></pre></td></tr></table></figure><p>芯片基准电压，参考ADC_VRef+引脚，此引脚设计如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1688957505145-af853232-8b4e-42dd-9bb5-22912b76ab95.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png" /></p><p>ADC为12位精度的，意思是最大值是2的12次方，值为4096.</p><p>ADC的这个最大值，表示的是最大测量范围：</p><p>1数值最大为4096</p><p>2测量的电压值不能超过基准电压</p><p>3基准电压对应的值为4096</p><p>记住：我们用4096表示基准电压。</p><p>以上原理图中，基准电压由 VREF电压决定。这个电路中用到了一个芯片CJ431/CD431，这是一款电压基准芯片，会恒定的输出2.5V电压。</p><p>在我们的设计方案中，理论上可以不使用这个电压基准芯片的，直接连接3V3，但是LDO的输出稳定性不够，因此使用电压基准芯片会更为准确。</p><p>由以上我们可以得出：</p><p>1基准电压为：2.5V</p><p>2基准电压对应的数值是4096</p><p>3测量的值为ADC引脚</p><p>4电压值的计算：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">电</mi><mi mathvariant="normal">压</mi><mi mathvariant="normal">值</mi><mo>=</mo><mi mathvariant="normal">测</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">值</mi><mi mathvariant="normal">∗</mi><mi mathvariant="normal">基</mi><mi mathvariant="normal">准</mi><mi mathvariant="normal">电</mi><mi mathvariant="normal">压</mi><mi mathvariant="normal">/</mi><mn>4096</mn></mrow><annotation encoding="application/x-tex">电压值=测量值∗基准电压/4096</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">电</span><span class="mord cjk_fallback">压</span><span class="mord cjk_fallback">值</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">测</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">值</span><span class="mord">∗</span><span class="mord cjk_fallback">基</span><span class="mord cjk_fallback">准</span><span class="mord cjk_fallback">电</span><span class="mord cjk_fallback">压</span><span class="mord">/</span><span class="mord">4</span><span class="mord">0</span><span class="mord">9</span><span class="mord">6</span></span></span></span></p><p>练习题</p><p>1实现ADC测量电压</p><p>2思考ADC电路设计中是否存在问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>震动马达PWM</title>
    <link href="https://wander-m.github.io/%E9%9C%87%E5%8A%A8%E9%A9%AC%E8%BE%BEPWM"/>
    <id>https://wander-m.github.io/%E9%9C%87%E5%8A%A8%E9%A9%AC%E8%BE%BEPWM</id>
    <published>2023-07-14T02:39:41.003Z</published>
    <updated>2023-07-14T05:43:24.832Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="震动马达pwm"><a class="markdownIt-Anchor" href="#震动马达pwm"></a> 震动马达PWM</h1><p>学习目标</p><p>1学习如何在STC8H上配置PWMB</p><p>2掌握PWMB的各个配置</p><p>3学习如何使用PWMB控制震动马达</p><p>4掌握调试PWM的方法</p><p>学习内容</p><p>PWMB的应用</p><p>实现不同占空比下的震动的效果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;PWM.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;UART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PERIOD(MAIN_Fosc / 1000)</span></span><br><span class="line"></span><br><span class="line">PWMx_Duty PWMB_Duty;</span><br><span class="line">u8 duty = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">GPIO_InitTypeDefGPIO_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">GPIO_InitStructure.Pin  = GPIO_Pin_1;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">GPIO_InitStructure.Mode = GPIO_OUT_PP;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">GPIO_Inilize(GPIO_P0, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span><span class="title">PWM_config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PWMx_InitDefinePWMx_InitStructure;</span><br><span class="line"></span><br><span class="line">PWMx_InitStructure.PWM_Period   = PERIOD  - <span class="number">1</span>;<span class="comment">//周期时间,   0~65535</span></span><br><span class="line">PWMx_InitStructure.PWM_DeadTime = <span class="number">0</span>;<span class="comment">//死区发生器设置, 0~255</span></span><br><span class="line">PWMx_InitStructure.PWM_EnoSelect= ENO6P;<span class="comment">//输出通道选择,ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P</span></span><br><span class="line"></span><br><span class="line">PWMx_InitStructure.PWM6_Mode    =CCMRn_PWM_MODE1;<span class="comment">//模式,CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2</span></span><br><span class="line">PWMx_InitStructure.PWM6_Duty    = PWMB_Duty.PWM6_Duty;<span class="comment">//PWM4占空比时间, 0~Period</span></span><br><span class="line"></span><br><span class="line">PWMx_InitStructure.PWM_PS_SW    =PWM6_SW_P01;<span class="comment">//切换端口</span></span><br><span class="line"></span><br><span class="line">PWMx_InitStructure.PWM_CC6Enable   = ENABLE;<span class="comment">//开启PWM6输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line"></span><br><span class="line">PWMx_InitStructure.PWM_MainOutEnable= ENABLE;<span class="comment">//主输出使能, ENABLE,DISABLE</span></span><br><span class="line">PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;<span class="comment">//使能计数器, ENABLE,DISABLE</span></span><br><span class="line">PWM_Configuration(PWMB, &amp;PWMx_InitStructure);<span class="comment">//初始化PWM,  PWMA,PWMB</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_config</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">COMx_InitDefineCOMx_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;<span class="comment">//模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit_BRTx</span></span><br><span class="line">COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;<span class="comment">//选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使用BRT_Timer2)</span></span><br><span class="line">COMx_InitStructure.UART_BaudRate  = <span class="number">115200ul</span>;<span class="comment">//波特率, 一般 110 ~ 115200</span></span><br><span class="line">COMx_InitStructure.UART_RxEnable  = ENABLE;<span class="comment">//接收允许,   ENABLE或DISABLE</span></span><br><span class="line">COMx_InitStructure.BaudRateDouble = DISABLE;<span class="comment">//波特率加倍, ENABLE或DISABLE</span></span><br><span class="line">COMx_InitStructure.UART_Interrupt = ENABLE;<span class="comment">//中断允许,   ENABLE或DISABLE</span></span><br><span class="line">COMx_InitStructure.UART_Priority    = Priority_0;<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31;<span class="comment">//切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44</span></span><br><span class="line">UART_Configuration(UART1, &amp;COMx_InitStructure);<span class="comment">//初始化串口1 UART1,UART2,UART3,UART4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">u8 i;</span><br><span class="line">UART_config();</span><br><span class="line">GPIO_config();</span><br><span class="line">PWM_config();</span><br><span class="line"></span><br><span class="line">EA = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">PWMB_Duty.PWM6_Duty = PERIOD * duty / <span class="number">100</span>;</span><br><span class="line">UpdatePwm(PWMB, &amp;PWMB_Duty);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(COM1.RX_TimeOut &gt; <span class="number">0</span>)<span class="comment">//超时计数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(--COM1.RX_TimeOut == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(COM1.RX_Cnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;COM1.RX_Cnt; i++) &#123;</span><br><span class="line"><span class="comment">// RX1_Buffer[i]接收的字节</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>业务逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(RX1_Buffer[i] == <span class="number">0x01</span>) &#123;</span><br><span class="line"><span class="comment">// 增加</span></span><br><span class="line"><span class="keyword">if</span>(duty &lt; <span class="number">100</span>) &#123;</span><br><span class="line">duty++;</span><br><span class="line">&#125;</span><br><span class="line">TX1_write2buff(duty);</span><br><span class="line">PWMB_Duty.PWM6_Duty = PERIOD * duty / <span class="number">100</span>;</span><br><span class="line">UpdatePwm(PWMB, &amp;PWMB_Duty);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(RX1_Buffer[i] == <span class="number">0x02</span>) &#123;</span><br><span class="line"><span class="comment">// 减少</span></span><br><span class="line"><span class="keyword">if</span>(duty &gt; <span class="number">0</span>) &#123;</span><br><span class="line">duty--;</span><br><span class="line">&#125;</span><br><span class="line">TX1_write2buff(duty);</span><br><span class="line">PWMB_Duty.PWM6_Duty = PERIOD * duty / <span class="number">100</span>;</span><br><span class="line">UpdatePwm(PWMB, &amp;PWMB_Duty);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">COM1.RX_Cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习题</p><p>1实现马达震动。</p><p>2分析电动牙刷从原理图到编码实现过程中的环节。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>震动马达</title>
    <link href="https://wander-m.github.io/%E9%9C%87%E5%8A%A8%E9%A9%AC%E8%BE%BE"/>
    <id>https://wander-m.github.io/%E9%9C%87%E5%8A%A8%E9%A9%AC%E8%BE%BE</id>
    <published>2023-07-14T02:38:23.340Z</published>
    <updated>2023-07-14T05:43:03.614Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="震动马达"><a class="markdownIt-Anchor" href="#震动马达"></a> 震动马达</h1><p>学习目标</p><p>1控制马达震动</p><p>学习内容</p><p>原理图</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679398392241-4b7f4389-1adc-4eea-a43e-9fc4f0a336da.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_25%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="57.png" /></p><p>控制分析</p><p>S8050 NPN三极管特性</p><p>NPN型三极管的工作原理是基于PN结和PNP型晶体管的工作原理。</p><p>当外加正向电压时，发射区的P型半导体被注入少量的N型载流子（电子），这些电子被加速并向基区移动。在基区，电子与空穴结合，从而减少了空穴的浓度。当基区浓度低于发射区浓度时，电子会进一步扩散到集电区，导致集电区产生电流。</p><p>当外加反向电压时，PN结会被反向偏置。此时，电子和空穴被吸引到PN结中心，从而阻止了电流的流动。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679399750823-1cc6cbc0-be41-42fc-86a9-78cc127026b2.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_16%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="58.png" /></p><p>B: base,  基极。（理解：基于/根据 这个条件做什么事情）</p><p>E: emitter, 发射极。（理解：发射端，入口）</p><p>C: collector, 集电极。（理解：收集电的区域，用电的器件在这个区域）</p><p>NPN型三极管，C极为输入端，E极为输出端，B极为控制端</p><p>B极 为高电平时，E极到C极的电路截止，正常导通。</p><p>B极 为低电平时，E极到C极的电路打开，无法导通。</p><p>震动控制</p><p>通过P0.1引脚控制马达震动。</p><p>功能设计</p><p>实现震动马达的震动。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOTOR P01</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">GPIO_InitTypeDefGPIO_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">GPIO_InitStructure.Pin  = GPIO_Pin_1;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">GPIO_InitStructure.Mode = GPIO_OUT_PP;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">GPIO_Inilize(GPIO_P0, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">GPIO_config();</span><br><span class="line"></span><br><span class="line">EA = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">MOTOR = <span class="number">1</span>;</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">MOTOR = <span class="number">0</span>;</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现的是1秒钟控制一次马达震动。</p><p>练习题</p><p>1实现震动马达震动</p><p>2通过串口控制马达的震动和停止</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LED呼吸灯(PWM)</title>
    <link href="https://wander-m.github.io/LED%E5%91%BC%E5%90%B8%E7%81%AF(PWM)"/>
    <id>https://wander-m.github.io/LED%E5%91%BC%E5%90%B8%E7%81%AF(PWM)</id>
    <published>2023-07-14T02:36:31.482Z</published>
    <updated>2023-07-14T05:42:43.072Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="led呼吸灯pwm"><a class="markdownIt-Anchor" href="#led呼吸灯pwm"></a> LED呼吸灯(PWM)</h1><p>学习目标</p><p>1了解PWM基础概念和工作原理</p><p>2学习如何在STC8H上配置PWMA</p><p>3掌握PWMA的各个配置</p><p>4学习如何使用PWMA控制LED亮度</p><p>5掌握调试PWM的方法</p><p>学习内容</p><p>PWM基础概念</p><p>PWM全称是脉宽调制（Pulse Width Modulation），是一种通过改变信号的脉冲宽度来控制电路输出的技术。PWM技术在工业自动化、电机控制、LED调光等领域广泛应用。</p><p>PWM是一种将数字信号转换为模拟信号的技术，它通过改变信号的占空比来控制输出的电平。在STC8H中，PWM输出的频率和占空比可以由程序控制，因此可以用来控制各种电机、灯光和其他设备的亮度、速度等参数。</p><p>STC8H芯片</p><p>STC8H 系列的单片机内部集成了8 通道 16 位高级PWM 定时器，分成两周期可不同的 PWM，分别命名为 PWMA 和PWMB ，可分别单独设置。</p><p>第一组 PWMA 可配置成4 组互补/对称/死区控制的PWM 或捕捉外部信号。</p><p>第二组 PWMB 可配置成4 路PWM 输出或捕捉外部信号。</p><p>两组 PWM 的时钟频率可分别独立设置。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1670377764709-be571a2a-e358-486a-934a-6450bee9e4cd.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_31%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="微信截图_20221207094909.png" /></p><p>PWM与引脚对应关系如下图：</p><table><thead><tr><th>PWM</th><th>PWM通道</th><th>对应引脚</th><th></th></tr></thead><tbody><tr><td></td><td></td><td>PWMxP</td><td>PWMxN</td></tr><tr><td>PWMA</td><td>PWM1P &amp; PWM1N</td><td>P1.0</td><td>P1.1</td></tr><tr><td>P2.0</td><td>P2.1</td><td></td><td></td></tr><tr><td>PWM2P &amp; PWM2N</td><td>P5.4</td><td>P1.3</td><td></td></tr><tr><td>P2.2</td><td>P2.3</td><td></td><td></td></tr><tr><td>PWM3P &amp; PWM3N</td><td>P1.4</td><td>P1.5</td><td></td></tr><tr><td>P2.4</td><td>P2.5</td><td></td><td></td></tr><tr><td>PWM4P &amp; PWM4N</td><td>P1.6</td><td>P1.7</td><td></td></tr><tr><td>P2.6</td><td>P2.7</td><td></td><td></td></tr><tr><td>P3.4</td><td>P3.3</td><td></td><td></td></tr><tr><td>PWMB</td><td>PWM5</td><td>P0.0</td><td></td></tr><tr><td>P1.7</td><td></td><td></td><td></td></tr><tr><td>P2.0</td><td></td><td></td><td></td></tr><tr><td>PWM6</td><td>P0.1</td><td></td><td></td></tr><tr><td>P2.1</td><td></td><td></td><td></td></tr><tr><td>P5.4</td><td></td><td></td><td></td></tr><tr><td>PWM7</td><td>P0.2</td><td></td><td></td></tr><tr><td>P2.2</td><td></td><td></td><td></td></tr><tr><td>P3.3</td><td></td><td></td><td></td></tr><tr><td>PWM8</td><td>P0.3</td><td></td><td></td></tr><tr><td>P2.3</td><td></td><td></td><td></td></tr><tr><td>P3.4</td><td></td><td></td><td></td></tr></tbody></table><p>PWMA应用</p><p>控制引脚P2.7实现LED灯1的呼吸效果。</p><p>1配置PWM</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">LED呼吸灯(PWM)</span><br><span class="line">学习目标</span><br><span class="line">了解PWM基础概念和工作原理</span><br><span class="line">学习如何在STC8H上配置PWMA</span><br><span class="line">掌握PWMA的各个配置</span><br><span class="line">学习如何使用PWMA控制LED亮度</span><br><span class="line">掌握调试PWM的方法</span><br><span class="line">学习内容</span><br><span class="line">PWM基础概念</span><br><span class="line">PWM全称是脉宽调制（Pulse Width Modulation），是一种通过改变信号的脉冲宽度来控制电路输出的技术。PWM技术在工业自动化、电机控制、LED调光等领域广泛应用。</span><br><span class="line">PWM是一种将数字信号转换为模拟信号的技术，它通过改变信号的占空比来控制输出的电平。在STC8H中，PWM输出的频率和占空比可以由程序控制，因此可以用来控制各种电机、灯光和其他设备的亮度、速度等参数。</span><br><span class="line">STC8H芯片</span><br><span class="line">STC8H 系列的单片机内部集成了<span class="number">8</span> 通道 <span class="number">16</span> 位高级PWM 定时器，分成两周期可不同的 PWM，分别命名为 PWMA 和PWMB ，可分别单独设置。</span><br><span class="line">第一组 PWMA 可配置成<span class="number">4</span> 组互补/对称/死区控制的PWM 或捕捉外部信号。</span><br><span class="line">第二组 PWMB 可配置成<span class="number">4</span> 路PWM 输出或捕捉外部信号。</span><br><span class="line">两组 PWM 的时钟频率可分别独立设置。</span><br><span class="line">PWM与引脚对应关系如下图：</span><br><span class="line">PWM</span><br><span class="line">PWM通道</span><br><span class="line">对应引脚</span><br><span class="line">PWMxP</span><br><span class="line">PWMxN</span><br><span class="line">PWMA</span><br><span class="line">PWM1P &amp; PWM1N</span><br><span class="line">P1<span class="number">.0</span></span><br><span class="line">P1<span class="number">.1</span></span><br><span class="line">P2<span class="number">.0</span></span><br><span class="line">P2<span class="number">.1</span></span><br><span class="line">PWM2P &amp; PWM2N</span><br><span class="line">P5<span class="number">.4</span></span><br><span class="line">P1<span class="number">.3</span></span><br><span class="line">P2<span class="number">.2</span></span><br><span class="line">P2<span class="number">.3</span></span><br><span class="line">PWM3P &amp; PWM3N</span><br><span class="line">P1<span class="number">.4</span></span><br><span class="line">P1<span class="number">.5</span></span><br><span class="line">P2<span class="number">.4</span></span><br><span class="line">P2<span class="number">.5</span></span><br><span class="line">PWM4P &amp; PWM4N</span><br><span class="line">P1<span class="number">.6</span></span><br><span class="line">P1<span class="number">.7</span></span><br><span class="line">P2<span class="number">.6</span></span><br><span class="line">P2<span class="number">.7</span></span><br><span class="line">P3<span class="number">.4</span></span><br><span class="line">P3<span class="number">.3</span></span><br><span class="line">PWMB</span><br><span class="line">PWM5</span><br><span class="line">P0<span class="number">.0</span></span><br><span class="line">P1<span class="number">.7</span></span><br><span class="line">P2<span class="number">.0</span></span><br><span class="line">PWM6</span><br><span class="line">P0<span class="number">.1</span></span><br><span class="line">P2<span class="number">.1</span></span><br><span class="line">P5<span class="number">.4</span></span><br><span class="line">PWM7</span><br><span class="line">P0<span class="number">.2</span></span><br><span class="line">P2<span class="number">.2</span></span><br><span class="line">P3<span class="number">.3</span></span><br><span class="line">PWM8</span><br><span class="line">P0<span class="number">.3</span></span><br><span class="line">P2<span class="number">.3</span></span><br><span class="line">P3<span class="number">.4</span></span><br><span class="line">PWMA应用</span><br><span class="line">控制引脚P2<span class="number">.7</span>实现LED灯<span class="number">1</span>的呼吸效果。</span><br><span class="line">配置PWM</span><br><span class="line">动态更新占空比</span><br><span class="line">PWM配置理解</span><br><span class="line">周期</span><br><span class="line">系统主频：<span class="number">1</span>秒钟计数多少次。</span><br><span class="line">代码中的PWM周期(PWM Period)，指的是按N等份切分<span class="number">1</span>秒钟，每个等份的计数值。</span><br><span class="line">例如上图，我们按照<span class="number">8</span>等份切分<span class="number">1</span>秒钟的总计数值MAIN_Fosc（主频），每个PWM周期的计数值为：</span><br><span class="line">PWM_Period = MAIN_Fosc / <span class="number">8</span> = <span class="number">24</span>M / <span class="number">8</span> = <span class="number">3</span>M = <span class="number">3</span> <span class="number">000</span> <span class="number">000</span> 单位为次。</span><br><span class="line">即如果将这个<span class="number">3</span>M作为Period参数，可以得到PWM方波每个周期的时长为：</span><br><span class="line"><span class="number">1</span> / <span class="number">8</span> = <span class="number">0.125</span>s</span><br><span class="line">代码中的配置：</span><br><span class="line">配置的是周期中的计数值。</span><br><span class="line">我们的理解策略：通常我们不关心计数值，关心的是<span class="number">1</span>秒钟执行多少次（即频率Hz），也就是一秒钟多少个周期。</span><br><span class="line">因此在代码MAIN_Fosc / <span class="number">1000</span>中的<span class="number">1000</span>表示的是<span class="number">1</span>秒钟多少个周期（即频率Hz）。</span><br><span class="line">MAIN_Fosc / <span class="number">1000</span>表示的是每个周期的计数值。那为什么要<span class="number">-1</span>呢？因为计数器是从<span class="number">0</span>开始计数的。</span><br><span class="line">占空比</span><br><span class="line">在一个PWM的周期计数中，高电平的计数时长百分比。</span><br><span class="line">模式</span><br><span class="line">冻结: CCMRn_FREEZE</span><br><span class="line">匹配时设置通道 n 的输出为有效电平: CCMRn_MATCH_VALID</span><br><span class="line">匹配时设置通道 n 的输出为无效电平: CCMRn_MATCH_INVALID</span><br><span class="line">翻转: CCMRn_ROLLOVER </span><br><span class="line">强制为无效电平:  CCMRn_FORCE_INVALID</span><br><span class="line">强制为有效电平:  CCMRn_FORCE_VALID</span><br><span class="line">PWM 模式 <span class="number">1</span>: CCMRn_PWM_MODE1</span><br><span class="line">PWM 模式 <span class="number">2</span>: CCMRn_PWM_MODE2 </span><br><span class="line">常用的为PWM 模式 <span class="number">1</span>PWM 模式 <span class="number">2</span></span><br><span class="line">PWM 模式 <span class="number">1</span>和PWM 模式 <span class="number">2</span>是反向的，一个占空比越大越亮，一个是越小越亮。</span><br><span class="line">引脚配置</span><br><span class="line">C</span><br><span class="line">复制代码</span><br><span class="line"><span class="number">1</span></span><br><span class="line">PWMx_InitStructure.PWM_PS_SW    =PWM4_SW_P26_P27;<span class="comment">//切换端口</span></span><br><span class="line">配置PWM输出的引脚.</span><br><span class="line">C</span><br><span class="line">复制代码</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">PWMx_InitStructure.PWM_CC4Enable   = ENABLE;<span class="comment">//开启PWM4P输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line">PWMx_InitStructure.PWM_CC4NEnable  = ENABLE;<span class="comment">//开启PWM4N输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line">配置PWMA的某个通道输出。PWA是具有互补功能的，所以可以配置两个。PWMB则能配置互补。</span><br><span class="line">使能PWM</span><br><span class="line">C</span><br><span class="line">复制代码</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">PWMx_InitStructure.PWM_MainOutEnable= ENABLE;<span class="comment">//主输出使能, ENABLE,DISABLE</span></span><br><span class="line">PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;<span class="comment">//使能计数器, ENABLE,DISABLE</span></span><br><span class="line">使能配置成功后，pwm才能工作。</span><br><span class="line">如果运行中pwm想停止掉，也可以通过配置使能来停止。</span><br><span class="line">练习题</span><br><span class="line">使用PWMA实现<span class="number">8</span>路呼吸灯</span><br><span class="line">串口控制灯的明暗程度</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2动态更新占空比</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PWMA_Duty.PWM4_Duty = (MAIN_Fosc / <span class="number">1000</span> - <span class="number">1</span>) * <span class="number">10</span> / <span class="number">100</span>; <span class="comment">// 占空比为 10 / 100 = 0.1</span></span><br><span class="line">UpdatePwm(PWMA, &amp;PWMA_Duty);</span><br></pre></td></tr></table></figure><p>PWM配置理解</p><p>周期</p><p>系统主频：1秒钟计数多少次。</p><p>代码中的PWM周期(PWM Period)，指的是按N等份切分1秒钟，每个等份的计数值。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679389225162-842d3b09-27f5-474b-a07b-3a4d4310461a.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_68%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="55.png" /></p><p>例如上图，我们按照8等份切分1秒钟的总计数值MAIN_Fosc（主频），每个PWM周期的计数值为：</p><p>PWM_Period = MAIN_Fosc / 8 = 24M / 8 = 3M = 3 000 000 单位为次。</p><p>即如果将这个3M作为Period参数，可以得到PWM方波每个周期的时长为：</p><p>1 / 8 = 0.125s</p><p>代码中的配置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PWMx_InitStructure.PWM_Period   = MAIN_Fosc / <span class="number">1000</span> - <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>配置的是周期中的计数值。</p><p>我们的理解策略：通常我们不关心计数值，关心的是1秒钟执行多少次（即频率Hz），也就是一秒钟多少个周期。</p><p>因此在代码MAIN_Fosc / 1000中的1000表示的是1秒钟多少个周期（即频率Hz）。</p><p>MAIN_Fosc / 1000表示的是每个周期的计数值。那为什么要-1呢？因为计数器是从0开始计数的。</p><p>占空比</p><p>在一个PWM的周期计数中，高电平的计数时长百分比。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679390018413-da5c37c4-083f-40fd-9132-e93ef62f7e2d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_23%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="56.png" /></p><p>模式</p><p>●冻结: CCMRn_FREEZE</p><p>●匹配时设置通道 n 的输出为有效电平: CCMRn_MATCH_VALID</p><p>●匹配时设置通道 n 的输出为无效电平: CCMRn_MATCH_INVALID</p><p>●翻转: CCMRn_ROLLOVER</p><p>●强制为无效电平:  CCMRn_FORCE_INVALID</p><p>●强制为有效电平:  CCMRn_FORCE_VALID</p><p>●PWM 模式 1: CCMRn_PWM_MODE1</p><p>●PWM 模式 2: CCMRn_PWM_MODE2</p><p>常用的为PWM 模式 1PWM 模式 2</p><p>PWM 模式 1和PWM 模式 2是反向的，一个占空比越大越亮，一个是越小越亮。</p><p>引脚配置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PWMx_InitStructure.PWM_PS_SW    =PWM4_SW_P26_P27;<span class="comment">//切换端口</span></span><br></pre></td></tr></table></figure><p>配置PWM输出的引脚.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PWMx_InitStructure.PWM_CC4Enable   = ENABLE;<span class="comment">//开启PWM4P输入捕获/比较输出,  ENABLE,DISABLE</span></span><br><span class="line">PWMx_InitStructure.PWM_CC4NEnable  = ENABLE;<span class="comment">//开启PWM4N输入捕获/比较输出,  ENABLE,DISABLE</span></span><br></pre></td></tr></table></figure><p>配置PWMA的某个通道输出。PWA是具有互补功能的，所以可以配置两个。PWMB则能配置互补。</p><p>使能PWM</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PWMx_InitStructure.PWM_MainOutEnable= ENABLE;<span class="comment">//主输出使能, ENABLE,DISABLE</span></span><br><span class="line">PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;<span class="comment">//使能计数器, ENABLE,DISABLE</span></span><br></pre></td></tr></table></figure><p>使能配置成功后，pwm才能工作。</p><p>如果运行中pwm想停止掉，也可以通过配置使能来停止。</p><p>练习题</p><p>1使用PWMA实现8路呼吸灯</p><p>2串口控制灯的明暗程度</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LED灯</title>
    <link href="https://wander-m.github.io/LED%E7%81%AF"/>
    <id>https://wander-m.github.io/LED%E7%81%AF</id>
    <published>2023-07-14T02:32:49.345Z</published>
    <updated>2023-07-14T05:42:15.984Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="led灯"><a class="markdownIt-Anchor" href="#led灯"></a> LED灯</h1><p>学习目标</p><p>1熟悉原理图设计</p><p>2熟悉对应引脚功能</p><p>3能够使用IO控制多个LED开关</p><p>4能够制作流水灯</p><p>学习内容</p><p>原理图</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681191278278-54e9f9d2-9aa6-4cda-8187-a0719ae3159d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="107.png" /></p><p>控制分析</p><p>S8550 PNP 特性</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1670375616121-950891db-72ee-44a0-b8e7-8150b03ef2be.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221207091323.png" /></p><p>B: base,  基极。（理解：基于/根据 这个条件做什么事情）</p><p>E: emitter, 发射极。（理解：发射端）</p><p>C: collector, 集电极。（理解：收集电的区域，用电的器件在这个区域）</p><p>PNP型三极管，E极为输入端，C极为输出端，B极为控制端</p><p>B极 为高电平时，E极到C极的电路截止，无法导通。</p><p>B极 为低电平时，E极到C极的电路打开，正常导通。</p><p>开关控制</p><p>通过引脚 LED_SW来控制 B极是否为高低电平来控制是否导通</p><p>LED控制</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2022/png/21441195/1670377563323-98c05996-a657-41db-b531-8b8a4ec483b5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="微信截图_20221207094546.png" /></p><p>通过LED的负极控制灯是否亮。如果负极为低则亮，负极为高则不亮。</p><p>功能设计</p><p>点亮LED</p><p>点亮灯泡1</p><p>几种GPIO模式</p><p>1准双向口，也称为弱上拉模式，可做输入和输出操作，电流小，通常作为信号功能使用</p><p>2推挽输出，也称为强上拉模式，作为输出操作，电流持续，作为功率输出</p><p>3开漏输出，可做输入和输出操作，需要外部提供上拉电阻</p><p>4高阻输入，电流无法输入，但是可以外部输入电平会拉高或拉低其位寄存器，用于数模转换</p><p>三极管特点</p><p>三极管是电流控制的器件，如果需要三极管导通或是关闭，需要持续给B极输入电流。（相对于mos管而言，三极管功耗较大，mos管耗电要少很多）</p><p>示例代码</p><p>点亮灯泡1代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span><span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDefGPIO_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">GPIO_InitStructure.Pin  = GPIO_Pin_7;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">GPIO_InitStructure.Mode = GPIO_PullUp;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">GPIO_Inilize(GPIO_P2,&amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.Pin  = GPIO_Pin_5;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">GPIO_InitStructure.Mode = GPIO_OUT_PP;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">GPIO_Inilize(GPIO_P4,&amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//GPIO 初始化</span></span><br><span class="line">GPIO_config();</span><br><span class="line"></span><br><span class="line"><span class="comment">// led 开关打开</span></span><br><span class="line">P45 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">P27 = <span class="number">1</span>;</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">P27 = <span class="number">0</span>;</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">delay_ms(<span class="number">250</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>走马灯</p><p>实现灯的顺序点亮</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED1P27</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED2P26</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED3P15</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED4P14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED5P23</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED6P22</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED7P21</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED8P20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_SWP45</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">GPIO_InitTypeDefGPIO_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">GPIO_InitStructure.Pin  = GPIO_Pin_5;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">GPIO_InitStructure.Mode = GPIO_OUT_PP;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">GPIO_Inilize(GPIO_P4, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.Pin  = GPIO_Pin_4 | GPIO_Pin_5;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">GPIO_InitStructure.Mode = GPIO_PullUp;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">GPIO_Inilize(GPIO_P1, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.Pin  = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 | GPIO_Pin_7;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">GPIO_InitStructure.Mode = GPIO_PullUp;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">GPIO_Inilize(GPIO_P2, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">GPIO_config();</span><br><span class="line"></span><br><span class="line">EA = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">LED_SW = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">8</span>;i++) &#123;</span><br><span class="line">LED1 = i == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LED2 = i == <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LED3 = i == <span class="number">2</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LED4 = i == <span class="number">3</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LED5 = i == <span class="number">4</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LED6 = i == <span class="number">5</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LED7 = i == <span class="number">6</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LED8 = i == <span class="number">7</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">delay_ms(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">7</span>;i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line">LED1 = i == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LED2 = i == <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LED3 = i == <span class="number">2</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LED4 = i == <span class="number">3</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LED5 = i == <span class="number">4</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LED6 = i == <span class="number">5</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LED7 = i == <span class="number">6</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LED8 = i == <span class="number">7</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">delay_ms(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习题</p><p>1实现单个LED灯的点亮</p><p>2实现走马灯</p><p>3通过串口控制，实现左转弯流水灯和右转弯流水灯效果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>黑板STC8H扩展板</title>
    <link href="https://wander-m.github.io/%E9%BB%91%E9%A9%ACSTC8H%E6%89%A9%E5%B1%95%E6%9D%BF"/>
    <id>https://wander-m.github.io/%E9%BB%91%E9%A9%ACSTC8H%E6%89%A9%E5%B1%95%E6%9D%BF</id>
    <published>2023-07-14T02:27:33.296Z</published>
    <updated>2023-07-14T05:40:57.785Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="黑马stc8h扩展板"><a class="markdownIt-Anchor" href="#黑马stc8h扩展板"></a> 黑马STC8H扩展板</h1><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1687421231320-816ef8fd-1f1f-4f03-8c26-31ad46bf96aa.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_62%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_720%2Climit_0" alt="3D_PCB2_2023-06-22 (1).png" /></p><p>STC8H8K64U教育开发板</p><p>功能介绍</p><p>1LED灯</p><p>2震动马达</p><p>3蜂鸣器</p><p>4电位器</p><p>5数码管</p><p>6OLED SPI</p><p>7OLED I2C</p><p>8NTC热敏电阻</p><p>9RTC时钟</p><p>10温湿度传感器</p><p>11独立按键</p><p>12矩阵按键</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>定时器Timer</title>
    <link href="https://wander-m.github.io/%E5%AE%9A%E6%97%B6%E5%99%A8Timer"/>
    <id>https://wander-m.github.io/%E5%AE%9A%E6%97%B6%E5%99%A8Timer</id>
    <published>2023-07-14T02:26:02.497Z</published>
    <updated>2023-07-14T05:40:07.758Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="定时器timer"><a class="markdownIt-Anchor" href="#定时器timer"></a> 定时器Timer</h1><p>学习目标</p><p>1理解定时器</p><p>2掌握定时器的编程操作</p><p>学习内容</p><p>定时器</p><p>定时器是一种计时装置，通常由一个晶体振荡器提供时钟信号，可以计时一定的时间后执行相应的操作。在单片机中，定时器一般是由计数器和时钟源组成的，可以用来产生一定时间间隔的中断信号，或者用于测量输入信号的周期和占空比等。定时器通常具有多种工作模式和计数方式，可以灵活地应用于各种场合。</p><p>STC8H内置了5个16位定时器：T0，T1，T2，T3，T4.</p><p>Timer案例</p><p>使用定时器，控制板载LED高低电平输出。</p><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">GPIO_InitTypeDefGPIO_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">GPIO_InitStructure.Pin  = GPIO_Pin_3;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">GPIO_InitStructure.Mode = GPIO_PullUp;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">GPIO_Inilize(GPIO_P5, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIMER_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">TIM_InitTypeDefTIM_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;<span class="comment">//指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TIM_8BitAutoReload,TIM_16BitAutoReloadNoMask</span></span><br><span class="line">TIM_InitStructure.TIM_Priority    = Priority_0;<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">TIM_InitStructure.TIM_Interrupt = ENABLE;<span class="comment">//中断是否允许,   ENABLE或DISABLE</span></span><br><span class="line">TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;<span class="comment">//指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_Ext</span></span><br><span class="line">TIM_InitStructure.TIM_ClkOut    = DISABLE;<span class="comment">//是否输出高速脉冲, ENABLE或DISABLE</span></span><br><span class="line">TIM_InitStructure.TIM_Value     = <span class="number">65536UL</span> - (MAIN_Fosc / <span class="number">100000UL</span>);<span class="comment">//初值,</span></span><br><span class="line">TIM_InitStructure.TIM_Run       = ENABLE;<span class="comment">//是否初始化后启动定时器, ENABLE或DISABLE</span></span><br><span class="line">Timer_Inilize(Timer0,&amp;TIM_InitStructure);<span class="comment">//初始化Timer0  Timer0,Timer1,Timer2,Timer3,Timer4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer0_call</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">P53 = !P53;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">GPIO_config();</span><br><span class="line">TIMER_config();</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启中断总开关</span></span><br><span class="line">EA = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>timer.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">timer0_call</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************* Timer0中断函数************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer0_int</span> <span class="params">(<span class="keyword">void</span>)</span> interrupt TIMER0_VECTOR</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">timer0_call();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定时器配置理解</p><p>工作模式</p><p>工作模式指的是计数方式，timer的计数是在主频计数的基础上，来进行数数的。timer有16位的计数器，通过计数器来计数来确定定时器运行的时长，在关键位置触发定时中断。</p><p>●16位自动重装载模式：可以被设置成定时或者计数两种模式，每当定时器溢出时就会触发中断或者输出信号。</p><p>●16位不可重装载模式：计数值达到设定值后，定时器就会停止计数，需要重新初始化才能继续计数。</p><p>●8位自动重装载模式：8位计数器溢出时触发中断或输出信号。</p><p>●不可屏蔽中断的16位自动重装载模式：16位计数器溢出时触发中断或输出信号，并且可以通过软件或硬件方式清除定时器计数器的值。</p><p>通常使用16位自动重装载模式.</p><p>中断配置</p><p>中断配置是为了打开中断开关的，从而可以触发中断回调的，如果不配置，将无法触发中断回调。</p><p>时钟源</p><p>可配置的是重要有两个：</p><p>●1T: 跟随主频。</p><p>●12T: 进行12分频。</p><p>是否输出高速脉冲</p><p>TIM_ClkOut，可以配置DISABLE或者ENABLE</p><p>如果配置ENABLE，则P3.5端口会同步输出时钟脉冲</p><p>时钟周期设置</p><p>时钟周期指的是1秒钟执行多少次timer中断。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">时</mi><mi mathvariant="normal">钟</mi><mi mathvariant="normal">周</mi><mi mathvariant="normal">期</mi><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">钟</mi><mi mathvariant="normal">源</mi><mi mathvariant="normal">频</mi><mi mathvariant="normal">率</mi></mrow><annotation encoding="application/x-tex">时钟周期=1/时钟源频率</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">钟</span><span class="mord cjk_fallback">周</span><span class="mord cjk_fallback">期</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">钟</span><span class="mord cjk_fallback">源</span><span class="mord cjk_fallback">频</span><span class="mord cjk_fallback">率</span></span></span></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIM_InitStructure.TIM_Value     = <span class="number">65536UL</span> - (MAIN_Fosc / <span class="number">10000UL</span>);</span><br></pre></td></tr></table></figure><p>以上配置中，TIM_InitStructure.TIM_Value最终会转化位寄存器配置。</p><p>其中，10000UL表示的就是时钟周期，意思就是这个timer回调1秒钟要调用 10000次。</p><p>注意时钟周期的取值范围，通过以上数学公式，(MAIN_Fosc / 时钟周期)不能大于65536UL;理论上时钟周期可以无限大，经过测试，最大值为500000UL,也就是2us调用1次。但是，我们要考虑到，如果timer设置到这么高的频率，你在回调中执行的代码时长就不能超过这个值。如果是24M主频，1个时钟周期为 1/24MHz=41.67ns，但是一个指令通常由多个时钟周期组成，一段代码又由多个指令组成，这么一算，可做的操作就很少了。因此我们不要设置得那么大。</p><p>启动配置</p><p>配置定时器的启动</p><p>练习题</p><p>1配置timer控制IO输出：让P53灯每500ms切换一次亮灭</p><p>2配置timer控制UART接收：在Timer中断函数中接收并处理UART消息</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>extern关键字</title>
    <link href="https://wander-m.github.io/extern%E5%85%B3%E9%94%AE%E5%AD%97"/>
    <id>https://wander-m.github.io/extern%E5%85%B3%E9%94%AE%E5%AD%97</id>
    <published>2023-07-14T02:21:39.556Z</published>
    <updated>2023-07-14T05:39:46.728Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="extern关键字"><a class="markdownIt-Anchor" href="#extern关键字"></a> extern关键字</h1><p>学习目标</p><p>1理解extern的作用</p><p>2掌握extern的用法</p><p>学习内容</p><p>extern理解</p><p>extern是C语言中的一个关键字，用于说明一个全局变量或函数的定义不在本文件中，而在其他文件中，告诉编译器该变量或函数已经在别的文件中定义过了。</p><p>在C语言中，如果要在一个源文件中使用另一个源文件中定义的全局变量或函数，需要使用extern关键字声明一下该变量或函数，这样编译器才能知道该变量或函数已经在其他文件中定义过了。</p><p>extern变量</p><p>以下是extern关键字的用法和示例：</p><p>在一个源文件中定义全局变量，然后在另一个源文件中使用该变量：</p><p>a.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> global_var = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>b.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> global_var; <span class="comment">// 声明全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, global_var); <span class="comment">// 使用全局变量</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CMakeLists.txt</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_executable(test b.c a.c)</span><br></pre></td></tr></table></figure><p>extern函数</p><p>在一个源文件中定义函数，然后在另一个源文件中使用该函数：</p><p>a.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>b.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>; <span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 使用函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CMakeLists.txt</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_executable(test b.c a.c)</span><br></pre></td></tr></table></figure><p>头文件中定义</p><p>需要注意的是，如果在一个源文件中定义了一个全局变量或函数，并且该变量或函数要在多个源文件中使用，那么需要将该变量或函数的定义放在一个头文件中，并在其他源文件中包含该头文件。</p><p>例如，将上面的global_var和add函数的定义放在一个头文件中：</p><p>myheader.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> global_var;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><p>然后在其他源文件中包含该头文件即可使用该变量和函数：</p><p>myimpl.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myheader.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> global_var = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>test.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file2.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myheader.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, global_var);</span><br><span class="line">    <span class="keyword">int</span> result = add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CMakeLists.txt</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_executable(test test.c myimpl.c)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>系统时钟</title>
    <link href="https://wander-m.github.io/%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F"/>
    <id>https://wander-m.github.io/%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F</id>
    <published>2023-07-14T02:17:20.271Z</published>
    <updated>2023-07-14T05:39:25.894Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="系统时钟"><a class="markdownIt-Anchor" href="#系统时钟"></a> 系统时钟</h1><p>学习目标</p><p>1了解系统时钟概念</p><p>2了解时钟周期概念</p><p>3了解指令周期（机器周期）概念</p><p>学习内容</p><p>时钟与周期</p><p>系统时钟</p><p>系统时钟是指计算机中用于控制各个设备协调工作的定时器。它是计算机的主频，是CPU和外设工作的基础，通常表示为以赫兹为单位的频率，如1MHz，10MHz等等。</p><p>系统时钟的时钟信号，通常以晶振的形式提供。STC8H单片机支持外部晶振和内部晶振两种时钟源，可以通过相应的配置来选择使用哪种时钟源。</p><p>时钟周期</p><p>时钟周期是系统时钟一个完整的周期所需的时间。它的倒数就是时钟频率，即每秒钟发生的时钟周期数。例如，STC8H的时钟频率为24MHz，那么每个时钟周期的时间就是1/24MHz=41.67ns。</p><p>机器周期</p><p>也叫做指令周期。指令周期是一条指令的执行时间。</p><p>早期的STC8H单片机的机器周期为12个时钟周期。现在的STC8H可以有两种配置，一个是1T，一个是12T。</p><p>●12T也就是早期的配置，假设当系统时钟为24MHz时，每个机器周期的时间就是12 * 41.67ns = 500ns。</p><p>●1T是芯片架构升级后的，每个机器周期的时间为 1 * 41.67ns = 41.67ns.。</p><p>NOP指令</p><p>NOP指令是一种汇编指令，表示“no operation”（不执行任何操作）。它不会改变寄存器的值，也不会修改存储器中的数据。在程序中插入NOP指令可以用于延时或调整代码的执行顺序。</p><p>在大多数处理器中，NOP指令会被翻译成一个或多个机器指令来实现其“不执行任何操作”的效果。在STC8H单片机中，NOP指令被翻译成一条长度为1个字节的指令，不做任何操作。</p><p>NOP指令在某些情况下也被用于填充一些未使用的空间，使程序的大小达到特定的大小或对齐要求。在编写汇编代码时，程序员可以在代码中插入NOP指令来占用空间，使得代码和数据能够对齐在内存中的特定地址上，以提高程序的执行效率。</p><p>我们可以理解为让程序执行时，睡1个NOP指令周期的时长。</p><p>库函数系统时钟配置</p><p>在config.h中，配置系统时钟频率。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#define MAIN_Fosc22118400L//定义主时钟</span></span><br><span class="line"><span class="comment">//#define MAIN_Fosc12000000L//定义主时钟</span></span><br><span class="line"><span class="comment">//#define MAIN_Fosc11059200L//定义主时钟</span></span><br><span class="line"><span class="comment">//#define MAIN_Fosc 5529600L//定义主时钟</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAIN_Fosc24000000L<span class="comment">//定义主时钟</span></span></span><br></pre></td></tr></table></figure><p>根据实际情况配置系统时钟。</p><p>值得注意的是，在系统时钟配置确定后，烧录时的时钟频率和此处配置的频率应该保持一致，否则会出现一些奇奇怪怪的错误。</p><p>测试不同时钟的执行周期</p><p>睡眠一个指令周期，观测高低电平变化时长。切换不同主频，体会主频不同带来了什么变化？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">GPIO_InitTypeDefGPIO_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">GPIO_InitStructure.Pin  = GPIO_Pin_3;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">GPIO_InitStructure.Mode = GPIO_PullUp;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">GPIO_Inilize(GPIO_P5, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">GPIO_config();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">P53 = <span class="number">1</span>;</span><br><span class="line">NOP1();</span><br><span class="line">P53 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//NOP1();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为几种主频下的高低变化情况</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679211456627-d96fbd37-73d7-4760-bf16-ef82dcd36663.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_23%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="51.png" /></p><p>以上是24M主频</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679211573626-0bcde514-eb2b-43f9-a29f-faf2aeb89814.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_22%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="52.png" /></p><p>以上是12M主频</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679211686821-f496a8d7-c602-41ec-b692-27d1fed1afd9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_22%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="53.png" /></p><p>以上是6M主频</p><p>小结：</p><p>●主频越高，执行速度越快。</p><p>●主频越高，干扰越强，越容易出现问题。</p><p>练习题</p><p>1配置系统时钟主频</p><p>2调试不同主频下，执行周期</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>中断系统INT</title>
    <link href="https://wander-m.github.io/%E4%B8%AD%E6%96%AD%E7%B3%BB%E7%BB%9FINT"/>
    <id>https://wander-m.github.io/%E4%B8%AD%E6%96%AD%E7%B3%BB%E7%BB%9FINT</id>
    <published>2023-07-14T02:14:14.211Z</published>
    <updated>2023-07-14T05:38:58.182Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="中断系统int"><a class="markdownIt-Anchor" href="#中断系统int"></a> 中断系统INT</h1><p>学习目标</p><p>1理解中断的概念，掌握中断的分类和优先级</p><p>2理解中断的响应机制和处理方法</p><p>学习内容</p><p>中断的概念</p><p>中断系统是为使 CPU 具有对外界紧急事件的实时处理能力而设置的。</p><p>当中央处理机 CPU 正在处理某件事的时候外界发生了紧急事件请求，要求 CPU 暂停当前的工作,转而去处理这个紧急事件，处理完以后，再回到原来被中断的地方，继续原来的工作，这样的过程称为中断。实现这种功能的部件称为中断系统，请示 CPU 中断的请求源称为中断源。微型机的中断系统一般允许多人中断源，当几个中新源同时向 CPU 请求中断，要求为它服务的时候，这就存在 CPU 优先响应哪一个中断源请求的问题。通常根据中断源的轻重缓急排队，优先处理最紧急事件的中断请求源，即规定每一个中断源有一个优先级别。CPU 总是先响应优先级别最高的中断请求。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681057975277-c08fe570-b2ed-4e9f-8f01-ad904051f7dd.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_48%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="105.png" /></p><p>当 CPU 正在处理一个中断源请求的时候(执行相应的中断服务程序)，发生了另外一个优先级比它还高的中断源请求。如果 CPU 能够暂停对原来中断源的服务程序,转而去处理优先级更高的中断请求源处理完以后，再回到原低级中断服务程序，这样的过程称为中断嵌套。这样的中断系统称为多级中新系统，没有中断嵌套功能的中断系统称为单级中断系统。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681191310061-4fcbef02-f722-49f3-b93f-33392879eea5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="106.png" /></p><p>用户可以用关总中断允许位(EA/IE.7)或相应中断的允许位屏蔽相应的中断请求，也可以用打开相应的中断允许位来使 CPU 响应相应的中断申请,每一个中断源可以用软件独立地控制为开中断或关中断状态，部分中断的优先级别均可用软件设置。高优先级的中断请求可以打断低优先级的中断，反之，低优先级的中断请求不可以打断高优先级的中断。当两个相同优先级的中断同时产生时，将由查询次序来决定系统先响应哪个中断。</p><p>中断源</p><p>能请示CPU中断的请求源为中断源。STC8H中的中断源如下图</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679050835487-e2dab479-bc31-4e32-8f09-35b58efcacf7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_23%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="50.png" /></p><p>中断寄存器</p><p>通过STC8H的用户手册可以查询到所有的中断寄存器，以及中断请求位信息。</p><p><a href="https://www.yuque.com/office/yuque/0/2023/pdf/27903758/1681056971018-019e37d9-a522-41be-86d7-ff0a3db18900.pdf?from=https%3A%2F%2Fwww.yuque.com%2Ficheima%2Fstc8h%2Fyoffy6qyanqlr2fu">stc8h.pdf</a></p><p>(21.4 MB)</p><p>中断函数</p><p>通过 interrupt关键字定义中断函数。示例如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART1_int</span> <span class="params">(<span class="keyword">void</span>)</span> interrupt 0</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>●UART1_int是中断函数的名称，可以随意取，按照自己的需求定</p><p>●interrupt是中断函数的标记，说明当前函数是中断函数</p><p>●0是中断次序，这个就需要根据自己业务，查询用户手册来定。</p><p>中断函数，可以理解为回调函数，就是这个函数定义出来了，在什么时机调用，不是我们做的，是系统自己调用的。而我们关心的是，某个事件触发了这个函数调用，我们可以在这个函数中写自己的逻辑。</p><p>验证Uart的中断函数</p><p>接收时亮灯，发送时灭灯</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">sfrP5M1 = <span class="number">0xC9</span>;</span><br><span class="line">sfrP5M0 = <span class="number">0xCA</span>;</span><br><span class="line">sfrP5 = <span class="number">0xC8</span>;</span><br><span class="line">sbitP53= P5^<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">sfr     T2L     =   <span class="number">0xd7</span>;</span><br><span class="line">sfr     T2H     =   <span class="number">0xd6</span>;</span><br><span class="line">sfr     AUXR    =   <span class="number">0x8e</span>;</span><br><span class="line"></span><br><span class="line">sfrIE= <span class="number">0xA8</span>;</span><br><span class="line">sbitEA= IE^<span class="number">7</span>;</span><br><span class="line">sbitES= IE^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">sfrSCON= <span class="number">0x98</span>;</span><br><span class="line">sfrSBUF= <span class="number">0x99</span>;</span><br><span class="line">sbitRI= SCON^<span class="number">0</span>;</span><br><span class="line">sbitTI= SCON^<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uart_hello</span><span class="params">(<span class="keyword">void</span>)</span> interrupt 4 </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(RI) &#123;</span><br><span class="line">        <span class="comment">// 如果接收寄存器RI触发了中断，打开灯</span></span><br><span class="line">RI = <span class="number">0</span>;</span><br><span class="line">P53 = <span class="number">1</span>;<span class="comment">//开</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(TI) &#123;</span><br><span class="line">        <span class="comment">// 如果发送寄存器TI触发了中断，关掉灯</span></span><br><span class="line">TI = <span class="number">0</span>;</span><br><span class="line">P53 = <span class="number">0</span>;<span class="comment">//关</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay1000ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">i = <span class="number">57</span>;</span><br><span class="line">j = <span class="number">27</span>;</span><br><span class="line">k = <span class="number">112</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">P5M1 &amp;= ~<span class="number">0x08</span>,P5M0 |=  <span class="number">0x08</span>; <span class="comment">//推挽输出</span></span><br><span class="line"></span><br><span class="line">SCON = <span class="number">0x50</span>;</span><br><span class="line">T2L = <span class="number">0xe8</span>; <span class="comment">//65536-11059200/115200/4=0FFE8H</span></span><br><span class="line">T2H = <span class="number">0xff</span>;</span><br><span class="line">AUXR = <span class="number">0x15</span>;<span class="comment">//启动定时器</span></span><br><span class="line"></span><br><span class="line">EA = <span class="number">1</span>;</span><br><span class="line">ES = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">P53 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 休眠1000ms</span></span><br><span class="line">Delay1000ms();</span><br><span class="line">        <span class="comment">// 发送一个数据0x11</span></span><br><span class="line">SBUF = <span class="number">0x11</span>;</span><br><span class="line">        <span class="comment">// 将TI位寄存器置为1</span></span><br><span class="line">TI = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成的内容有：</p><p>●配置Uart初始化，包括定时发生器</p><p>●查询几个寄存器地址：SBUF，IE</p><p>练习题</p><p>1阅读用户手册中断章节</p><p>2尝试验证UART1的中断函数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>串口调试TTL</title>
    <link href="https://wander-m.github.io/%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95TTL"/>
    <id>https://wander-m.github.io/%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95TTL</id>
    <published>2023-07-14T02:09:15.405Z</published>
    <updated>2023-07-14T05:38:34.216Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="串口调试ttl"><a class="markdownIt-Anchor" href="#串口调试ttl"></a> 串口调试TTL</h1><p>学习目标</p><p>●了解串口通信的基本概念</p><p>●掌握STC8H的串口通信原理</p><p>●掌握STC8H的串口通信编程</p><p>●学会使用逻辑分析仪调试串口</p><p>学习内容</p><p>什么是串口</p><p>串口是一种在数据通讯中广泛使用的通讯接口，通常我们叫做UART (通用异步收发传输器Universal Asynchronous Receiver/Transmitter)，其具有数据传输速度稳定、可靠性高、适用范围广等优点。在嵌入式系统中，串口常用于与外部设备进行通讯，如传感器、液晶显示屏、WiFi模块、蓝牙模块等。</p><p>串口通信中的 TXD（Transmit Data）和 RXD（Receive Data）是串口通信中的两个重要信号。</p><p>TXD是指串口发送端的数据信号，而RXD是指串口接收端的数据信号。在串口通信中，发送端把要发送的数据发送到TXD引脚上，接收端则通过RXD引脚来接收这些数据。</p><p>TXD和RXD信号的实现方式取决于使用的芯片或模块。一般来说，它们都是通过芯片或模块的串口功能来实现的，这需要将相应的引脚连接到芯片或模块的串口引脚上。</p><p>在发送数据时，需要将要发送的数据通过串口的发送缓冲区发送到TXD引脚上，接收端通过RXD引脚接收这些数据并放入接收缓冲区中。在接收端收到完整的数据后，可以通过相应的处理进行数据的解析和处理。</p><p>需要注意的是，TXD和RXD的电平标准也需要一致，一般常见的有TTL电平和RS232电平，如果不一致则需要进行电平转换。同时，在编写程序时也需要注意串口波特率、数据位、停止位等参数的设置，以保证通信的稳定和可靠。</p><p>以下是STC8H的芯片引脚介绍图</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679017111086-5b1208a3-f2ed-4283-9c2d-7db389bd5a8d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_41%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="32.png" /></p><p>其中有4组Uart通讯口:</p><table><thead><tr><th>串口</th><th>RXD</th><th>TXD</th></tr></thead><tbody><tr><td>UART1</td><td>P3.0</td><td>P3.1</td></tr><tr><td>P3.6</td><td>P3.7</td><td></td></tr><tr><td>P1.6</td><td>P1.7</td><td></td></tr><tr><td>P4.3</td><td>P4.4</td><td></td></tr><tr><td>UART2</td><td>P1.0</td><td>P1.1</td></tr><tr><td>P4.6</td><td>P4.7</td><td></td></tr><tr><td>UART3</td><td>P0.0</td><td>P0.1</td></tr><tr><td>P5.0</td><td>P5.1</td><td></td></tr><tr><td>UART4</td><td>P0.2</td><td>P0.3</td></tr><tr><td>P5.2</td><td>P5.3</td><td></td></tr></tbody></table><p>串口TTL通讯协议</p><p>串口TTL（Transistor-Transistor Logic）是一种串口通信协议，使用TTL电平来进行串口数据传输。它主要用于嵌入式系统、传感器、模块等设备之间的数据通信。</p><p>串口TTL主要包括两个信号线：TX（Transmit，发送）和RX（Receive，接收）。TX线是串口TTL的输出线路，用于将数据从串口设备发送出去；RX线是串口TTL的输入线路，用于接收数据到串口设备。</p><p>串口TTL使用的是异步串行通信协议，其数据传输的原理是将数据分成一定的数据帧，在数据帧的首尾各加上一个起始位和停止位，用于确定每个数据帧的开始和结束位置。此外，串口TTL通信协议还规定了数据位的长度和奇偶校验位。</p><p>串口TTL通常有不同的波特率（Baud Rate）可供选择，波特率是指每秒钟传输的数据位数，通常表示为 bps（bits per second），比如 9600 bps、115200 bps 等等。波特率的设置必须要保证发送和接收设备的波特率一致，否则会导致通信失败。</p><p>需要注意的是，串口TTL使用的是TTL电平，其电压范围是0~5V，不同的设备的串口TTL信号的电平有时会有所不同，因此在连接不同设备时需要注意电平的兼容性。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679018348075-39bd331f-bbc2-4e19-88ef-78a9af78995c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_45%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="33.png" /></p><p>串口转USB</p><p>串口转 USB 是一种将串口信号转换为 USB 信号的设备。它通常被用于连接没有 USB 接口的设备（如单片机、传感器等）与计算机之间的通讯，使这些设备可以通过 USB 接口与计算机进行通信。</p><p>在使用串口转 USB 设备时，需要将其插入计算机的 USB 接口，并将串口连接到需要通信的设备上。在计算机中打开串口终端程序，设置串口参数（如波特率、数据位、停止位等），即可开始进行数据传输。在通信过程中，串口转 USB 设备将串口信号转换为 USB 信号，并将其发送到计算机上，或者将从计算机上接收到的 USB 信号转换为串口信号并发送到外部设备上。</p><p>串口转 USB 设备通常由一个 USB 转串口芯片和一个串口接口组成。常见的 USB 转串口芯片有 FTDI 和 CH340 等，它们提供了一组标准的串口接口，可以方便地连接到各种外部设备上。</p><p>总之，串口转 USB 设备是一种非常实用的工具，它可以帮助我们连接各种没有 USB 接口的设备，方便数据的传输和通讯。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679019560650-d6318b8f-ba4e-46c6-95eb-af1569b82554.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_44%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="34.png" /></p><p>黑马STC8H核心板串口调试</p><p>1原理图</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679019703770-7ad6cd04-2a6e-4444-871d-32f55d5ef806.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_43%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1503%2Climit_0" alt="35.png" /></p><p>○D+D-对应的usb口，和pc主机连接</p><p>○P3.1P3.0对应的芯片</p><p>○采用CH340将串口和USB之间进行转换</p><p>所以，我们在PC机上为什么会装串口驱动，主要是用来解析CH340转换后的消息，这样PC机就能认识了</p><p>2使用库函数编写串口通讯逻辑</p><p>需求：通过串口调试工具，发送消息给开发板，开发板原封不动的将消息传回。</p><p>开发步骤：</p><p>a新建项目</p><p>b导入库函数</p><p>c编写逻辑</p><p>串口调试实现</p><p>1新建项目。新建main.c文件</p><p>2导入函数库。拷贝以下函数库文件到项目目录：</p><p>aconfig.hSTC8xxxx.H</p><p>bGPIO.hGPIO.c</p><p>cdelay.hdelay.c</p><p>dUART.hUART.c</p><p>3代码编写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GPIO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;UART.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">GPIO_InitTypeDefGPIO_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">GPIO_InitStructure.Pin  = GPIO_Pin_0 | GPIO_Pin_1;<span class="comment">//指定要初始化的IO,</span></span><br><span class="line">GPIO_InitStructure.Mode = GPIO_PullUp;<span class="comment">//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP</span></span><br><span class="line">GPIO_Inilize(GPIO_P3, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_config</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">COMx_InitDefineCOMx_InitStructure;<span class="comment">//结构定义</span></span><br><span class="line">COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;<span class="comment">//模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit_BRTx</span></span><br><span class="line">COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;<span class="comment">//选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口2固定使用BRT_Timer2)</span></span><br><span class="line">COMx_InitStructure.UART_BaudRate  = <span class="number">115200ul</span>;<span class="comment">//波特率, 一般 110 ~ 115200</span></span><br><span class="line">COMx_InitStructure.UART_RxEnable  = ENABLE;<span class="comment">//接收允许,   ENABLE或DISABLE</span></span><br><span class="line">COMx_InitStructure.BaudRateDouble = DISABLE;<span class="comment">//波特率加倍, ENABLE或DISABLE</span></span><br><span class="line">COMx_InitStructure.UART_Interrupt = ENABLE;<span class="comment">//中断允许,   ENABLE或DISABLE</span></span><br><span class="line">COMx_InitStructure.UART_Priority  = Priority_0;<span class="comment">//指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3</span></span><br><span class="line">COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31;<span class="comment">//切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44</span></span><br><span class="line">UART_Configuration(UART1, &amp;COMx_InitStructure);<span class="comment">//初始化串口1 UART1,UART2,UART3,UART4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">u8 i;</span><br><span class="line"><span class="comment">// 配置引脚</span></span><br><span class="line">GPIO_config();</span><br><span class="line"><span class="comment">// 配置UART</span></span><br><span class="line">UART_config();</span><br><span class="line"><span class="comment">//开启中断</span></span><br><span class="line">EA = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(COM1.RX_TimeOut &gt; <span class="number">0</span>)<span class="comment">//超时计数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(--COM1.RX_TimeOut == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(COM1.RX_Cnt &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;COM1.RX_Cnt; i++)&#123;</span><br><span class="line">TX1_write2buff(RX1_Buffer[i]);<span class="comment">//收到的数据原样返回</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">COM1.RX_Cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4调试</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679022134549-39ba5da7-c832-4731-be03-6c0b19340dd5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_40%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1419%2Climit_0" alt="36.png" /></p><p>使用STC-ISP调试工具进行调试。切换好串口助手，选择正确的串口，设置和代码中相同的波特率。</p><p>通过发送区进行数据发送，通过接收区观察接收内容。</p><p>串口调试重难点</p><p>功能配置</p><p>●配置IO的工作模式：如果不配置工作模式，会导致串口不工作。（UART1的当前代码中的引脚默认是准双向口，可以不配置，但是不要存在侥幸心理，导致其他的串口使用中没有配置准双向口）</p><p>●配置UART的串口工作模式UART_Mode：</p><p>○UART_ShiftRight同步移位输出：按位传输，效率低，通常不用。</p><p>○UART_8bit_BRTx8位数据，可变波特率：常用。发送和接收的数据为8位。</p><p>○UART_9bit9位数据，固定波特率，即无法在运行时动态更改波特率。</p><p>○UART_9bit_BRTx9位数据，可变波特率：发送和接收的数据为9位。最后一位为奇偶校验位。</p><p>●配置UART的波特率RaudRate：根据实际情况来定，波特率越高，传输越快，但是出现丢帧的概率越高。通常115200就够用。单位是bit/s</p><p>●配置UART的波特率发生器BRT_Use：系统提供了4个发生器，通常一一对应。</p><p>○BRT_Timer1</p><p>○BRT_Timer2</p><p>○BRT_Timer3</p><p>○BRT_Timer4</p><p>●配置UART是否接收RxEnable：可以获取RXD接收的数据。</p><p>●配置UART中断Interrupt：UART的对外发送是通过中断实现的，如果不配置，则无法对外发送数据，TXD不工作。</p><p>●配置UART波特率加倍BaudRateDouble：默认不加倍，配置加倍会导致波特率是设定的双倍，过高会导致丢帧。</p><p>●配置UART的端口P_SW：串口通道可以通过几组引脚来实现，但是需要指明是哪一组。</p><p>中断开启</p><p>由于uart中的发送是通过中断实现的，需要开启，但是STC8还提供了一个总的开关，如果总开关不打开，一样不起作用。</p><p>开启中断的总开关</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EA = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>UART的接收与发送</p><p>1关于接收</p><p>接收是通过接收缓冲区进行接收。</p><p>在死循环中，间隔一定时间到缓冲区中去取数据，有数据，说明就是接收了</p><p>2关于发送</p><p>发送是通过发送缓冲区进行发送。</p><p>发送提供了单个字节发送的API: TX1_write2buff(byte)</p><p>发送提供了字符串发送的API: PrintString1(str)</p><p>逻辑分析仪调试</p><p>通过逻辑分析仪，分析RXD和TXD的数据</p><p>原理图分析</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679044088373-6bccb330-cb3e-4da6-babd-5e8f2faea96c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_43%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="35.png" /></p><p>●P3.0引脚为RXD，对这个引脚进行分析即可</p><p>●P3.1引脚为TXD，对这个引脚进行分析即可</p><p>接线方式</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679044545514-9eaca4e5-dc66-4eea-817d-030f91af9637.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_38%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="46.png" /></p><p>●将逻辑分析仪的通道1线和开发板中的P3.0引脚RXD连接。</p><p>●将逻辑分析仪的通道2线和开发板中的P3.1引脚TXD连接。</p><p>●将逻辑分析仪的GND线和开发板的GND连接。</p><p>程序和串口工具准备</p><p>1烧录写好的串口程序固件，功能是接收到串口消息，并原路返回这个消息。</p><p>2打开STC-ISP工具的串口调试部分，进行配置调试：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679044933806-35daa8dd-5e56-4d86-9c06-9b0081c0cc0a.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1204%2Climit_0" alt="47.png" /></p><p>a配置正确的波特率，选择对应的串口，打开串口</p><p>b在发送区域输入发送的内容</p><p>c点击自动发送，这样工具就会定时发送这个数据</p><p>逻辑分析仪调试</p><p>点击绿色按钮，进行数据分析</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679045243148-532a7c83-d4e0-4e17-b665-04245261a536.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_55%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="48.png" /></p><p>●选择右侧的分析</p><p>●观察到逻辑分析仪已经100%确认为 Async Serial信号，也就是串口信号</p><p>查看串口内容：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679045364518-a821f59e-36ab-42f7-88b5-775bf5e9a3d0.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_55%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="49.png" /></p><p>●点击数据按钮，可以观察到，传输的内容为<code>hello</code>，也就是分析出我们发送的内容</p><p>串口通讯测试</p><p>测试流程：</p><p>1PC机通过串口工具连接两个设备A和B的UART1</p><p>2将A和B的UART2相连（A设备的RXD、TXD接B设备的TXD，RXD）</p><p>3编写代码</p><p>a接收PC从UART1发来的数据，将之从UART2发出去</p><p>b接收另外一个设备从UART2发来的数据，将之从UART1发出去</p><p>4通过PC机的串口工具A给A设备发消息，观察串口工具B收到的消息</p><p>引脚选择如下：</p><p>UART1：RXD-P3.0TXD-P3.1<br />UART2：RXD-P1.0TXD-P1.1</p><p>注意：</p><p>如果串口窗口出现乱码内容，通常原因有两个：</p><p>1烧录时，选择的IRC频率不是24.000 MHz</p><p>2连接串口时，选择的波特率和代码中的不一致，通常为115200</p><p>重要的事情说三遍：<br />使用UART一定要记得打开中断总开关！！！EA = 1;<br />使用UART一定要记得打开中断总开关！！！EA = 1;<br />使用UART一定要记得打开中断总开关！！！EA = 1;</p><p>练习题</p><p>1通过库函数，实现PC和单片机的UART通讯。</p><p>2通过逻辑分析仪进行调试串口的TXD和RXD</p><p>3通过串口控制灯的开和关：P53引脚</p><p>4实现两个开发板的串口通讯：开发板1要用UART2，开发板2要求用UART3</p><p>a注意的问题：接线和调试设计问题</p><p>b开发板1发送消息给开发板2，控制开发板2的灯泡亮或者灭</p><p>c开发板2发送消息给开发板1，控制开发板1的灯泡亮或者灭</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AStyle格式化工具</title>
    <link href="https://wander-m.github.io/AStyle%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B7%A5%E5%85%B7"/>
    <id>https://wander-m.github.io/AStyle%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B7%A5%E5%85%B7</id>
    <published>2023-07-14T01:59:52.101Z</published>
    <updated>2023-07-14T05:38:13.619Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="astyle格式化工具"><a class="markdownIt-Anchor" href="#astyle格式化工具"></a> AStyle格式化工具</h1><p>AStyle（Artistic Style）是一个开源的代码自动格式化工具，可以用于自动化代码风格的修改。它支持多种编程语言，包括C、C++、C#、Objective-C、Java、Objective-C++、Pike和汇编语言等。AStyle可以在命令行中使用，也可以通过与许多IDE和文本编辑器集成来使用。</p><p>使用AStyle可以遵循特定的代码风格规范，并且可以提高代码的可读性和可维护性。AStyle支持多种自定义选项，可以根据需要进行定制。例如，可以调整缩进、括号位置、代码块风格、空格使用等等。</p><p>总之，AStyle是一款方便易用的代码自动格式化工具，适用于许多不同的编程语言和开发环境。</p><p><a href="https://www.yuque.com/attachments/yuque/0/2023/zip/27903758/1688628753886-27ce56ed-33a9-4b6c-929d-1962f47634c2.zip">astyle-3.4-x64.zip</a></p><p>(718 KB)</p><p>keil配置</p><p>1解压 AStyle 压缩包，放到指定位置。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681019681165-213ccf18-3abf-4573-9ad9-abe5a9854c7c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_16%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="99.png" /></p><p>2在Tools目录下选择 Customize Tools Menu</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681019340463-acd53587-f8f1-4893-8d3c-ff120110827b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_27%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="98.png" /></p><p>3添加格式化当前文件命令</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681019890896-31e61b4e-438d-46bc-88eb-7a5555a3b1f7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="100.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681019911642-29342971-f0be-453e-b18b-34ea4cc8fcc7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="101.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681019933031-85d1c868-ab48-47a8-bad6-fe8b421465d1.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="102.png" /></p><p>在Command中填入 D:\softwares\AStyle\bin\AStyle.exe</p><p>在Arguments中填入 !E</p><p>4添加格式化所有文件命令</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681019979554-814a0145-9fab-47b7-b786-306588f78e9c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="103.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1681019989924-639f8608-ffa1-4c1e-98ba-87b42f530ae8.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="104.png" /></p><p>在Command中填入 D:\softwares\AStyle\bin\AStyle.exe</p><p>在Arguments中填入 “<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>∗</mo><mi mathvariant="normal">.</mi><mi>c</mi><mi mathvariant="normal">&quot;</mi><mi mathvariant="normal">&quot;</mi></mrow><annotation encoding="application/x-tex">E*.c&quot; &quot;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord mathdefault">c</span><span class="mord">&quot;</span><span class="mord">&quot;</span></span></span></span>E*.h”</p><p>每次格式化时，为了安全，AStyle会为文件创建一个备份，.orig结尾的原文件，如 xxx.c.orig 。<br />如果不需要创建，可以在配置Arguments时，末尾追加个 -n参数。</p><p>快捷键配置</p><p>Edit-&gt; Configuration… -&gt; Shortcut Keys，配置以下几个快捷键：</p><p>●Tools：格式化当前文件 -&gt; Alt + Shift + F</p><p>●Edit:Advanced:Comment Selection -&gt; Ctrl + /</p><p>●Edit:Advanced:Uncomment Selection -&gt; Ctrl + Shift + /</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/27903758/1687670748330-e10df175-32ff-4e2b-8455-54836508add4.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_22%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="image.png" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>逻辑分析仪</title>
    <link href="https://wander-m.github.io/%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90%E4%BB%AA"/>
    <id>https://wander-m.github.io/%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90%E4%BB%AA</id>
    <published>2023-07-14T01:53:40.584Z</published>
    <updated>2023-07-14T05:37:46.314Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="逻辑分析仪"><a class="markdownIt-Anchor" href="#逻辑分析仪"></a> 逻辑分析仪</h1><p>学习目标</p><p>1学会使用逻辑分析仪分析调试电路中的IO信号</p><p>学习内容</p><p>什么是逻辑分析仪</p><p>逻辑分析仪（Logic Analyzer）是一种工具，用于分析数字信号，例如控制信号，时钟信号等等。它可以用于调试和验证数字电路、嵌入式系统等等。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/jpeg/21441195/1678962499216-0ddd6a62-ed0d-4b22-836c-58d99ae64290.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_37%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0%2Finterlace%2C1" alt="21.jpg" /></p><p>本教程采用的是mini版USB 逻辑分析仪。总共有10个端口，其中8个为分析通道，一个时钟信号，一个是GND。</p><p>8路通道可以同时测8路信号。</p><p>软件安装</p><p>安装提供的安装包，根据实际情况进行安装选择所需要的版本</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042046393-ce7ab492-4ef7-49b3-b289-a9457959b4f8.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="43.png" /></p><p>●安装2.4.7版本</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042120651-115f1030-27c0-41dc-9e4e-6fa0bea194b3.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="37.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042131590-c49826ab-5777-4a34-9419-95b6359ff014.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="38.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042140014-abd7a6d8-88bf-4e4a-853d-3858ea701f31.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="39.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042156848-bf2d3b66-6ba6-4d6f-ab0d-72707feb39b5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="40.png" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042168321-5a19980e-dff4-4e00-b976-eaa5dcba94bd.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_21%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="41.png" /></p><p>功能介绍</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042179699-51884458-4a57-41b7-b9dd-024937a4cf96.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_55%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="42.png" /></p><p>大致关注几个区，后续过程中我们会陆续学会所有功能。</p><p>●主界面中的顶部，如果显示Disconnected，说明逻辑分析仪没有和PC电脑连接；如果显示Connected,表示已经连接</p><p>●菜单部分</p><p>●8个调试通道</p><p>●右侧功能部分，绿色按钮为调试按钮</p><p>使用逻辑分析仪测试点灯</p><p>分析测试</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678964797793-b1f402aa-9502-4d78-a476-6d9f6b16fa5e.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_31%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="01.png" /></p><p>测试P5.3端口是否是1秒钟高电平1秒钟低电平</p><p>接线</p><p>将逻辑分析仪的通道1线和开发板中的P5.3引脚连接。</p><p>将逻辑分析仪的GND线和开发板的GND连接。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1678965322575-50c9ef72-f9f6-40fa-9ea2-460442eb3bfb.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_750%2Climit_0" alt="29.png" /></p><p>测试</p><p>将LED的代码烧录到开发板中，并且运行。</p><p>打开逻辑分析仪的软件(Logic)，查看是否和逻辑分析仪连接，点击按钮进行测试</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679042992688-6992aecf-c4da-404b-93d8-fb8091e60eb0.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_55%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="44.png" /></p><p>●配置采样率，最高24MS/s</p><p>●点击绿色按钮进行采用</p><p>观察通道1，通过鼠标滚轮缩放，查看波形。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2023/png/21441195/1679043121549-76505f8d-d772-431c-89e1-d8e41865f19a.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_55%2Ctext_6buR6ams56iL5bqP5ZGY%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="45.png" /></p><p>鼠标放到悬浮窗上，可以查看高低电平持续时间。</p><p>练习题</p><p>1安装逻辑分析仪调试软件</p><p>2使用逻辑分析仪调试IO口</p><p>3解决连不上的问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
